(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports=[{"id":0,"els":[{"name":"text","x":"29.709015","y":"42.658092","style":[],"text":"De l'ancien régime à nos jours"},{"name":"path","d":"m 749.59302,297.6583 c -3.80572,0 -6.86945,3.06435 -6.86945,6.87007 l 0,157.99924 c 0,3.80573 3.06373,6.86945 6.86945,6.86945 l 222.31197,0 c 3.8058,0 6.8695,-3.06372 6.8695,-6.86945 l 0,-157.99924 c 0,-3.80572 -3.0637,-6.87007 -6.8695,-6.87007 l -222.31197,0 z m 24.62187,11.6524 c 0.18909,0.007 0.3738,0.0652 0.61056,0.12897 0.56996,0.15347 1.01711,0.53144 1.3152,1.11022 0.258,0.50092 0.19507,1.59727 -0.12025,2.0971 -0.15439,0.24473 -2.0805,2.19985 -4.28079,4.34496 -2.20028,2.14511 -4.00105,3.95936 -4.00105,4.03158 0,0.079 5.47498,0.13146 13.75074,0.13146 l 18.71249,0.0978 0,-0.88905 0.043,0 0.34703,-0.95385 c 0.5338,-1.46705 2.2842,-3.0909 3.60543,-3.34501 0.26675,-0.0513 0.53854,-0.0745 0.81117,-0.0704 1.18144,0.018 2.37846,0.54337 3.24533,1.45725 0.57843,0.60979 0.94543,2.09878 1.17938,4.0889 l 0.11713,0.0797 c 0.76779,0.52254 1.05229,1.01432 1.05229,1.81922 0,0.74595 -0.24963,1.22396 -0.89653,1.70584 0.11896,2.59026 0.13395,5.52269 0.13395,8.36034 l 0,6.40343 0.82675,-0.48658 c 0.45469,-0.26767 1.50758,-0.48658 2.34007,-0.48658 1.71384,0 3.01423,0.7907 3.97863,2.41982 l 0.5738,0.96943 0.83361,-0.5763 c 1.01571,-0.70218 3.48018,-0.77272 4.56052,-0.13021 1.18184,0.70286 2.21378,2.13665 2.5924,3.60169 l 0.3464,1.34013 0.78688,-0.46291 c 1.00134,-0.58947 3.13936,-0.59633 4.12005,-0.0131 1.13571,0.67544 2.27499,2.17455 2.58368,3.39984 0.44634,1.77171 0.34434,17.3889 -0.13582,20.24575 -0.62479,3.71738 -2.07197,6.82771 -4.44839,9.55967 -2.25543,2.59288 -3.7986,3.72167 -6.61151,4.83528 -2.18235,0.86397 -6.04289,1.22032 -8.26316,0.7632 -6.17697,-1.27174 -10.51548,-5.13934 -14.31582,-12.76138 -0.74354,-1.49127 -3.22506,-7.57504 -5.51375,-11.55022 -4.7551,-8.25902 -5.83087,-10.6633 -5.83087,-13.03239 0,-2.75183 1.30305,-4.14248 3.88081,-4.14248 1.58707,0 3.85333,1.1984 5.92682,3.13443 0.69352,0.64754 1.48161,1.37314 1.75131,1.61238 0.46461,0.41211 0.49032,-0.0616 0.49032,-9.0139 l 0,-13.59996 -18.82339,-0.0984 c -8.27566,-0.0433 -13.75074,0.0524 -13.75074,0.13145 0,0.0722 1.80077,1.88586 4.00105,4.03096 2.20029,2.14511 4.1264,4.10086 4.28079,4.34559 0.56822,0.90068 0.25857,2.39967 -0.61367,2.97119 -0.43641,0.28594 -1.50338,0.40336 -1.95941,0.21557 -0.19624,-0.0808 -3.19971,-2.98574 -6.67444,-6.45576 -6.82596,-6.81666 -6.77718,-6.75688 -6.46387,-7.91489 0.11886,-0.43929 1.28918,-1.67709 6.53427,-6.91119 5.64404,-5.63225 6.55229,-6.56819 7.37161,-6.53862 z m 173.10691,0.0299 c 0.8308,-0.0296 1.75148,0.90637 7.47441,6.53863 5.31837,5.23409 6.50533,6.47189 6.62584,6.91119 0.31768,1.158 0.36714,1.09822 -6.55419,7.91488 -3.52331,3.47002 -6.56894,6.37495 -6.7679,6.45576 -0.4624,0.1878 -1.54433,0.0704 -1.98682,-0.21556 -0.88446,-0.57153 -1.19856,-2.07052 -0.6224,-2.9712 0.15655,-0.24473 2.10955,-2.20048 4.3406,-4.34558 2.23104,-2.14511 4.05712,-3.95874 4.05712,-4.03096 0,-0.079 -5.55131,-0.1747 -13.94263,-0.13146 l -18.98226,0.0978 c 0.123,2.61305 0.13831,5.583 0.13831,8.45505 l 0,6.40343 0.82675,-0.48658 c 0.4547,-0.26767 1.50758,-0.48658 2.34008,-0.48658 1.71384,0 3.01422,0.7907 3.97862,2.41982 l 0.57381,0.96942 0.8336,-0.57629 c 1.01571,-0.70219 3.48018,-0.77272 4.56053,-0.13022 1.18184,0.70287 2.21377,2.13665 2.5924,3.6017 l 0.3464,1.34012 0.78687,-0.46291 c 1.00134,-0.58946 3.13937,-0.59633 4.12006,-0.0131 1.1357,0.67543 2.27499,2.17454 2.58367,3.39983 0.44635,1.77171 0.34434,17.3889 -0.13582,20.24575 -0.62479,3.71738 -2.07196,6.82771 -4.44838,9.55967 -2.25544,2.59288 -3.7986,3.72167 -6.61152,4.83528 -2.18235,0.86397 -6.04289,1.22032 -8.26315,0.7632 -6.17697,-1.27174 -10.51549,-5.13934 -14.31582,-12.76138 -0.74355,-1.49127 -3.22507,-7.57504 -5.51376,-11.55022 -4.7551,-8.25902 -5.83087,-10.6633 -5.83087,-13.03239 0,-2.75183 1.30306,-4.14248 3.88081,-4.14248 1.58707,0 3.85333,1.1984 5.92682,3.13443 0.69352,0.64754 1.48162,1.37314 1.75132,1.61238 0.4646,0.41211 0.49031,-0.0616 0.49031,-9.0139 l 0,-14.30336 -0.0822,-0.0554 c -0.77852,-0.52256 -1.06724,-1.01494 -1.06724,-1.81985 0,-0.79424 0.28318,-1.2838 1.03858,-1.79867 l 0,-0.79436 0.043,0 0.34703,-0.95384 c 0.5338,-1.46706 2.28421,-3.0909 3.60543,-3.34501 0.26676,-0.0513 0.53854,-0.0745 0.81118,-0.0704 1.18144,0.0179 2.37845,0.54337 3.24533,1.45725 0.50065,0.5278 0.84168,1.72095 1.07658,3.32008 l 19.35358,-0.0997 c 8.39143,0 13.94263,-0.0524 13.94263,-0.13146 0,-0.0722 -1.82608,-1.88647 -4.05712,-4.03158 -2.23105,-2.1451 -4.18405,-4.10023 -4.3406,-4.34496 -0.31974,-0.49983 -0.38308,-1.59618 -0.12149,-2.09709 0.30226,-0.57879 0.75534,-0.95676 1.33327,-1.11023 0.24005,-0.0638 0.42756,-0.12214 0.61928,-0.12897 z m -142.24548,8.8164 c -0.45049,0 -0.90064,0.1573 -1.43669,0.47287 -1.59452,0.9391 -1.6454,8.499 -1.6454,22.42446 l 0,12.66606 -2.17186,-2.37993 c -4.87363,-5.34041 -7.9837,-7.02086 -9.37525,-5.06456 -1.03763,1.45876 -0.20157,3.59037 5.00537,12.7564 1.84378,3.2457 4.35344,9.37237 5.5773,11.64554 3.74805,6.96157 7.36224,10.56608 11.83121,11.79943 2.1657,0.59771 5.47294,0.6007 7.47565,0.007 3.79285,-1.12463 7.77572,-4.70596 9.6014,-8.6326 1.52136,-3.27211 1.74919,-6.69634 1.75381,-15.55253 0.005,-8.89031 -0.10016,-9.47625 -1.8591,-10.31289 -1.87271,-0.89075 -4.02036,0.68791 -4.02036,2.95499 0,1.01413 -0.0547,1.07347 -0.98127,1.07347 l -0.98063,0 -10e-4,-3.11013 c -9.6e-4,-2.51983 -0.10467,-3.30353 -0.54702,-4.1294 -0.71813,-1.34077 -2.37952,-1.96886 -3.52257,-1.33139 -1.38591,0.77291 -1.92701,1.96164 -1.94133,4.26646 l -0.0125,2.06781 -0.91086,0.002 -0.91023,0.001 -6.4e-4,-2.95064 c -6.4e-4,-3.73098 -0.47069,-4.98273 -2.11267,-5.62901 -1,-0.39359 -1.24508,-0.38421 -2.10395,0.0798 -1.608,0.86865 -1.78757,1.4682 -1.90022,6.34673 l -0.10155,4.38608 -0.81305,0 -0.81429,0 0,-11.81251 c 0,-8.9208 -0.0298,-15.31759 -0.5601,-18.75486 -0.01,-0.0486 -0.018,-0.10927 -0.028,-0.15575 l 6.4e-4,0 c -0.24096,-1.47306 -0.57911,-2.37908 -1.05789,-2.66094 -0.53606,-0.31556 -0.9862,-0.47287 -1.43669,-0.47287 z m 111.26193,0.51274 c -0.45049,0 -0.90064,0.15731 -1.43669,0.47288 -1.59452,0.9391 -1.64541,8.49962 -1.64541,22.42509 l 0,12.66605 -2.17185,-2.37995 c -4.87364,-5.34041 -7.98371,-7.02086 -9.37525,-5.06455 -1.03764,1.45876 -0.20157,3.59037 5.00536,12.75639 1.84379,3.2457 4.35344,9.37237 5.5773,11.64555 3.74805,6.96156 7.36224,10.56607 11.83121,11.79943 2.1657,0.59771 5.47293,0.6007 7.47565,0.007 3.79285,-1.12463 7.77573,-4.70596 9.60141,-8.63261 1.52135,-3.2721 1.74918,-6.69633 1.75381,-15.55252 0.005,-8.89031 -0.10016,-9.47626 -1.8591,-10.31289 -1.87272,-0.89076 -4.02037,0.68791 -4.02037,2.95499 0,1.01413 -0.0547,1.07347 -0.98126,1.07347 l -0.98064,0 -0.001,-3.11013 c -9.6e-4,-2.51984 -0.10467,-3.30353 -0.54702,-4.1294 -0.71813,-1.34077 -2.37952,-1.96886 -3.52257,-1.3314 -1.38591,0.77291 -1.92702,1.96164 -1.94134,4.26646 l -0.0125,2.06782 -0.91086,0.002 -0.91024,10e-4 -6.4e-4,-2.95064 c -6.4e-4,-3.73099 -0.47069,-4.98274 -2.11267,-5.62901 -1,-0.3936 -1.24508,-0.38422 -2.10395,0.0797 -1.608,0.86865 -1.78757,1.46821 -1.90022,6.34674 l -0.10155,4.38608 -0.81304,0 -0.81429,0 0,-11.81251 c 0,-6.4032 -0.0164,-11.49957 -0.22118,-15.14133 l -0.033,0 c -0.0239,-0.63398 -0.0494,-1.06687 -0.0741,-1.56379 -0.23389,-2.80161 -0.63298,-4.46434 -1.31707,-4.86705 -0.53606,-0.31557 -0.98619,-0.47288 -1.43669,-0.47288 z m -14.05851,86.39521 38.15766,0 c 3.52321,0 6.35982,2.84537 6.35982,6.37976 l 0,41.4684 c 0,3.53439 -2.83661,6.37976 -6.35982,6.37976 l -38.15766,0 c -3.52322,0 -6.3592,-2.84537 -6.3592,-6.37976 l 0,-41.4684 c 0,-3.53439 2.83598,-6.37976 6.3592,-6.37976 z m -119.66277,0.85666 38.33086,0 c 3.53921,0 6.38848,2.84537 6.38848,6.37976 l 0,41.4684 c 0,3.53439 -2.84927,6.37976 -6.38848,6.37976 l -38.33086,0 c -3.53919,0 -6.38847,-2.84537 -6.38847,-6.37976 l 0,-41.4684 c 0,-3.53439 2.84928,-6.37976 6.38847,-6.37976 z m 134.0926,2.40861 c -0.49899,0.0101 -0.94068,0.19773 -1.27969,0.56197 -0.49171,0.52829 -0.56187,1.19584 -0.69093,6.56728 -0.18863,7.85066 0.43203,7.20516 -7.11928,7.39154 -6.34893,0.15669 -6.63276,0.2372 -7.76786,2.20364 -0.59449,1.02988 -0.62862,1.42947 -0.62862,7.285 0,6.9799 0.12304,7.558 1.88589,8.86811 l 1.08468,0.80619 5.54677,0.0916 5.54677,0.091 0.72583,0.83983 c 0.72136,0.83467 0.72582,0.87003 0.72582,6.28692 0,5.73241 0.21911,6.88771 1.3613,7.18969 0.74932,0.19809 1.86708,-0.0712 2.49895,-0.60246 4.34785,-3.65512 23.17117,-20.81829 23.64933,-21.56345 0.71462,-1.11365 0.80589,-2.02048 0.33456,-3.33691 -0.21567,-0.60238 -3.02289,-3.3072 -8.97153,-8.64444 -4.76155,-4.27212 -9.95387,-8.94594 -11.53839,-10.38642 -1.58452,-1.44047 -3.26965,-2.85634 -3.74374,-3.14626 -0.5656,-0.34588 -1.12087,-0.51289 -1.61986,-0.50278 z m -110.25699,0.85666 c -0.50125,-0.0101 -1.05917,0.1569 -1.62734,0.50277 -0.47623,0.28992 -2.16885,1.70579 -3.76056,3.14627 -1.59171,1.44048 -6.80755,6.11429 -11.59072,10.38642 -5.97565,5.33721 -8.79538,8.04206 -9.01203,8.64444 -0.47347,1.31643 -0.38205,2.22326 0.33582,3.33691 0.48032,0.74515 19.38888,17.90832 23.75648,21.56344 0.63474,0.53121 1.75806,0.80056 2.51078,0.60247 1.14738,-0.30199 1.36754,-1.45729 1.36754,-7.18969 0,-5.41689 0.004,-5.45226 0.72893,-6.28692 l 0.72894,-0.83984 5.57232,-0.091 5.57169,-0.0916 1.08967,-0.80619 c 1.77085,-1.31012 1.89461,-1.88821 1.89461,-8.86811 0,-5.85553 -0.0346,-6.25513 -0.63174,-7.28501 -1.14025,-1.96642 -1.42561,-2.04693 -7.80336,-2.20363 -7.5856,-0.18637 -6.96158,0.45911 -7.15106,-7.39155 -0.12965,-5.37143 -0.2001,-6.03899 -0.69405,-6.56728 -0.34055,-0.36423 -0.78467,-0.55185 -1.28592,-0.56196 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"none"}]},{"name":"text","x":"819.57465","y":"280.07275","style":[],"text":"Navigation"}]},{"id":1,"els":[{"name":"text","x":"598.32111","y":"88.024689","style":[{"key":"font-style","val":"italic"}],"text":"Grandson"},{"name":"text","x":"646.67023","y":"149.46843","style":[{"key":"font-style","val":"italic"}],"text":"Yvonand"},{"name":"text","x":"559.03741","y":"164.57756","style":[{"key":"font-style","val":"italic"}],"text":"Orbe"},{"name":"text","x":"582.70837","y":"218.9704","style":[{"key":"font-style","val":"italic"}],"text":"Echallens"},{"name":"path","d":"m 518.74643,285.4505 c 128.90864,-53.40895 179.36598,10.50928 264.91322,21.15277","style":[{"key":"fill","val":"none"},{"key":"stroke","val":"none"}]},{"name":"rect","x":"20.145493","y":"78.959213","width":"64.465576","height":"39.28371","style":[{"key":"fill","val":"#b8d1d9"}]},{"name":"rect","x":"19.517107","y":"130.10361","width":"64.465576","height":"39.28371","style":[{"key":"fill","val":"#bfe3cb"}]},{"name":"text","x":"99.9646","y":"94.262123","style":[],"text":"Les anciennes propriétés des ducs de Bourgogne"},{"name":"text","x":"99.9646","y":"113.01212","style":[],"text":"sont des baillages communs des deux villes."},{"name":"text","x":"99.547371","y":"146.10098","style":[],"text":"Le reste, appartenant jadis aux ducs de Savoie, "},{"name":"text","x":"99.547371","y":"164.85098","style":[],"text":"est sujet de la seule ville de Berne."},{"name":"text","x":"20","y":"41.367523","style":[],"text":"Au nord du lac, le pays de Vaud est, depuis le 15e siècle et les "},{"name":"text","x":"20","y":"60.117523","style":[],"text":"guerres de Bourgogne, sujet des villes de Berne et de Fribourg"}]},{"id":2,"els":[{"name":"text","x":"14.392527","y":"39.331783","style":[],"text":"Fribourg et Berne font parti de la Confédération hélvétique aux côtés de"},{"name":"path","d":"m 551.21437,68.699396 -0.81338,7.72777 0.002,5.32914 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.6552 -1.29314,0.6552 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.3104 -0.96986,1.3104 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.6552 c 0,0 -0.64862,0.4247 -0.96986,0.6552 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06081 -0.80304,-7.72777 z","style":[{"key":"fill","val":"#6e9eab"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"path","d":"m 732.46083,254.18447 7.03347,-1.33547 1.06838,-2.31481 -0.62322,-2.13675 -1.69159,-1.6916 2.04772,-4.2735 2.93803,-4.00641 1.33547,-1.86966 -3.91738,-1.51354 -1.86966,0.089 -1.24644,-4.89673 0.44516,-2.22578 -0.62322,-1.15741 -1.60256,-1.69159 0,-1.24644 15.40242,-6.2322 3.65028,-1.69159 3.02707,-6.58832 0.89031,-3.56125 -15.49145,1.78062 -6.41026,-3.02706","style":[{"key":"fill","val":"none"},{"key":"stroke","val":"#ffffff"},{"key":"stroke-width","val":"1"},{"key":"stroke-dasharray","val":"2,1"}]},{"name":"path","d":"m 759.25926,205.30627 6.41026,0 1.95869,3.20513 1.60256,4.2735 13.3547,2.49288 3.91738,-0.17807 2.31482,4.62963 13.88888,-4.2735 4.27351,2.849 8.01282,-0.17806 3.73932,4.98576 3.38319,4.09544 18.34045,-6.58832 4.13996,6.36574 -8.14637,6.23219 -9.6599,4.00641 0.48967,6.00962","style":[{"key":"fill","val":"none"},{"key":"stroke","val":"#ffffff"},{"key":"stroke-width","val":"1"},{"key":"stroke-dasharray","val":"2, 1"}]},{"name":"path","d":"m 840.27778,220.44159 4.98575,-2.13675 1.42451,-5.51994 -5.69801,-4.09544 -1.60256,-2.13675 0.53418,-0.89032 -8.36894,-7.65669 -0.71225,-0.53419 1.4245,-3.56125 8.19088,-2.31482 5.69801,-6.23219 -0.17806,-4.27351 5.698,-15.13532","style":[{"key":"fill","val":"none"},{"key":"stroke","val":"#ffffff"},{"key":"stroke-width","val":"1"},{"key":"stroke-dasharray","val":"2, 1"}]},{"name":"path","d":"m 731.48148,177.88461 4.8077,-1.60256 4.2735,0 3.38319,6.41026 12.64245,-1.06838 4.2735,2.13675 11.39602,-2.13675 12.28632,-7.83476 0.71225,-2.49287 3.91738,-3.02707 -3.91738,-1.95869","style":[{"key":"fill","val":"none"},{"key":"stroke","val":"#ffffff"},{"key":"stroke-width","val":"1"},{"key":"stroke-dasharray","val":"2, 1"}]},{"name":"text","x":"899.75806","y":"135.96295","style":[{"key":"font-style","val":"italic"}],"text":"Appenzell"},{"name":"text","x":"736.06049","y":"171.4617","style":[{"key":"font-style","val":"italic"}],"text":"Zug"},{"name":"text","x":"770.12103","y":"199.25215","style":[{"key":"font-style","val":"italic"}],"text":"Schwytz"},{"name":"text","x":"853.66528","y":"213.93401","style":[{"key":"font-style","val":"italic"}],"text":"Glaris"},{"name":"text","x":"761.39606","y":"259.61539","style":[{"key":"font-style","val":"italic"}],"text":"Uri"},{"name":"text","x":"661.50281","y":"237.5356","style":[{"key":"font-style","val":"italic"}],"text":"Unterwald"},{"name":"text","x":"742.86505","y":"65.361","style":[{"key":"font-style","val":"italic"}],"text":"Schaffhouse"},{"name":"text","x":"766.03235","y":"140.15115","style":[{"key":"font-style","val":"italic"}],"text":"Zürich"},{"name":"text","x":"631.41022","y":"202.27919","style":[{"key":"font-style","val":"italic"}],"text":"Lucerne"},{"name":"text","x":"534.61096","y":"100.11198","style":[{"key":"font-style","val":"italic"}],"text":"Bâle"},{"name":"text","x":"524.53827","y":"153.24571","style":[{"key":"font-style","val":"italic"}],"text":"Soleure"},{"name":"text","x":"534.09637","y":"238.78204","style":[{"key":"font-style","val":"italic"}],"text":"Berne"},{"name":"text","x":"408.44986","y":"285.95416","style":[{"key":"font-style","val":"italic"}],"text":"Fribourg"},{"name":"text","x":"80","y":"70","style":[],"text":"six vallées alpines"},{"name":"path","d":"m 41.958813,89.797812 -0.81338,7.727765 0.002,5.329153 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.275993 -1.29314,-0.65521 -1.29314,0.65521 0,3.275993 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.310413 -0.96986,1.310413 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.310403 -0.96985,-0.65521 c 0,0 -0.64862,0.4247 -0.96986,0.65521 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06082 -0.80304,-7.727765 z","style":[{"key":"fill","val":"#6e9eab"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"text","x":"80.825409","y":"104.28091","style":[],"text":"et de cinq autres villes"},{"name":"text","x":"14.294581","y":"154.61586","style":[],"text":"Pays sujets des confédérés:"},{"name":"rect","x":"14.900151","y":"49.795124","width":"50.332283","height":"30.125051","style":[{"key":"fill","val":"#6e9eab"}]},{"name":"rect","x":"15.258801","y":"165.19693","width":"49.921196","height":"29.567089","style":[{"key":"fill","val":"#bfe3cb"}]},{"name":"rect","x":"15.020759","y":"200.31549","width":"49.921196","height":"29.567089","style":[{"key":"fill","val":"#b8d1d9"}]},{"name":"text","x":"79.316238","y":"185.52634","style":[],"text":"Baillages de la ville de Berne"},{"name":"text","x":"79.211929","y":"220.06955","style":[],"text":"Baillages des autres confédérés"},{"name":"path","d":"m 551.62378,123.35205 -0.81338,7.72777 0.002,5.32914 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.6552 -1.29314,0.6552 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.3104 -0.96986,1.3104 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.6552 c 0,0 -0.64862,0.4247 -0.96986,0.6552 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06081 -0.80304,-7.72777 z","style":[{"key":"fill","val":"#6e9eab"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"path","d":"m 661.41671,174.72305 -0.81338,7.72777 0.002,5.32914 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.6552 -1.29314,0.6552 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.3104 -0.96986,1.3104 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.6552 c 0,0 -0.64862,0.4247 -0.96986,0.6552 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06081 -0.80304,-7.72777 z","style":[{"key":"fill","val":"#6e9eab"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"path","d":"m 554.64561,209.97766 -0.81338,7.72777 0.002,5.32914 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.6552 -1.29314,0.6552 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.3104 -0.96986,1.3104 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.6552 c 0,0 -0.64862,0.4247 -0.96986,0.6552 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06081 -0.80304,-7.72777 z","style":[{"key":"fill","val":"#6e9eab"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"path","d":"m 440.31994,254.29775 -0.81338,7.72777 0.002,5.32914 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.6552 -1.29314,0.6552 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.3104 -0.96986,1.3104 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.6552 c 0,0 -0.64862,0.4247 -0.96986,0.6552 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06081 -0.80304,-7.72777 z","style":[{"key":"fill","val":"#6e9eab"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"path","d":"m 792.86605,110.76111 -0.81338,7.72777 0.002,5.32914 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.6552 -1.29314,0.6552 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.3104 -0.96986,1.3104 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.6552 c 0,0 -0.64862,0.4247 -0.96986,0.6552 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06081 -0.80304,-7.72777 z","style":[{"key":"fill","val":"#6e9eab"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"path","d":"m 786.31877,37.230067 -0.81338,7.72777 0.002,5.32914 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.6552 -1.29314,0.6552 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.3104 -0.96986,1.3104 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.6552 c 0,0 -0.64862,0.4247 -0.96986,0.6552 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06081 -0.80304,-7.72777 z","style":[{"key":"fill","val":"#6e9eab"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]}]},{"id":3,"els":[{"name":"text","x":"19.766188","y":"40.564739","style":[],"text":"Quelques villes et pays allentours, sans sièger à la diète fédérale, sont alliés militairement à la confédération. "},{"name":"text","x":"19.766188","y":"59.314739","style":[],"text":"Deux d'entre eux sur les rives du Léman."},{"name":"path","d":"m 277.68161,127.00424 -0.81338,7.72777 0.002,5.32914 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.6552 -1.29314,0.6552 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.3104 -0.96986,1.3104 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.6552 c 0,0 -0.64862,0.4247 -0.96986,0.6552 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06081 -0.80304,-7.72777 z","style":[{"key":"fill","val":"#e7bd92"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"path","d":"m 329.1346,71.989995 -0.81338,7.72777 0.002,5.32914 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.6552 -1.29314,0.6552 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.3104 -0.96986,1.3104 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.6552 c 0,0 -0.64862,0.4247 -0.96986,0.6552 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06081 -0.80304,-7.72777 z","style":[{"key":"fill","val":"#e7bd92"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"text","x":"281.73624","y":"159.64388","style":[{"key":"font-style","val":"italic"},{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"}],"text":"Principauté épiscopale"},{"name":"text","x":"281.73624","y":"178.39388","style":[{"key":"font-style","val":"italic"},{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"}],"text":"de Bâle (Porrentruy)"},{"name":"text","x":"296.79486","y":"103.58974","style":[{"key":"font-style","val":"italic"}],"text":"Mulhouse"},{"name":"text","x":"203.67184","y":"215.64633","style":[{"key":"font-style","val":"italic"},{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"}],"text":"Principauté de"},{"name":"text","x":"203.67184","y":"234.39633","style":[{"key":"font-style","val":"italic"},{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"}],"text":"Neuchâtel"},{"name":"path","d":"m 102.75284,363.00139 -0.81338,7.72777 0.002,5.32914 -0.96469,-1.3099 -0.96984,1.3104 -0.646575,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.6552 -1.29314,0.6552 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.547815,0 0,-3.27601 0,-1.31039 -0.96985,-1.3104 -0.96986,1.3104 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.6552 c 0,0 -0.64862,0.4247 -0.96986,0.6552 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06081 -0.80304,-7.72777 z","style":[{"key":"fill","val":"#e7bd92"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"text","x":"75.313393","y":"395.01425","style":[{"key":"font-style","val":"italic"}],"text":"Genève"},{"name":"text","x":"405.73163","y":"367.50711","style":[{"key":"font-style","val":"italic"},{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"}],"text":"République des"},{"name":"text","x":"405.73163","y":"386.25711","style":[{"key":"font-style","val":"italic"},{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"}],"text":"sept dizains"},{"name":"path","d":"m 714.17734,124.92447 -0.81338,7.72777 0.002,5.32914 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.6552 -1.29314,0.6552 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.3104 -0.96986,1.3104 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.6552 c 0,0 -0.64862,0.4247 -0.96986,0.6552 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06081 -0.80304,-7.72777 z","style":[{"key":"fill","val":"#e7bd92"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"text","x":"679.63678","y":"120.74075","style":[{"key":"font-style","val":"italic"}],"text":"Saint-Gall"},{"name":"text","x":"683.53278","y":"294.92877","style":[{"key":"font-style","val":"italic"}],"text":"Ligues grisonnes"},{"name":"rect","x":"20.056816","y":"70.259598","width":"50.332283","height":"30.125051","style":[{"key":"fill","val":"#e7bd92"}]},{"name":"rect","x":"19.591572","y":"104.90626","width":"50.332283","height":"30.125051","style":[{"key":"fill","val":"#ffdfbe"}]},{"name":"path","d":"m 86.969359,78.086861 -0.81338,7.72777 0.002,5.32914 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.6552 -1.29314,0.6552 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.3104 -0.96986,1.3104 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.6552 c 0,0 -0.64862,0.4247 -0.96986,0.6552 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06081 -0.80304,-7.72777 z","style":[{"key":"fill","val":"#e7bd92"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"text","x":"104.67236","y":"90.384613","style":[],"text":"Alliés"},{"name":"text","x":"78.247864","y":"124.28775","style":[],"text":"Baillages des alliés"}]},{"id":4,"els":[{"name":"text","x":"21.941803","y":"45.825409","style":[],"text":"À l'est du lac, la basse vallée du Rhône est un baillage de la républque des Sept Dizains."},{"name":"text","x":"21.941803","y":"64.575409","style":[],"text":"Alliée de Berne lors des guerre de Bourgogne, la république occupe le chablais savoyard."},{"name":"text","x":"21.941803","y":"83.325409","style":[],"text":"En se retirant elle garde l'accès au lac et fait du Bas Valais un pays sujet."},{"name":"text","x":"738.44427","y":"225.25461","style":[{"key":"font-style","val":"italic"}],"text":"Brigue"},{"name":"text","x":"381.49414","y":"325.67993","style":[{"key":"font-style","val":"italic"}],"text":"BAS-VALAIS "},{"name":"text","x":"790.59875","y":"191.51091","style":[{"key":"font-style","val":"italic"}],"text":"Conches"},{"name":"text","x":"636.47449","y":"291.15836","style":[{"key":"font-style","val":"italic"}],"text":"Loèche"},{"name":"text","x":"648.1925","y":"240.14549","style":[{"key":"font-style","val":"italic"}],"text":"Rarogne"},{"name":"text","x":"718.62335","y":"261.43817","style":[{"key":"font-style","val":"italic"}],"text":"Viège"},{"name":"text","x":"580.05042","y":"272.43988","style":[{"key":"font-style","val":"italic"}],"text":"Sierre"},{"name":"text","x":"553.29047","y":"302.22162","style":[{"key":"font-style","val":"italic"}],"text":"Sion"}]},{"id":5,"els":[{"name":"text","x":"500.58197","y":"301.00726","style":[{"key":"font-style","val":"italic"}],"text":"SAVOIE"},{"name":"text","x":"20.934528","y":"41.869057","style":[],"text":"Autrefois maîtresse du Lac Léman, la maison de Savoie n'en contrôle, depuis les guerres de Bourgogne,plus que la rive sud. "},{"name":"text","x":"20.934528","y":"60.619057","style":[],"text":"Mais depuis le 16e siècle, son influence s'étends jusqu'à la mer, et au delà."}]},{"id":6,"els":[{"name":"rect","x":"10","y":"20","width":"480","height":"90","style":[{"key":"fill","val":"#ffffff"}]},{"name":"text","x":"587.77283","y":"151.33183","style":[{"key":"font-style","val":"italic"}],"text":"Nice"},{"name":"text","x":"590.43091","y":"80.900948","style":[{"key":"font-style","val":"italic"}],"text":"Piémont"},{"name":"text","x":"532.16522","y":"43.917377","style":[{"key":"font-style","val":"italic"}],"text":"Savoie"},{"name":"text","x":"640.64911","y":"297.94907","style":[{"key":"font-style","val":"italic"}],"text":"Sardaigne"},{"name":"text","x":"882.02277","y":"407.47864","style":[{"key":"font-style","val":"italic"}],"text":"Sicile"},{"name":"text","x":"22.070036","y":"43.633011","style":[],"text":"Ayant hérité de la couronne de Sicile en 1713, échangée contre celle "},{"name":"text","x":"22.070036","y":"62.383011","style":[],"text":"de Sardaigne en 1716, les ducs sont devenus rois méditérranéens. "},{"name":"text","x":"22.070036","y":"81.133011","style":[],"text":"La partie continentale du Royaume de Sardaigne va du duché de "},{"name":"text","x":"22.070036","y":"99.883011","style":[],"text":"Nice au Lac Léman en passant par le Piémont."}]},{"id":7,"els":[{"name":"path","d":"m 215.5577,353.66156 -9.14054,9.08697 -0.40152,0 0,-2.39644 0.80023,0 -1.60045,-4.19335 -1.60045,4.19335 0.80022,0 0,2.39644 -0.0572,0 0,16.77341 22.52071,0 0,-16.77341 -0.0572,0 0,-2.39644 0.80022,0 -1.60045,-2.79557 -1.60045,2.79557 0.80023,0 0,2.39644 -0.40652,0 -9.25683,-9.08697 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"none"}]},{"name":"path","d":"m 785.64162,274.23236 -9.14054,9.08697 -0.40152,0 0,-2.39644 0.80023,0 -1.60045,-4.19335 -1.60045,4.19335 0.80022,0 0,2.39644 -0.0572,0 0,16.77341 22.52071,0 0,-16.77341 -0.0572,0 0,-2.39644 0.80022,0 -1.60045,-2.79557 -1.60045,2.79557 0.80023,0 0,2.39644 -0.40652,0 -9.25683,-9.08697 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"none"}]},{"name":"text","x":"466.76639","y":"401.4245","style":[{"key":"font-style","val":"italic"}],"text":"GENÈVE"},{"name":"text","x":"190.14549","y":"401.9418","style":[{"key":"font-style","val":"italic"}],"text":"Peney"},{"name":"text","x":"753.02185","y":"328.91998","style":[{"key":"font-style","val":"italic"}],"text":"Jussy"},{"name":"path","d":"m 505.03342,339.04727 -2.12288,18.69297 0.005,12.8909 -2.51778,-3.16857 -2.53122,3.16978 -1.68751,-1.58489 -1.68751,1.58489 0,-7.92441 -3.37501,-1.58494 -3.37502,1.58494 0,7.92441 -1.68751,-1.58489 -1.68751,1.58489 0,4.75469 37.9689,0 0,-7.92447 0,-3.16975 -2.53125,-3.16982 -2.53128,3.16982 0,3.16975 -1.68751,-1.58486 -1.68748,1.58486 -1.68753,-1.58486 0,-3.16977 -2.53125,-1.58494 c 0,0 -1.69286,1.02732 -2.53128,1.58494 -0.005,0.005 -0.013,0.0121 -0.0209,0.0169 l 0,-4.98502 -2.09588,-18.69296 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"1.25631177"}]},{"name":"text","x":"509.8345","y":"258.09717","style":[{"key":"font-style","val":"italic"}],"text":"Genthod"},{"name":"text","x":"601.03986","y":"70.71225","style":[{"key":"font-style","val":"italic"}],"text":"Céligny"},{"name":"text","x":"20.19943","y":"42.905983","style":[],"text":"La ville de Genève est depuis le 16e siècle alliée militairement "},{"name":"text","x":"20.19943","y":"61.655983","style":[],"text":"à la Confédération hélvétique, se plaçant ainsi sous la protection"},{"name":"text","x":"20.19943","y":"80.405983","style":[],"text":"de sa coréligionnaire bernoise face à ses voisins catholiques."},{"name":"text","x":"20.19943","y":"117.90598","style":[],"text":"La ville possède deux \"mandements\", les châteaux de Jussy et de "},{"name":"text","x":"20.19943","y":"136.65598","style":[],"text":"Peney, ainsi que les villages de Genthod et de Céligny rattachés "},{"name":"text","x":"20.19943","y":"155.40598","style":[],"text":"au second."}]},{"id":8,"els":[{"name":"rect","x":"10","y":"20","width":"469.25925","height":"70","style":[{"key":"fill","val":"#ffffff"}]},{"name":"text","x":"21.054129","y":"45.156696","style":[],"text":"À l'aube de la révolution, seule une petite partie des rives du Léman "},{"name":"text","x":"21.054129","y":"63.906696","style":[],"text":"appartient au Royaume de France: le pays de Gex avec le port de "},{"name":"text","x":"21.054129","y":"82.6567","style":[],"text":"Versoix."},{"name":"text","x":"331.11111","y":"297.03705","style":[{"key":"font-style","val":"italic"}],"text":"PAYS DE GEX"},{"name":"text","x":"597.70007","y":"309.49637","style":[{"key":"font-style","val":"italic"}],"text":"Versoix"}]},{"id":9,"els":[{"name":"text","x":"23.670954","y":"316.17239","style":[{"key":"font-style","val":"italic"}],"text":"Royaume de France"},{"name":"text","x":"346.30673","y":"133.35205","style":[{"key":"font-style","val":"italic"},{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"}],"text":"Baillage de la "},{"name":"text","x":"344.22665","y":"152.10205","style":[{"key":"font-style","val":"italic"},{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"}],"text":"ville de Berne"},{"name":"text","x":"593.48572","y":"77.635323","style":[{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"},{"key":"font-style","val":"italic"}],"text":"Baillages communs des villes "},{"name":"text","x":"591.40564","y":"96.385323","style":[{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"},{"key":"font-style","val":"italic"}],"text":"de Berne et de Fribourg"},{"name":"text","x":"893.98181","y":"93.06105","style":[{"key":"font-style","val":"italic"},{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"}],"text":"Baillage de la ville "},{"name":"text","x":"891.90173","y":"111.81105","style":[{"key":"font-style","val":"italic"},{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"}],"text":"de Fribourg"},{"name":"text","x":"501.88574","y":"403.30164","style":[{"key":"font-style","val":"italic"},{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"}],"text":"Royaume de Sardaigne"},{"name":"text","x":"807.48285","y":"437.3219","style":[{"key":"font-style","val":"italic"},{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"}],"text":"Baillage de la république"},{"name":"text","x":"807.48285","y":"456.0719","style":[{"key":"font-style","val":"italic"},{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"}],"text":"des sept dizains"},{"name":"text","x":"161.16394","y":"423.19531","style":[{"key":"font-style","val":"italic"}],"text":"Genève"}]},{"id":10,"els":[{"name":"rect","x":"10","y":"20","width":"350","height":"110","style":[{"key":"fill","val":"#ffffff"}]},{"name":"text","x":"98.277596","y":"222.45837","style":[{"key":"font-style","val":"italic"}],"text":"RÉPUBLIQUE FRANCAISE"},{"name":"text","x":"503.41058","y":"279.88721","style":[{"key":"font-style","val":"italic"}],"text":"Département du Mont Blanc"},{"name":"text","x":"20.71629","y":"42.803585","style":[],"text":"En juillet 1792, le royaume de Sardaigne s'allie à "},{"name":"text","x":"20.71629","y":"61.553585","style":[],"text":"l'Autriche contre la France révolutionnaire. "},{"name":"text","x":"20.71629","y":"80.303581","style":[],"text":"La Savoie est envahie (ou libérée) deux mois plus "},{"name":"text","x":"20.71629","y":"99.053581","style":[],"text":"tard par les troupes révolutionnaires et devient le "},{"name":"text","x":"20.71629","y":"117.80358","style":[],"text":"27 novembre le départment du Mont-Blanc."},{"name":"path","d":"m 582.00602,201.6809 -3.32125,3.45428 -0.80255,0.18575 c -0.20987,0.17582 -0.53833,0.21602 -0.29202,0.91321 l 0.01,0.0296 -0.15939,0.16538 0,1.6802 -7.74305,10.40916 -1.53399,1.89911 c -1.44723,-0.72364 -1.39683,-2.69493 -2.08167,-4.05389 -0.10602,-1.64282 -0.73,-2.87565 -2.48355,-3.21418 l -0.36552,-0.47498 0.58443,-0.29202 0.14621,-1.38778 0.73025,-0.36552 -0.69389,-0.87645 0.80374,-0.14621 -0.87685,-0.767 0.40187,-4.41941 c -0.33476,-0.70333 -0.76977,-0.65277 -1.24157,-0.32837 l -4.41941,1.02266 c -0.20986,0.17583 -0.53873,0.21563 -0.29241,0.91281 l 1.16886,3.5062 0.54769,2.26464 -0.14581,0.9132 -2.5203,0.8401 c -1.26156,1.14426 -2.7734,2.02338 -2.92177,4.3463 0.15295,1.95277 -0.44998,3.86576 0.87645,5.8803 0.36714,0.57262 0.72783,1.15069 1.49764,1.38779 l -0.18256,0.62077 -1.49764,1.24198 c -0.26013,1.15659 0.0137,2.31289 0.36512,3.46946 0.36524,0.59124 0.73053,0.42305 1.09576,0.51133 0.54959,-0.096 0.68964,-0.51964 0.91321,-0.87646 l 0.36512,8.03508 -0.43823,1.57074 c 0.22586,2.08173 -0.80791,1.32944 1.13212,7.26807 -0.0346,0.72737 -0.60021,1.6963 0.0368,2.11842 0.60727,0.27239 0.77805,0.69025 0.98591,1.09578 l 1.78965,0.54767 c 1.72696,0.46151 1.30256,-0.39145 0.58444,-1.42413 l -1.27833,-1.89951 -0.40187,-1.7529 0.36552,-6.86661 c 0.78884,-2.32535 1.21958,-4.65073 1.7529,-6.97606 0.89584,1.21903 1.28869,2.43819 2.68768,3.65722 l 0.12464,3.06317 c -0.55093,0.61965 -0.73043,1.68506 -0.94956,2.70287 -0.0852,2.06966 0.65031,3.16943 -0.25566,6.20906 l -0.18256,1.38777 c 0.25771,0.81966 0.75015,0.7004 1.20522,0.73065 1.28043,-0.35032 1.83403,-0.0298 2.22788,0.43823 0.92526,0.33858 1.8507,0.1631 2.77596,0.0364 0.49459,-0.3409 0.85189,-0.68177 -0.54808,-1.02266 l -2.15478,-1.24157 c -1.03675,-0.48405 -0.98465,-1.25861 -1.02266,-2.00898 l 1.20522,-6.90295 c 0.97014,-1.01047 0.71416,-2.02113 0.40188,-3.03162 0.34567,-2.89822 -1.02026,-5.55159 -2.04532,-8.25399 l 1.16887,-2.5934 c 0.75408,-0.43993 1.48876,-0.92336 1.97221,-1.97222 l 1.57034,-0.767 c 0.36537,-1.01047 0.28846,-2.02112 0.0368,-3.03161 l 7.70031,-10.63207 0.37431,1.12372 0.54808,2.26424 -0.14621,0.9132 -2.5203,0.8401 c -1.26156,1.14425 -2.7734,2.02337 -2.92177,4.3463 0.15295,1.95278 -0.44998,3.86577 0.87645,5.8803 0.36715,0.57263 0.72783,1.15068 1.49764,1.38777 l -0.18256,0.6208 -1.49764,1.24198 c -0.26013,1.15659 0.0141,2.31328 0.36552,3.46984 0.36524,0.59124 0.73013,0.42306 1.09537,0.51133 0.54958,-0.096 0.68963,-0.52002 0.9132,-0.87685 l 0.36512,8.03547 -0.43822,1.57034 c 0.22585,2.08172 -0.80752,1.32946 1.13251,7.26808 -0.0346,0.72738 -0.60061,1.69631 0.0363,2.11842 0.60727,0.2724 0.77845,0.69024 0.98631,1.09576 l 1.78966,0.54809 c 1.72695,0.4615 1.30215,-0.39185 0.58403,-1.42453 l -1.27832,-1.89912 -0.40148,-1.75329 0.36512,-6.86661 c 0.78884,-2.32534 1.21998,-4.65034 1.75331,-6.97566 0.89584,1.21903 1.28829,2.43777 2.68727,3.6568 l 0.12504,3.0632 c -0.55092,0.61965 -0.73082,1.68504 -0.94995,2.70285 -0.0852,2.06966 0.6503,3.16945 -0.25567,6.20908 l -0.18256,1.38777 c 0.25772,0.81966 0.75015,0.7004 1.20522,0.73065 1.28043,-0.35032 1.83443,-0.0298 2.22828,0.43823 0.92526,0.33858 1.8503,0.16309 2.77556,0.0363 0.49459,-0.34089 0.85229,-0.68176 -0.54768,-1.02266 l -2.15517,-1.24157 c -1.03676,-0.48404 -0.98466,-1.25861 -1.02266,-2.00897 l 1.20562,-6.90296 c 0.97013,-1.01047 0.71376,-2.02073 0.40147,-3.03122 0.34567,-2.89822 -1.02026,-5.55198 -2.04532,-8.25438 l 1.16887,-2.59341 c 0.75409,-0.43992 1.48876,-0.92336 1.97221,-1.97222 l 1.57075,-0.76699 c 0.36536,-1.01047 0.28805,-2.02074 0.0363,-3.03123 l 7.27566,-10.04603 0.17937,0.53729 0.54808,2.26424 -0.14621,0.9132 -2.52029,0.8401 c -1.26156,1.14425 -2.7734,2.02338 -2.92177,4.3463 0.15295,1.95278 -0.44999,3.86575 0.87645,5.88029 0.36714,0.57265 0.72783,1.15072 1.49763,1.38779 l -0.18256,0.62118 -1.49764,1.24157 c -0.26012,1.15657 0.0137,2.31328 0.36513,3.46987 0.36523,0.59122 0.73052,0.42305 1.09576,0.51133 0.54958,-0.096 0.68964,-0.51963 0.9132,-0.87646 l 0.36513,8.03508 -0.43823,1.57033 c 0.22585,2.08173 -0.80791,1.32987 1.13212,7.26848 -0.0346,0.7274 -0.60022,1.6959 0.0367,2.11803 0.60726,0.27237 0.77804,0.69025 0.98591,1.09576 l 1.78965,0.54808 c 1.72695,0.46151 1.30255,-0.39184 0.58444,-1.42454 l -1.27833,-1.8991 -0.40147,-1.75331 0.36512,-6.8662 c 0.78883,-2.32533 1.21958,-4.65073 1.7529,-6.97606 0.89584,1.21903 1.28869,2.43778 2.68768,3.65681 l 0.12464,3.06358 c -0.55093,0.61965 -0.73043,1.68467 -0.94956,2.70246 -0.0852,2.06968 0.65031,3.16941 -0.25566,6.20906 l -0.18257,1.38779 c 0.25772,0.81967 0.75015,0.70038 1.20523,0.73063 1.28042,-0.35032 1.83403,-0.0298 2.22788,0.43823 0.92526,0.33857 1.8507,0.16351 2.77596,0.0368 0.49458,-0.34088 0.85228,-0.68177 -0.54768,-1.02266 l -2.15518,-1.24198 c -1.03675,-0.48405 -0.98465,-1.25859 -1.02266,-2.00896 l 1.20522,-6.90295 c 0.97014,-1.01049 0.71416,-2.02076 0.40187,-3.03123 0.34567,-2.89823 -1.02025,-5.552 -2.04532,-8.2544 l 1.16887,-2.59299 c 0.75409,-0.43993 1.48877,-0.92375 1.97222,-1.97261 l 1.57034,-0.767 c 0.36537,-1.01049 0.28846,-2.02073 0.0367,-3.03122 l 7.936,-10.95805 0.34555,1.03624 0.54768,2.26424 -0.1458,0.9132 -2.5203,0.8401 c -1.26156,1.14426 -2.7734,2.02337 -2.92178,4.3463 0.15296,1.95276 -0.44997,3.86577 0.87646,5.8803 0.36714,0.57263 0.72783,1.15068 1.49764,1.38777 l -0.18296,0.6208 -1.49724,1.24198 c -0.26013,1.15659 0.0137,2.31328 0.36512,3.46984 0.36524,0.59124 0.73053,0.42306 1.09576,0.51133 0.54959,-0.096 0.68964,-0.52002 0.9132,-0.87685 l 0.36513,8.03547 -0.43823,1.57034 c 0.22585,2.08172 -0.80791,1.32946 1.13212,7.26808 -0.0346,0.7274 -0.60022,1.69631 0.0368,2.11842 0.60727,0.2724 0.77804,0.69024 0.98591,1.09576 l 1.78965,0.5477 c 1.72695,0.4615 1.30255,-0.39146 0.58444,-1.42414 l -1.27833,-1.89951 -0.40187,-1.7529 0.36552,-6.86661 c 0.78884,-2.32532 1.21958,-4.65073 1.7529,-6.97605 0.89584,1.21903 1.28869,2.43816 2.68768,3.65719 l 0.12464,3.0632 c -0.55093,0.61965 -0.73043,1.68504 -0.94956,2.70285 -0.0852,2.06966 0.65031,3.16945 -0.25566,6.20908 l -0.18256,1.38777 c 0.25771,0.81968 0.75015,0.7004 1.20522,0.73065 1.28043,-0.35032 1.83403,-0.0298 2.22788,0.43823 0.92526,0.33858 1.8507,0.16309 2.77596,0.0363 0.49458,-0.34089 0.85189,-0.68176 -0.54808,-1.02266 l -2.15478,-1.24157 c -1.03675,-0.48404 -0.98465,-1.25861 -1.02266,-2.00897 l 1.20522,-6.90296 c 0.97014,-1.01047 0.71416,-2.02073 0.40188,-3.03122 0.34566,-2.89822 -1.02027,-5.55198 -2.04532,-8.25438 l 1.16887,-2.59341 c 0.75408,-0.43992 1.48876,-0.92336 1.97221,-1.97222 l 1.57034,-0.76699 c 0.36537,-1.01047 0.28846,-2.02074 0.0368,-3.03123 l 7.96196,-10.99359 -0.8401,-0.51133 0,-0.8401 4.2001,-5.22316 -4.56522,4.74818 0,1.6802 -7.74305,10.40916 -1.53399,1.89911 c -1.44723,-0.72363 -1.39683,-2.69494 -2.08167,-4.05389 -0.10603,-1.64282 -0.7304,-2.87566 -2.48395,-3.21419 l -0.36512,-0.47497 0.58443,-0.29202 0.14621,-1.38778 0.73024,-0.36552 -0.69389,-0.87645 0.80375,-0.14621 -0.87685,-0.767 0.40187,-4.41901 c -0.33476,-0.70333 -0.77017,-0.65317 -1.24197,-0.32877 l -2.79434,0.64676 2.2926,-2.85067 -2.86944,2.98409 -1.04783,0.24248 c -0.20987,0.17583 -0.53873,0.21563 -0.29242,0.91281 l 0.0591,0.17697 -0.41506,0.43143 0,1.6802 -7.74306,10.40916 -1.53399,1.89951 c -1.44723,-0.72364 -1.39682,-2.69533 -2.08167,-4.05429 -0.10602,-1.64282 -0.73,-2.87566 -2.48354,-3.21419 l -0.36552,-0.47457 0.58443,-0.29242 0.14621,-1.38778 0.73064,-0.36512 -0.69429,-0.87685 0.80375,-0.14581 -0.87645,-0.767 0.40147,-4.41941 c -0.33477,-0.70333 -0.76978,-0.65317 -1.24157,-0.32877 l -2.18754,0.50614 2.51191,-3.12351 -3.14428,3.26972 -1.5995,0.37031 c -0.20987,0.17583 -0.53873,0.21603 -0.29242,0.91321 l 0.47058,1.41175 0,0.46339 -7.74305,10.40916 -1.53399,1.89911 c -1.44723,-0.72363 -1.39683,-2.69494 -2.08167,-4.05389 -0.10602,-1.64282 -0.73,-2.87566 -2.48355,-3.21419 l -0.36512,-0.47457 0.58404,-0.29242 0.1462,-1.38778 0.73065,-0.36512 -0.69389,-0.87685 0.80334,-0.14581 -0.87645,-0.767 0.40148,-4.41941 c -0.33477,-0.70332 -0.76978,-0.65317 -1.24158,-0.32877 l -2.94893,0.68231 2.65332,-3.29968 z m -4.19491,5.21637 0.35514,1.0658 -0.36033,-0.21931 0,-0.8397 0.005,-0.007 z m 38.05294,0.11065 0.54409,1.63187 -0.79296,-0.48257 0,-0.8401 0.24887,-0.3092 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"none"}]}]},{"id":11,"els":[{"name":"rect","x":"10","y":"20","width":"640","height":"130","style":[{"key":"fill","val":"#ffffff"}]},{"name":"text","x":"18.992725","y":"41.432579","style":[],"text":"En décembre 1797, les troupes françaises stationnées à Versoix annoncent avoir la charge"},{"name":"text","x":"18.992725","y":"60.182579","style":[],"text":"de protéger les vaudois contre toute aggression. C'est une déclaration de guerre à Berne, "},{"name":"text","x":"18.992725","y":"78.932579","style":[],"text":"pilié de l'ancien régime hélvétique. "},{"name":"text","x":"18.992725","y":"116.43258","style":[],"text":"Une \"assemblée représentative provisoire du pays de Vaud\" est constituée le 24 janvier 1798 "},{"name":"text","x":"18.992725","y":"135.18259","style":[],"text":"sous la protection de la France."},{"name":"path","d":"m 205.56418,355.61821 -3.32125,3.45428 -0.80255,0.18575 c -0.20987,0.17582 -0.53833,0.21602 -0.29202,0.91321 l 0.01,0.0296 -0.15939,0.16538 0,1.6802 -7.74305,10.40916 -1.53399,1.89911 c -1.44723,-0.72364 -1.39683,-2.69493 -2.08167,-4.05389 -0.10602,-1.64282 -0.73,-2.87565 -2.48355,-3.21418 l -0.36552,-0.47498 0.58443,-0.29202 0.14621,-1.38778 0.73025,-0.36552 -0.69389,-0.87645 0.80374,-0.14621 -0.87685,-0.767 0.40187,-4.41941 c -0.33476,-0.70333 -0.76977,-0.65277 -1.24157,-0.32837 l -4.41941,1.02266 c -0.20986,0.17583 -0.53873,0.21563 -0.29241,0.91281 l 1.16886,3.5062 0.54769,2.26464 -0.14581,0.9132 -2.5203,0.8401 c -1.26156,1.14426 -2.7734,2.02338 -2.92177,4.3463 0.15295,1.95277 -0.44998,3.86576 0.87645,5.8803 0.36714,0.57262 0.72783,1.15069 1.49764,1.38779 l -0.18256,0.62077 -1.49764,1.24198 c -0.26013,1.15659 0.0137,2.31289 0.36512,3.46946 0.36524,0.59124 0.73053,0.42305 1.09576,0.51133 0.54959,-0.096 0.68964,-0.51964 0.91321,-0.87646 l 0.36512,8.03508 -0.43823,1.57074 c 0.22586,2.08173 -0.80791,1.32944 1.13212,7.26807 -0.0346,0.72737 -0.60021,1.6963 0.0368,2.11842 0.60727,0.27239 0.77805,0.69025 0.98591,1.09578 l 1.78965,0.54767 c 1.72696,0.46151 1.30256,-0.39145 0.58444,-1.42413 l -1.27833,-1.89951 -0.40187,-1.7529 0.36552,-6.86661 c 0.78884,-2.32535 1.21958,-4.65073 1.7529,-6.97606 0.89584,1.21903 1.28869,2.43819 2.68768,3.65722 l 0.12464,3.06317 c -0.55093,0.61965 -0.73043,1.68506 -0.94956,2.70287 -0.0852,2.06966 0.65031,3.16943 -0.25566,6.20906 l -0.18256,1.38777 c 0.25771,0.81966 0.75015,0.7004 1.20522,0.73065 1.28043,-0.35032 1.83403,-0.0298 2.22788,0.43823 0.92526,0.33858 1.8507,0.1631 2.77596,0.0364 0.49459,-0.3409 0.85189,-0.68177 -0.54808,-1.02266 l -2.15478,-1.24157 c -1.03675,-0.48405 -0.98465,-1.25861 -1.02266,-2.00898 l 1.20522,-6.90295 c 0.97014,-1.01047 0.71416,-2.02113 0.40188,-3.03162 0.34567,-2.89822 -1.02026,-5.55159 -2.04532,-8.25399 l 1.16887,-2.5934 c 0.75408,-0.43993 1.48876,-0.92336 1.97221,-1.97222 l 1.57034,-0.767 c 0.36537,-1.01047 0.28846,-2.02112 0.0368,-3.03161 l 7.70031,-10.63207 0.37431,1.12372 0.54808,2.26424 -0.14621,0.9132 -2.5203,0.8401 c -1.26156,1.14425 -2.7734,2.02337 -2.92177,4.3463 0.15295,1.95278 -0.44998,3.86577 0.87645,5.8803 0.36715,0.57263 0.72783,1.15068 1.49764,1.38777 l -0.18256,0.6208 -1.49764,1.24198 c -0.26013,1.15659 0.0141,2.31328 0.36552,3.46984 0.36524,0.59124 0.73013,0.42306 1.09537,0.51133 0.54958,-0.096 0.68963,-0.52002 0.9132,-0.87685 l 0.36512,8.03547 -0.43822,1.57034 c 0.22585,2.08172 -0.80752,1.32946 1.13251,7.26808 -0.0346,0.72738 -0.60061,1.69631 0.0363,2.11842 0.60727,0.2724 0.77845,0.69024 0.98631,1.09576 l 1.78966,0.54809 c 1.72695,0.4615 1.30215,-0.39185 0.58403,-1.42453 l -1.27832,-1.89912 -0.40148,-1.75329 0.36512,-6.86661 c 0.78884,-2.32534 1.21998,-4.65034 1.75331,-6.97566 0.89584,1.21903 1.28829,2.43777 2.68727,3.6568 l 0.12504,3.0632 c -0.55092,0.61965 -0.73082,1.68504 -0.94995,2.70285 -0.0852,2.06966 0.6503,3.16945 -0.25567,6.20908 l -0.18256,1.38777 c 0.25772,0.81966 0.75015,0.7004 1.20522,0.73065 1.28043,-0.35032 1.83443,-0.0298 2.22828,0.43823 0.92526,0.33858 1.8503,0.16309 2.77556,0.0363 0.49459,-0.34089 0.85229,-0.68176 -0.54768,-1.02266 l -2.15517,-1.24157 c -1.03676,-0.48404 -0.98466,-1.25861 -1.02266,-2.00897 l 1.20562,-6.90296 c 0.97013,-1.01047 0.71376,-2.02073 0.40147,-3.03122 0.34567,-2.89822 -1.02026,-5.55198 -2.04532,-8.25438 l 1.16887,-2.59341 c 0.75409,-0.43992 1.48876,-0.92336 1.97221,-1.97222 l 1.57075,-0.76699 c 0.36536,-1.01047 0.28805,-2.02074 0.0363,-3.03123 l 7.27566,-10.04603 0.17937,0.53729 0.54808,2.26424 -0.14621,0.9132 -2.52029,0.8401 c -1.26156,1.14425 -2.7734,2.02338 -2.92177,4.3463 0.15295,1.95278 -0.44999,3.86575 0.87645,5.88029 0.36714,0.57265 0.72783,1.15072 1.49763,1.38779 l -0.18256,0.62118 -1.49764,1.24157 c -0.26012,1.15657 0.0137,2.31328 0.36513,3.46987 0.36523,0.59122 0.73052,0.42305 1.09576,0.51133 0.54958,-0.096 0.68964,-0.51963 0.9132,-0.87646 l 0.36513,8.03508 -0.43823,1.57033 c 0.22585,2.08173 -0.80791,1.32987 1.13212,7.26848 -0.0346,0.7274 -0.60022,1.6959 0.0367,2.11803 0.60726,0.27237 0.77804,0.69025 0.98591,1.09576 l 1.78965,0.54808 c 1.72695,0.46151 1.30255,-0.39184 0.58444,-1.42454 l -1.27833,-1.8991 -0.40147,-1.75331 0.36512,-6.8662 c 0.78883,-2.32533 1.21958,-4.65073 1.7529,-6.97606 0.89584,1.21903 1.28869,2.43778 2.68768,3.65681 l 0.12464,3.06358 c -0.55093,0.61965 -0.73043,1.68467 -0.94956,2.70246 -0.0852,2.06968 0.65031,3.16941 -0.25566,6.20906 l -0.18257,1.38779 c 0.25772,0.81967 0.75015,0.70038 1.20523,0.73063 1.28042,-0.35032 1.83403,-0.0298 2.22788,0.43823 0.92526,0.33857 1.8507,0.16351 2.77596,0.0368 0.49458,-0.34088 0.85228,-0.68177 -0.54768,-1.02266 l -2.15518,-1.24198 c -1.03675,-0.48405 -0.98465,-1.25859 -1.02266,-2.00896 l 1.20522,-6.90295 c 0.97014,-1.01049 0.71416,-2.02076 0.40187,-3.03123 0.34567,-2.89823 -1.02025,-5.552 -2.04532,-8.2544 l 1.16887,-2.59299 c 0.75409,-0.43993 1.48877,-0.92375 1.97222,-1.97261 l 1.57034,-0.767 c 0.36537,-1.01049 0.28846,-2.02073 0.0367,-3.03122 l 7.936,-10.95805 0.34555,1.03624 0.54768,2.26424 -0.1458,0.9132 -2.5203,0.8401 c -1.26156,1.14426 -2.7734,2.02337 -2.92178,4.3463 0.15296,1.95276 -0.44997,3.86577 0.87646,5.8803 0.36714,0.57263 0.72783,1.15068 1.49764,1.38777 l -0.18296,0.6208 -1.49724,1.24198 c -0.26013,1.15659 0.0137,2.31328 0.36512,3.46984 0.36524,0.59124 0.73053,0.42306 1.09576,0.51133 0.54959,-0.096 0.68964,-0.52002 0.9132,-0.87685 l 0.36513,8.03547 -0.43823,1.57034 c 0.22585,2.08172 -0.80791,1.32946 1.13212,7.26808 -0.0346,0.7274 -0.60022,1.69631 0.0368,2.11842 0.60727,0.2724 0.77804,0.69024 0.98591,1.09576 l 1.78965,0.5477 c 1.72695,0.4615 1.30255,-0.39146 0.58444,-1.42414 l -1.27833,-1.89951 -0.40187,-1.7529 0.36552,-6.86661 c 0.78884,-2.32532 1.21958,-4.65073 1.7529,-6.97605 0.89584,1.21903 1.28869,2.43816 2.68768,3.65719 l 0.12464,3.0632 c -0.55093,0.61965 -0.73043,1.68504 -0.94956,2.70285 -0.0852,2.06966 0.65031,3.16945 -0.25566,6.20908 l -0.18256,1.38777 c 0.25771,0.81968 0.75015,0.7004 1.20522,0.73065 1.28043,-0.35032 1.83403,-0.0298 2.22788,0.43823 0.92526,0.33858 1.8507,0.16309 2.77596,0.0363 0.49458,-0.34089 0.85189,-0.68176 -0.54808,-1.02266 l -2.15478,-1.24157 c -1.03675,-0.48404 -0.98465,-1.25861 -1.02266,-2.00897 l 1.20522,-6.90296 c 0.97014,-1.01047 0.71416,-2.02073 0.40188,-3.03122 0.34566,-2.89822 -1.02027,-5.55198 -2.04532,-8.25438 l 1.16887,-2.59341 c 0.75408,-0.43992 1.48876,-0.92336 1.97221,-1.97222 l 1.57034,-0.76699 c 0.36537,-1.01047 0.28846,-2.02074 0.0368,-3.03123 l 7.96196,-10.99359 -0.8401,-0.51133 0,-0.8401 4.2001,-5.22316 -4.56522,4.74818 0,1.6802 -7.74305,10.40916 -1.53399,1.89911 c -1.44723,-0.72363 -1.39683,-2.69494 -2.08167,-4.05389 -0.10603,-1.64282 -0.7304,-2.87566 -2.48395,-3.21419 l -0.36512,-0.47497 0.58443,-0.29202 0.14621,-1.38778 0.73024,-0.36552 -0.69389,-0.87645 0.80375,-0.14621 -0.87685,-0.767 0.40187,-4.41901 c -0.33476,-0.70333 -0.77017,-0.65317 -1.24197,-0.32877 l -2.79434,0.64676 2.2926,-2.85067 -2.86944,2.98409 -1.04783,0.24248 c -0.20987,0.17583 -0.53873,0.21563 -0.29242,0.91281 l 0.0591,0.17697 -0.41506,0.43143 0,1.6802 -7.74306,10.40916 -1.53399,1.89951 c -1.44723,-0.72364 -1.39682,-2.69533 -2.08167,-4.05429 -0.10602,-1.64282 -0.73,-2.87566 -2.48354,-3.21419 l -0.36552,-0.47457 0.58443,-0.29242 0.14621,-1.38778 0.73064,-0.36512 -0.69429,-0.87685 0.80375,-0.14581 -0.87645,-0.767 0.40147,-4.41941 c -0.33477,-0.70333 -0.76978,-0.65317 -1.24157,-0.32877 l -2.18754,0.50614 2.51191,-3.12351 -3.14428,3.26972 -1.5995,0.37031 c -0.20987,0.17583 -0.53873,0.21603 -0.29242,0.91321 l 0.47058,1.41175 0,0.46339 -7.74305,10.40916 -1.53399,1.89911 c -1.44723,-0.72363 -1.39683,-2.69494 -2.08167,-4.05389 -0.10602,-1.64282 -0.73,-2.87566 -2.48355,-3.21419 l -0.36512,-0.47457 0.58404,-0.29242 0.1462,-1.38778 0.73065,-0.36512 -0.69389,-0.87685 0.80334,-0.14581 -0.87645,-0.767 0.40148,-4.41941 c -0.33477,-0.70332 -0.76978,-0.65317 -1.24158,-0.32877 l -2.94893,0.68231 2.65332,-3.29968 z m -4.19491,5.21637 0.35514,1.0658 -0.36033,-0.21931 0,-0.8397 0.005,-0.007 z m 38.05294,0.11065 0.54409,1.63187 -0.79296,-0.48257 0,-0.8401 0.24887,-0.3092 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"none"}]},{"name":"text","x":"220.71225","y":"428.547","style":[{"key":"font-style","val":"italic"}],"text":"Versoix"},{"name":"text","x":"449.35645","y":"225.9709","style":[{"key":"font-style","val":"italic"}],"text":"PAYS DE VAUD"}]},{"id":12,"els":[{"name":"rect","x":"10","y":"20","width":"620","height":"70","style":[{"key":"fill","val":"#ffffff"}]},{"name":"text","x":"21.367523","y":"42.735043","style":[],"text":"Berne capitule le 5 mars 1798. Le 16, la République des sept devient celle des dix dizains."},{"name":"text","x":"21.367523","y":"61.485039","style":[],"text":"La création de trois nouveaux dizains marque la fin du baillage Bas-Valaisan mais "},{"name":"text","x":"21.367523","y":"80.235039","style":[],"text":"n'empêche pas l'invasion française."},{"name":"text","x":"575.66949","y":"297.151","style":[{"key":"font-style","val":"italic"}],"text":"RÉPUBLIQUE DES DIX DIZAINS"},{"name":"text","x":"501.58368","y":"347.01453","style":[{"key":"font-style","val":"italic"}],"text":"Entremont"},{"name":"text","x":"432.01456","y":"326.04364","style":[{"key":"font-style","val":"italic"}],"text":"St-Maurice"},{"name":"text","x":"373.88361","y":"295.03638","style":[{"key":"font-style","val":"italic"}],"text":"Monthey"},{"name":"path","d":"m 478.01741,135.44159 -3.32125,3.45428 -0.80255,0.18575 c -0.20987,0.17582 -0.53833,0.21602 -0.29202,0.91321 l 0.01,0.0296 -0.15939,0.16538 0,1.6802 -7.74305,10.40916 -1.53399,1.89911 c -1.44723,-0.72364 -1.39683,-2.69493 -2.08167,-4.05389 -0.10602,-1.64282 -0.73,-2.87565 -2.48355,-3.21418 l -0.36552,-0.47498 0.58443,-0.29202 0.14621,-1.38778 0.73025,-0.36552 -0.69389,-0.87645 0.80374,-0.14621 -0.87685,-0.767 0.40187,-4.41941 c -0.33476,-0.70333 -0.76977,-0.65277 -1.24157,-0.32837 l -4.41941,1.02266 c -0.20986,0.17583 -0.53873,0.21563 -0.29241,0.91281 l 1.16886,3.5062 0.54769,2.26464 -0.14581,0.9132 -2.5203,0.8401 c -1.26156,1.14426 -2.7734,2.02338 -2.92177,4.3463 0.15295,1.95277 -0.44998,3.86576 0.87645,5.8803 0.36714,0.57262 0.72783,1.15069 1.49764,1.38779 l -0.18256,0.62077 -1.49764,1.24198 c -0.26013,1.15659 0.0137,2.31289 0.36512,3.46946 0.36524,0.59124 0.73053,0.42305 1.09576,0.51133 0.54959,-0.096 0.68964,-0.51964 0.91321,-0.87646 l 0.36512,8.03508 -0.43823,1.57074 c 0.22586,2.08173 -0.80791,1.32944 1.13212,7.26807 -0.0346,0.72737 -0.60021,1.6963 0.0368,2.11842 0.60727,0.27239 0.77805,0.69025 0.98591,1.09578 l 1.78965,0.54767 c 1.72696,0.46151 1.30256,-0.39145 0.58444,-1.42413 l -1.27833,-1.89951 -0.40187,-1.7529 0.36552,-6.86661 c 0.78884,-2.32535 1.21958,-4.65073 1.7529,-6.97606 0.89584,1.21903 1.28869,2.43819 2.68768,3.65722 l 0.12464,3.06317 c -0.55093,0.61965 -0.73043,1.68506 -0.94956,2.70287 -0.0852,2.06966 0.65031,3.16943 -0.25566,6.20906 l -0.18256,1.38777 c 0.25771,0.81966 0.75015,0.7004 1.20522,0.73065 1.28043,-0.35032 1.83403,-0.0298 2.22788,0.43823 0.92526,0.33858 1.8507,0.1631 2.77596,0.0364 0.49459,-0.3409 0.85189,-0.68177 -0.54808,-1.02266 l -2.15478,-1.24157 c -1.03675,-0.48405 -0.98465,-1.25861 -1.02266,-2.00898 l 1.20522,-6.90295 c 0.97014,-1.01047 0.71416,-2.02113 0.40188,-3.03162 0.34567,-2.89822 -1.02026,-5.55159 -2.04532,-8.25399 l 1.16887,-2.5934 c 0.75408,-0.43993 1.48876,-0.92336 1.97221,-1.97222 l 1.57034,-0.767 c 0.36537,-1.01047 0.28846,-2.02112 0.0368,-3.03161 l 7.70031,-10.63207 0.37431,1.12372 0.54808,2.26424 -0.14621,0.9132 -2.5203,0.8401 c -1.26156,1.14425 -2.7734,2.02337 -2.92177,4.3463 0.15295,1.95278 -0.44998,3.86577 0.87645,5.8803 0.36715,0.57263 0.72783,1.15068 1.49764,1.38777 l -0.18256,0.6208 -1.49764,1.24198 c -0.26013,1.15659 0.0141,2.31328 0.36552,3.46984 0.36524,0.59124 0.73013,0.42306 1.09537,0.51133 0.54958,-0.096 0.68963,-0.52002 0.9132,-0.87685 l 0.36512,8.03547 -0.43822,1.57034 c 0.22585,2.08172 -0.80752,1.32946 1.13251,7.26808 -0.0346,0.72738 -0.60061,1.69631 0.0363,2.11842 0.60727,0.2724 0.77845,0.69024 0.98631,1.09576 l 1.78966,0.54809 c 1.72695,0.4615 1.30215,-0.39185 0.58403,-1.42453 l -1.27832,-1.89912 -0.40148,-1.75329 0.36512,-6.86661 c 0.78884,-2.32534 1.21998,-4.65034 1.75331,-6.97566 0.89584,1.21903 1.28829,2.43777 2.68727,3.6568 l 0.12504,3.0632 c -0.55092,0.61965 -0.73082,1.68504 -0.94995,2.70285 -0.0852,2.06966 0.6503,3.16945 -0.25567,6.20908 l -0.18256,1.38777 c 0.25772,0.81966 0.75015,0.7004 1.20522,0.73065 1.28043,-0.35032 1.83443,-0.0298 2.22828,0.43823 0.92526,0.33858 1.8503,0.16309 2.77556,0.0363 0.49459,-0.34089 0.85229,-0.68176 -0.54768,-1.02266 l -2.15517,-1.24157 c -1.03676,-0.48404 -0.98466,-1.25861 -1.02266,-2.00897 l 1.20562,-6.90296 c 0.97013,-1.01047 0.71376,-2.02073 0.40147,-3.03122 0.34567,-2.89822 -1.02026,-5.55198 -2.04532,-8.25438 l 1.16887,-2.59341 c 0.75409,-0.43992 1.48876,-0.92336 1.97221,-1.97222 l 1.57075,-0.76699 c 0.36536,-1.01047 0.28805,-2.02074 0.0363,-3.03123 l 7.27566,-10.04603 0.17937,0.53729 0.54808,2.26424 -0.14621,0.9132 -2.52029,0.8401 c -1.26156,1.14425 -2.7734,2.02338 -2.92177,4.3463 0.15295,1.95278 -0.44999,3.86575 0.87645,5.88029 0.36714,0.57265 0.72783,1.15072 1.49763,1.38779 l -0.18256,0.62118 -1.49764,1.24157 c -0.26012,1.15657 0.0137,2.31328 0.36513,3.46987 0.36523,0.59122 0.73052,0.42305 1.09576,0.51133 0.54958,-0.096 0.68964,-0.51963 0.9132,-0.87646 l 0.36513,8.03508 -0.43823,1.57033 c 0.22585,2.08173 -0.80791,1.32987 1.13212,7.26848 -0.0346,0.7274 -0.60022,1.6959 0.0367,2.11803 0.60726,0.27237 0.77804,0.69025 0.98591,1.09576 l 1.78965,0.54808 c 1.72695,0.46151 1.30255,-0.39184 0.58444,-1.42454 l -1.27833,-1.8991 -0.40147,-1.75331 0.36512,-6.8662 c 0.78883,-2.32533 1.21958,-4.65073 1.7529,-6.97606 0.89584,1.21903 1.28869,2.43778 2.68768,3.65681 l 0.12464,3.06358 c -0.55093,0.61965 -0.73043,1.68467 -0.94956,2.70246 -0.0852,2.06968 0.65031,3.16941 -0.25566,6.20906 l -0.18257,1.38779 c 0.25772,0.81967 0.75015,0.70038 1.20523,0.73063 1.28042,-0.35032 1.83403,-0.0298 2.22788,0.43823 0.92526,0.33857 1.8507,0.16351 2.77596,0.0368 0.49458,-0.34088 0.85228,-0.68177 -0.54768,-1.02266 l -2.15518,-1.24198 c -1.03675,-0.48405 -0.98465,-1.25859 -1.02266,-2.00896 l 1.20522,-6.90295 c 0.97014,-1.01049 0.71416,-2.02076 0.40187,-3.03123 0.34567,-2.89823 -1.02025,-5.552 -2.04532,-8.2544 l 1.16887,-2.59299 c 0.75409,-0.43993 1.48877,-0.92375 1.97222,-1.97261 l 1.57034,-0.767 c 0.36537,-1.01049 0.28846,-2.02073 0.0367,-3.03122 l 7.936,-10.95805 0.34555,1.03624 0.54768,2.26424 -0.1458,0.9132 -2.5203,0.8401 c -1.26156,1.14426 -2.7734,2.02337 -2.92178,4.3463 0.15296,1.95276 -0.44997,3.86577 0.87646,5.8803 0.36714,0.57263 0.72783,1.15068 1.49764,1.38777 l -0.18296,0.6208 -1.49724,1.24198 c -0.26013,1.15659 0.0137,2.31328 0.36512,3.46984 0.36524,0.59124 0.73053,0.42306 1.09576,0.51133 0.54959,-0.096 0.68964,-0.52002 0.9132,-0.87685 l 0.36513,8.03547 -0.43823,1.57034 c 0.22585,2.08172 -0.80791,1.32946 1.13212,7.26808 -0.0346,0.7274 -0.60022,1.69631 0.0368,2.11842 0.60727,0.2724 0.77804,0.69024 0.98591,1.09576 l 1.78965,0.5477 c 1.72695,0.4615 1.30255,-0.39146 0.58444,-1.42414 l -1.27833,-1.89951 -0.40187,-1.7529 0.36552,-6.86661 c 0.78884,-2.32532 1.21958,-4.65073 1.7529,-6.97605 0.89584,1.21903 1.28869,2.43816 2.68768,3.65719 l 0.12464,3.0632 c -0.55093,0.61965 -0.73043,1.68504 -0.94956,2.70285 -0.0852,2.06966 0.65031,3.16945 -0.25566,6.20908 l -0.18256,1.38777 c 0.25771,0.81968 0.75015,0.7004 1.20522,0.73065 1.28043,-0.35032 1.83403,-0.0298 2.22788,0.43823 0.92526,0.33858 1.8507,0.16309 2.77596,0.0363 0.49458,-0.34089 0.85189,-0.68176 -0.54808,-1.02266 l -2.15478,-1.24157 c -1.03675,-0.48404 -0.98465,-1.25861 -1.02266,-2.00897 l 1.20522,-6.90296 c 0.97014,-1.01047 0.71416,-2.02073 0.40188,-3.03122 0.34566,-2.89822 -1.02027,-5.55198 -2.04532,-8.25438 l 1.16887,-2.59341 c 0.75408,-0.43992 1.48876,-0.92336 1.97221,-1.97222 l 1.57034,-0.76699 c 0.36537,-1.01047 0.28846,-2.02074 0.0368,-3.03123 l 7.96196,-10.99359 -0.8401,-0.51133 0,-0.8401 4.2001,-5.22316 -4.56522,4.74818 0,1.6802 -7.74305,10.40916 -1.53399,1.89911 c -1.44723,-0.72363 -1.39683,-2.69494 -2.08167,-4.05389 -0.10603,-1.64282 -0.7304,-2.87566 -2.48395,-3.21419 l -0.36512,-0.47497 0.58443,-0.29202 0.14621,-1.38778 0.73024,-0.36552 -0.69389,-0.87645 0.80375,-0.14621 -0.87685,-0.767 0.40187,-4.41901 c -0.33476,-0.70333 -0.77017,-0.65317 -1.24197,-0.32877 l -2.79434,0.64676 2.2926,-2.85067 -2.86944,2.98409 -1.04783,0.24248 c -0.20987,0.17583 -0.53873,0.21563 -0.29242,0.91281 l 0.0591,0.17697 -0.41506,0.43143 0,1.6802 -7.74306,10.40916 -1.53399,1.89951 c -1.44723,-0.72364 -1.39682,-2.69533 -2.08167,-4.05429 -0.10602,-1.64282 -0.73,-2.87566 -2.48354,-3.21419 l -0.36552,-0.47457 0.58443,-0.29242 0.14621,-1.38778 0.73064,-0.36512 -0.69429,-0.87685 0.80375,-0.14581 -0.87645,-0.767 0.40147,-4.41941 c -0.33477,-0.70333 -0.76978,-0.65317 -1.24157,-0.32877 l -2.18754,0.50614 2.51191,-3.12351 -3.14428,3.26972 -1.5995,0.37031 c -0.20987,0.17583 -0.53873,0.21603 -0.29242,0.91321 l 0.47058,1.41175 0,0.46339 -7.74305,10.40916 -1.53399,1.89911 c -1.44723,-0.72363 -1.39683,-2.69494 -2.08167,-4.05389 -0.10602,-1.64282 -0.73,-2.87566 -2.48355,-3.21419 l -0.36512,-0.47457 0.58404,-0.29242 0.1462,-1.38778 0.73065,-0.36512 -0.69389,-0.87685 0.80334,-0.14581 -0.87645,-0.767 0.40148,-4.41941 c -0.33477,-0.70332 -0.76978,-0.65317 -1.24158,-0.32877 l -2.94893,0.68231 2.65332,-3.29968 z m -4.19491,5.21637 0.35514,1.0658 -0.36033,-0.21931 0,-0.8397 0.005,-0.007 z m 38.05294,0.11065 0.54409,1.63187 -0.79296,-0.48257 0,-0.8401 0.24887,-0.3092 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"none"}]}]},{"id":13,"els":[{"name":"rect","x":"834.19122","y":"50.923367","width":"92.333595","height":"92.333595","style":[{"key":"fill","val":"#ffdc6a"}]},{"name":"rect","x":"834.19122","y":"50.923367","width":"92.333595","height":"61.555729","style":[{"key":"fill","val":"#e79d92"}]},{"name":"rect","x":"834.19122","y":"50.923367","width":"92.333595","height":"30.777864","style":[{"key":"fill","val":"#82c997"}]},{"name":"rect","x":"10","y":"20","width":"409.85452","height":"130","style":[{"key":"fill","val":"#ffffff"}]},{"name":"text","x":"421.33902","y":"252.87749","style":[{"key":"font-style","val":"italic"}],"text":"RÉPUBLIQUE HELVÉTIQUE"},{"name":"text","x":"15.669515","y":"41.310543","style":[],"text":"Occupant les territoires de la confédération et de ses alliés, "},{"name":"text","x":"15.669515","y":"60.060543","style":[],"text":"la France républicaine instaure un régime à son image: la "},{"name":"text","x":"15.669515","y":"78.810547","style":[],"text":"République hélvétique, \"une et indivisible\". "},{"name":"text","x":"15.669515","y":"116.31055","style":[],"text":"La constituion du 14 avril 1798, déclare l'égalité des "},{"name":"text","x":"15.669515","y":"135.06055","style":[],"text":"citoyens, mettant fin à l'ancien régime et aux baillages."}]},{"id":14,"els":[{"name":"rect","x":"10","y":"20","width":"430","height":"130","style":[{"key":"fill","val":"#ffffff"}]},{"name":"path","d":"m 486.92244,339.72506 -0.81338,7.72776 0.002,5.32916 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.65522 -1.29314,0.65522 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.31042 -0.96986,1.31042 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.65522 c 0,0 -0.64862,0.4247 -0.96986,0.65522 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06083 -0.80304,-7.72776 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"path","d":"m 651.88607,209.76143 -0.81338,7.72776 0.002,5.32916 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.65522 -1.29314,0.65522 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.31042 -0.96986,1.31042 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.65522 c 0,0 -0.64862,0.4247 -0.96986,0.65522 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06083 -0.80304,-7.72776 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"text","x":"559.9715","y":"182.849","style":[{"key":"font-style","val":"italic"}],"text":"CANTON DU LÉMAN"},{"name":"text","x":"665.7265","y":"223.56125","style":[{"key":"font-style","val":"italic"}],"text":"Lausanne"},{"name":"text","x":"459.42361","y":"370.50363","style":[{"key":"font-style","val":"italic"}],"text":"Genève"},{"name":"text","x":"634.11688","y":"351.08002","style":[{"key":"font-style","val":"italic"},{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"}],"text":"DÉPARTEMENT "},{"name":"text","x":"632.0368","y":"369.83002","style":[{"key":"font-style","val":"italic"},{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"}],"text":"DU LÉMAN"},{"name":"text","x":"19.138218","y":"43.200962","style":[],"text":"Le pays de Vaud, à l'exception des possessions bernoises "},{"name":"text","x":"19.138218","y":"61.950962","style":[],"text":"dans la Broye, devient le canton du Léman. "},{"name":"text","x":"19.138218","y":"99.450966","style":[],"text":"Genève, ayant rejoint la république française le 14 avril 1798, "},{"name":"text","x":"19.138218","y":"118.20097","style":[],"text":"devient capitale du département du Léman, constitué du pays "},{"name":"text","x":"19.138218","y":"136.95096","style":[],"text":"de Gex, du genevois et du chablais savoyard."},{"name":"path","d":"m 351.49573,315.88319 27.42165,79.05983 -33.11966,-6.41026 -13.53276,-78.34758 z","style":[{"key":"fill","val":"#ffc7be"},{"key":"stroke","val":"none"}]},{"name":"text","x":"108.32141","y":"290.73785","style":[],"text":"République française"},{"name":"text","x":"796.75421","y":"149.46843","style":[],"text":"République helvétique"},{"name":"rect","x":"896.47443","y":"56.799168","width":"34.247337","height":"22.160042","style":[{"key":"fill","val":"#bfe3cb"}]}]},{"id":15,"els":[{"name":"text","x":"21.680912","y":"40.968662","style":[],"text":"En octobre 1798, suite à l'occupation des Grisons par "},{"name":"text","x":"21.680912","y":"59.718662","style":[],"text":"l'Autriche, l'hélvétique est en guerre. Des combats ont "},{"name":"text","x":"21.680912","y":"78.468658","style":[],"text":"lieu dans toute la partie ortientale du pays. "},{"name":"text","x":"21.680912","y":"115.96866","style":[],"text":"Le siège du gouvernement doit être "},{"name":"text","x":"21.680912","y":"134.71866","style":[],"text":"déplacé plusieurs fois. Politiquement "},{"name":"text","x":"21.680912","y":"153.46866","style":[],"text":"instable, la république connait quatre "},{"name":"text","x":"21.680912","y":"172.21866","style":[],"text":"coups d'état en cinq ans."},{"name":"path","d":"m 490.50582,125.8377 -0.81338,7.72776 0.002,5.32916 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.65522 -1.29314,0.65522 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.31042 -0.96986,1.31042 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.65522 c 0,0 -0.64862,0.4247 -0.96986,0.65522 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06083 -0.80304,-7.72776 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"text","x":"470.0285","y":"158.5755","style":[{"key":"font-style","val":"italic"}],"text":"Aarau"},{"name":"path","d":"m 474.06707,223.72944 -0.81338,7.72776 0.002,5.32916 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.65522 -1.29314,0.65522 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.31042 -0.96986,1.31042 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.65522 c 0,0 -0.64862,0.4247 -0.96986,0.65522 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06083 -0.80304,-7.72776 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"text","x":"448.604","y":"255.69801","style":[{"key":"font-style","val":"italic"}],"text":"Lucerne"},{"name":"path","d":"m 374.06707,234.47018 -0.81338,7.72776 0.002,5.32916 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.65522 -1.29314,0.65522 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.31042 -0.96986,1.31042 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.65522 c 0,0 -0.64862,0.4247 -0.96986,0.65522 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06083 -0.80304,-7.72776 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"text","x":"352.13675","y":"271.453","style":[{"key":"font-style","val":"italic"}],"text":"Berne"},{"name":"path","d":"m 571.06031,169.76799 c -0.64148,-0.50479 -1.25225,-1.5905 -0.94154,-1.67362 1.13849,-0.30457 3.57027,-1.33874 3.52061,-1.49723 -0.0348,-0.11117 0.15046,-0.35932 0.41172,-0.55146 0.41925,-0.30835 0.51524,-0.32418 0.81801,-0.13486 0.30263,0.18922 0.42491,0.1702 1.03853,-0.1616 l 0.6955,-0.37609 -1.17339,-0.87568 c -3.23324,-2.41295 -5.1774,-5.16333 -5.31846,-7.52399 -0.0374,-0.62576 0.0259,-0.81884 0.28022,-0.8553 0.23368,-0.0335 0.43606,0.1942 0.70097,0.78859 0.52138,1.16988 1.70374,2.89484 2.87192,4.18983 1.01706,1.12748 3.29733,3.10376 3.81763,3.30871 0.20265,0.0798 0.65837,-0.19023 1.49779,-0.88757 2.49196,-2.07022 4.32861,-4.28253 5.27894,-6.35872 0.38096,-0.83226 0.58227,-1.0738 0.89667,-1.07586 0.37339,-0.002 0.39422,0.0807 0.26354,1.05218 -0.32893,2.44528 -2.14079,4.94952 -5.33655,7.37583 -0.55333,0.42011 -1.00608,0.81273 -1.00608,0.8725 0,0.0597 0.27553,0.24941 0.61226,0.42143 0.57294,0.29268 0.63543,0.29683 0.97365,0.0648 0.33835,-0.23212 0.38772,-0.22433 0.77278,0.12187 0.22622,0.2034 0.39025,0.46968 0.36444,0.59172 -0.0297,0.14057 0.50241,0.41486 1.45185,0.74841 2.52422,0.8868 2.33795,0.7575 2.0351,1.41271 -0.14633,0.31657 -0.56255,0.79192 -0.92496,1.05634 -0.5942,0.43356 -0.77943,0.48077 -1.88627,0.48077 -1.0925,0 -1.30899,-0.0533 -1.97068,-0.48438 -0.81274,-0.52961 -1.28327,-1.4348 -1.10269,-2.12134 0.0979,-0.37224 -0.0116,-0.49055 -0.85643,-0.92514 l -0.96871,-0.49831 -0.9222,0.52212 c -0.82431,0.4667 -0.91286,0.57734 -0.83426,1.0425 0.12682,0.75065 -0.29994,1.49559 -1.15344,2.01337 -0.64814,0.3932 -0.90501,0.45118 -1.99869,0.45118 -1.16432,0 -1.30214,-0.0371 -1.90778,-0.51371 z m 2.84547,-0.69016 c 0.5841,-0.31746 1.00415,-0.84718 0.83208,-1.04934 -0.0698,-0.0821 -2.08065,0.58641 -2.61789,0.87029 -0.0462,0.0244 0.0379,0.14587 0.18678,0.26987 0.37521,0.31237 0.91341,0.2818 1.59903,-0.0908 z m 9.64319,0.11387 c 0.38444,-0.19423 0.37961,-0.21002 -0.11966,-0.39015 -0.28617,-0.10324 -0.92977,-0.35132 -1.43023,-0.55128 l -0.90992,-0.36355 0,0.32129 c 0,0.39494 1.10422,1.18611 1.65541,1.18611 0.22206,0 0.58403,-0.0911 0.8044,-0.20242 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"none"}]},{"name":"path","d":"m 587.5133,147.20389 c -0.64148,-0.50479 -1.25225,-1.5905 -0.94154,-1.67362 1.13849,-0.30457 3.57027,-1.33874 3.52061,-1.49723 -0.0348,-0.11117 0.15046,-0.35932 0.41172,-0.55146 0.41925,-0.30835 0.51524,-0.32418 0.81801,-0.13486 0.30263,0.18922 0.42491,0.1702 1.03853,-0.1616 l 0.6955,-0.37609 -1.17339,-0.87568 c -3.23324,-2.41295 -5.1774,-5.16333 -5.31846,-7.52399 -0.0374,-0.62576 0.0259,-0.81884 0.28022,-0.8553 0.23368,-0.0335 0.43606,0.1942 0.70097,0.78859 0.52138,1.16988 1.70374,2.89484 2.87192,4.18983 1.01706,1.12748 3.29733,3.10376 3.81763,3.30871 0.20265,0.0798 0.65837,-0.19023 1.49779,-0.88757 2.49196,-2.07022 4.32861,-4.28253 5.27894,-6.35872 0.38096,-0.83226 0.58227,-1.0738 0.89667,-1.07586 0.37339,-0.002 0.39422,0.0807 0.26354,1.05218 -0.32893,2.44528 -2.14079,4.94952 -5.33655,7.37583 -0.55333,0.42011 -1.00608,0.81273 -1.00608,0.8725 0,0.0597 0.27553,0.24941 0.61226,0.42143 0.57294,0.29268 0.63543,0.29683 0.97365,0.0648 0.33835,-0.23212 0.38772,-0.22433 0.77278,0.12187 0.22622,0.2034 0.39025,0.46968 0.36444,0.59172 -0.0297,0.14057 0.50241,0.41486 1.45185,0.74841 2.52422,0.8868 2.33795,0.7575 2.0351,1.41271 -0.14633,0.31657 -0.56255,0.79192 -0.92496,1.05634 -0.5942,0.43356 -0.77943,0.48077 -1.88627,0.48077 -1.0925,0 -1.30899,-0.0533 -1.97068,-0.48438 -0.81274,-0.52961 -1.28327,-1.4348 -1.10269,-2.12134 0.0979,-0.37224 -0.0116,-0.49055 -0.85643,-0.92514 l -0.96871,-0.49831 -0.9222,0.52212 c -0.82431,0.4667 -0.91286,0.57734 -0.83426,1.0425 0.12682,0.75065 -0.29994,1.49559 -1.15344,2.01337 -0.64814,0.3932 -0.90501,0.45118 -1.99869,0.45118 -1.16432,0 -1.30214,-0.0371 -1.90778,-0.51371 z m 2.84547,-0.69016 c 0.5841,-0.31746 1.00415,-0.84718 0.83208,-1.04934 -0.0698,-0.0821 -2.08065,0.58641 -2.61789,0.87029 -0.0462,0.0244 0.0379,0.14587 0.18678,0.26987 0.37521,0.31237 0.91341,0.2818 1.59903,-0.0908 z m 9.64319,0.11387 c 0.38444,-0.19423 0.37961,-0.21002 -0.11966,-0.39015 -0.28617,-0.10324 -0.92977,-0.35132 -1.43023,-0.55128 l -0.90992,-0.36355 0,0.32129 c 0,0.39494 1.10422,1.18611 1.65541,1.18611 0.22206,0 0.58403,-0.0911 0.8044,-0.20242 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"none"}]},{"name":"text","x":"591.4245","y":"176.08263","style":[{"key":"font-style","val":"italic"}],"text":"Zürich"},{"name":"text","x":"607.86322","y":"152.82051","style":[{"key":"font-style","val":"italic"}],"text":"Winterthur"},{"name":"path","d":"m 769.79357,33.786418 -0.81338,7.72776 0.002,5.32916 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.65522 -1.29314,0.65522 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.31042 -0.96986,1.31042 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.65522 c 0,0 -0.64862,0.4247 -0.96986,0.65522 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06083 -0.80304,-7.72776 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"path","d":"m 763.9378,85.579956 c -0.64148,-0.50479 -1.25225,-1.5905 -0.94154,-1.67362 1.13849,-0.30457 3.57027,-1.33874 3.52061,-1.49723 -0.0348,-0.11117 0.15046,-0.35932 0.41172,-0.55146 0.41925,-0.30835 0.51524,-0.32418 0.81801,-0.13486 0.30263,0.18922 0.42491,0.1702 1.03853,-0.1616 l 0.6955,-0.37609 -1.17339,-0.87568 c -3.23324,-2.41295 -5.1774,-5.16333 -5.31846,-7.52399 -0.0374,-0.62576 0.0259,-0.81884 0.28022,-0.8553 0.23368,-0.0335 0.43606,0.1942 0.70097,0.78859 0.52138,1.16988 1.70374,2.89484 2.87192,4.18983 1.01706,1.12748 3.29733,3.10376 3.81763,3.30871 0.20265,0.0798 0.65837,-0.19023 1.49779,-0.88757 2.49196,-2.07022 4.32861,-4.28253 5.27894,-6.35872 0.38096,-0.83226 0.58227,-1.0738 0.89667,-1.07586 0.37339,-0.002 0.39422,0.0807 0.26354,1.05218 -0.32893,2.44528 -2.14079,4.94952 -5.33655,7.37583 -0.55333,0.42011 -1.00608,0.81273 -1.00608,0.8725 0,0.0597 0.27553,0.24941 0.61226,0.42143 0.57294,0.29268 0.63543,0.29683 0.97365,0.0648 0.33835,-0.23212 0.38772,-0.22433 0.77278,0.12187 0.22622,0.2034 0.39025,0.46968 0.36444,0.59172 -0.0297,0.14057 0.50241,0.41486 1.45185,0.74841 2.52422,0.8868 2.33795,0.7575 2.0351,1.41271 -0.14633,0.31657 -0.56255,0.79192 -0.92496,1.05634 -0.5942,0.43356 -0.77943,0.48077 -1.88627,0.48077 -1.0925,0 -1.30899,-0.0533 -1.97068,-0.48438 -0.81274,-0.52961 -1.28327,-1.4348 -1.10269,-2.12134 0.0979,-0.37224 -0.0116,-0.49055 -0.85643,-0.92514 l -0.96871,-0.49831 -0.9222,0.52212 c -0.82431,0.4667 -0.91286,0.57734 -0.83426,1.0425 0.12682,0.75065 -0.29994,1.49559 -1.15344,2.01337 -0.64814,0.3932 -0.90501,0.45118 -1.99869,0.45118 -1.16432,0 -1.30214,-0.0371 -1.90778,-0.51371 z m 2.84547,-0.69016 c 0.5841,-0.31746 1.00415,-0.84718 0.83208,-1.04934 -0.0698,-0.0821 -2.08065,0.58641 -2.61789,0.87029 -0.0462,0.0244 0.0379,0.14587 0.18678,0.26987 0.37521,0.31237 0.91341,0.2818 1.59903,-0.0908 z m 9.64319,0.11387 c 0.38444,-0.19423 0.37961,-0.21002 -0.11966,-0.39015 -0.28617,-0.10324 -0.92977,-0.35132 -1.43023,-0.55128 l -0.90992,-0.36355 0,0.32129 c 0,0.39494 1.10422,1.18611 1.65541,1.18611 0.22206,0 0.58403,-0.0911 0.8044,-0.20242 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"none"}]},{"name":"text","x":"792.19379","y":"47.150997","style":[],"text":"Capitales"},{"name":"text","x":"792.16522","y":"85.698006","style":[],"text":"Grandes batailles"},{"name":"text","x":"710","y":"290","style":[{"key":"font-style","val":"italic"}],"text":"GRISONS"}]},{"id":16,"els":[{"name":"text","x":"20.322353","y":"42.319973","style":[],"text":"Les vallées alpines jouissant déjà d'une certaine forme de "},{"name":"text","x":"20.322353","y":"61.069973","style":[],"text":"démocratie sous l'ancien régime se proclament indépendantes "},{"name":"text","x":"20.322353","y":"79.819977","style":[],"text":"en août 1802. Quand l'hélvétique réagit, c'est le 'stecklikrieg', "},{"name":"text","x":"20.322353","y":"98.569969","style":[],"text":"la guerre des bâtons."},{"name":"path","d":"m 378.38159,228.22608 -0.81338,7.72776 0.002,5.32916 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.65522 -1.29314,0.65522 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.31042 -0.96986,1.31042 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.65522 c 0,0 -0.64862,0.4247 -0.96986,0.65522 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06083 -0.80304,-7.72776 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"path","d":"m 436.23593,237.21044 c -0.64148,-0.50479 -1.25225,-1.5905 -0.94154,-1.67362 1.13849,-0.30457 3.57027,-1.33874 3.52061,-1.49723 -0.0348,-0.11117 0.15046,-0.35932 0.41172,-0.55146 0.41925,-0.30835 0.51524,-0.32418 0.81801,-0.13486 0.30263,0.18922 0.42491,0.1702 1.03853,-0.1616 l 0.6955,-0.37609 -1.17339,-0.87568 c -3.23324,-2.41295 -5.1774,-5.16333 -5.31846,-7.52399 -0.0374,-0.62576 0.0259,-0.81884 0.28022,-0.8553 0.23368,-0.0335 0.43606,0.1942 0.70097,0.78859 0.52138,1.16988 1.70374,2.89484 2.87192,4.18983 1.01706,1.12748 3.29733,3.10376 3.81763,3.30871 0.20265,0.0798 0.65837,-0.19023 1.49779,-0.88757 2.49196,-2.07022 4.32861,-4.28253 5.27894,-6.35872 0.38096,-0.83226 0.58227,-1.0738 0.89667,-1.07586 0.37339,-0.002 0.39422,0.0807 0.26354,1.05218 -0.32893,2.44528 -2.14079,4.94952 -5.33655,7.37583 -0.55333,0.42011 -1.00608,0.81273 -1.00608,0.8725 0,0.0597 0.27553,0.24941 0.61226,0.42143 0.57294,0.29268 0.63543,0.29683 0.97365,0.0648 0.33835,-0.23212 0.38772,-0.22433 0.77278,0.12187 0.22622,0.2034 0.39025,0.46968 0.36444,0.59172 -0.0297,0.14057 0.50241,0.41486 1.45185,0.74841 2.52422,0.8868 2.33795,0.7575 2.0351,1.41271 -0.14633,0.31657 -0.56255,0.79192 -0.92496,1.05634 -0.5942,0.43356 -0.77943,0.48077 -1.88627,0.48077 -1.0925,0 -1.30899,-0.0533 -1.97068,-0.48438 -0.81274,-0.52961 -1.28327,-1.4348 -1.10269,-2.12134 0.0979,-0.37224 -0.0116,-0.49055 -0.85643,-0.92514 l -0.96871,-0.49831 -0.9222,0.52212 c -0.82431,0.4667 -0.91286,0.57734 -0.83426,1.0425 0.12682,0.75065 -0.29994,1.49559 -1.15344,2.01337 -0.64814,0.3932 -0.90501,0.45118 -1.99869,0.45118 -1.16432,0 -1.30214,-0.0371 -1.90778,-0.51371 z m 2.84547,-0.69016 c 0.5841,-0.31746 1.00415,-0.84718 0.83208,-1.04934 -0.0698,-0.0821 -2.08065,0.58641 -2.61789,0.87029 -0.0462,0.0244 0.0379,0.14587 0.18678,0.26987 0.37521,0.31237 0.91341,0.2818 1.59903,-0.0908 z m 9.64319,0.11387 c 0.38444,-0.19423 0.37961,-0.21002 -0.11966,-0.39015 -0.28617,-0.10324 -0.92977,-0.35132 -1.43023,-0.55128 l -0.90992,-0.36355 0,0.32129 c 0,0.39494 1.10422,1.18611 1.65541,1.18611 0.22206,0 0.58403,-0.0911 0.8044,-0.20242 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"none"}]},{"name":"text","x":"459.82086","y":"236.59767","style":[{"key":"font-style","val":"italic"}],"text":"Col du Rengg"},{"name":"text","x":"322.7056","y":"240.8786","style":[{"key":"font-style","val":"italic"}],"text":"Berne"},{"name":"text","x":"23.167315","y":"128.31566","style":[],"text":"Le 28 août, les insurgés gagnent la bataille "},{"name":"text","x":"23.167315","y":"147.06566","style":[],"text":"du col du Rengg et menacent la capitale. "},{"name":"rect","x":"24.755955","y":"175.21367","width":"39.88604","height":"24.216524","style":[{"key":"fill","val":"#b8d1d9"}]},{"name":"text","x":"75.041954","y":"191.27032","style":[],"text":"Démocraties prérépublicaines"}]},{"id":17,"els":[{"name":"path","d":"m 827.69848,84.483088 c -0.64148,-0.50479 -1.25225,-1.5905 -0.94154,-1.67362 1.13849,-0.30457 3.57027,-1.33874 3.52061,-1.49723 -0.0348,-0.11117 0.15046,-0.35932 0.41172,-0.55146 0.41925,-0.30835 0.51524,-0.32418 0.81801,-0.13486 0.30263,0.18922 0.42491,0.1702 1.03853,-0.1616 l 0.6955,-0.37609 -1.17339,-0.87568 c -3.23324,-2.41295 -5.1774,-5.16333 -5.31846,-7.52399 -0.0374,-0.62576 0.0259,-0.81884 0.28022,-0.8553 0.23368,-0.0335 0.43606,0.1942 0.70097,0.78859 0.52138,1.16988 1.70374,2.89484 2.87192,4.18983 1.01706,1.12748 3.29733,3.10376 3.81763,3.30871 0.20265,0.0798 0.65837,-0.19023 1.49779,-0.88757 2.49196,-2.07022 4.32861,-4.28253 5.27894,-6.35872 0.38096,-0.83226 0.58227,-1.0738 0.89667,-1.07586 0.37339,-0.002 0.39422,0.0807 0.26354,1.05218 -0.32893,2.44528 -2.14079,4.94952 -5.33655,7.37583 -0.55333,0.42011 -1.00608,0.81273 -1.00608,0.8725 0,0.0597 0.27553,0.24941 0.61226,0.42143 0.57294,0.29268 0.63543,0.29683 0.97365,0.0648 0.33835,-0.23212 0.38772,-0.22433 0.77278,0.12187 0.22622,0.2034 0.39025,0.46968 0.36444,0.59172 -0.0297,0.14057 0.50241,0.41486 1.45185,0.74841 2.52422,0.8868 2.33795,0.7575 2.0351,1.41271 -0.14633,0.31657 -0.56255,0.79192 -0.92496,1.05634 -0.5942,0.43356 -0.77943,0.48077 -1.88627,0.48077 -1.0925,0 -1.30899,-0.0533 -1.97068,-0.48438 -0.81274,-0.52961 -1.28327,-1.4348 -1.10269,-2.12134 0.0979,-0.37224 -0.0116,-0.49055 -0.85643,-0.92514 l -0.96871,-0.49831 -0.9222,0.52212 c -0.82431,0.4667 -0.91286,0.57734 -0.83426,1.0425 0.12682,0.75065 -0.29994,1.49559 -1.15344,2.01337 -0.64814,0.3932 -0.90501,0.45118 -1.99869,0.45118 -1.16432,0 -1.30214,-0.0371 -1.90778,-0.51371 z m 2.84547,-0.69016 c 0.5841,-0.31746 1.00415,-0.84718 0.83208,-1.04934 -0.0698,-0.0821 -2.08065,0.58641 -2.61789,0.87029 -0.0462,0.0244 0.0379,0.14587 0.18678,0.26987 0.37521,0.31237 0.91341,0.2818 1.59903,-0.0908 z m 9.64319,0.11387 c 0.38444,-0.19423 0.37961,-0.21002 -0.11966,-0.39015 -0.28617,-0.10324 -0.92977,-0.35132 -1.43023,-0.55128 l -0.90992,-0.36355 0,0.32129 c 0,0.39494 1.10422,1.18611 1.65541,1.18611 0.22206,0 0.58403,-0.0911 0.8044,-0.20242 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"none"}]},{"name":"rect","x":"900","y":"35","width":"20","height":"15","style":[{"key":"fill","val":"#bfe3cb"}]},{"name":"text","x":"810.68378","y":"100.74074","style":[{"key":"font-style","val":"italic"}],"text":"Faoug"},{"name":"path","d":"m 531.24656,255.21092 -0.81338,7.72776 0.002,5.32916 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.65522 -1.29314,0.65522 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.31042 -0.96986,1.31042 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.65522 c 0,0 -0.64862,0.4247 -0.96986,0.65522 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06083 -0.80304,-7.72776 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"text","x":"548.604","y":"269.25925","style":[{"key":"font-style","val":"italic"}],"text":"Lausanne"},{"name":"path","d":"m 23.52389,120.0175 c -0.64148,-0.50479 -1.25225,-1.5905 -0.94154,-1.67362 1.13849,-0.30457 3.57027,-1.33874 3.52061,-1.49723 -0.0348,-0.11117 0.15046,-0.35932 0.41172,-0.55146 0.41925,-0.30835 0.51524,-0.32418 0.81801,-0.13486 0.30263,0.18922 0.42491,0.1702 1.03853,-0.1616 l 0.6955,-0.37609 -1.17339,-0.87568 c -3.23324,-2.41295 -5.1774,-5.16333 -5.31846,-7.52399 -0.0374,-0.62576 0.0259,-0.81884 0.28022,-0.8553 0.23368,-0.0335 0.43606,0.1942 0.70097,0.78859 0.52138,1.16988 1.70374,2.89484 2.87192,4.18983 1.01706,1.12748 3.29733,3.10376 3.81763,3.30871 0.20265,0.0798 0.65837,-0.19023 1.49779,-0.88757 2.49196,-2.07022 4.32861,-4.28253 5.27894,-6.35872 0.38096,-0.83226 0.58227,-1.0738 0.89667,-1.07586 0.37339,-0.002 0.39422,0.0807 0.26354,1.05218 -0.32893,2.44528 -2.14079,4.94952 -5.33655,7.37583 -0.55333,0.42011 -1.00608,0.81273 -1.00608,0.8725 0,0.0597 0.27553,0.24941 0.61226,0.42143 0.57294,0.29268 0.63543,0.29683 0.97365,0.0648 0.33835,-0.23212 0.38772,-0.22433 0.77278,0.12187 0.22622,0.2034 0.39025,0.46968 0.36444,0.59172 -0.0297,0.14057 0.50241,0.41486 1.45185,0.74841 2.52422,0.8868 2.33795,0.7575 2.0351,1.41271 -0.14633,0.31657 -0.56255,0.79192 -0.92496,1.05634 -0.5942,0.43356 -0.77943,0.48077 -1.88627,0.48077 -1.0925,0 -1.30899,-0.0533 -1.97068,-0.48438 -0.81274,-0.52961 -1.28327,-1.4348 -1.10269,-2.12134 0.0979,-0.37224 -0.0116,-0.49055 -0.85643,-0.92514 l -0.96871,-0.49831 -0.9222,0.52212 c -0.82431,0.4667 -0.91286,0.57734 -0.83426,1.0425 0.12682,0.75065 -0.29994,1.49559 -1.15344,2.01337 -0.64814,0.3932 -0.90501,0.45118 -1.99869,0.45118 -1.16432,0 -1.30214,-0.0371 -1.90778,-0.51371 z m 2.84547,-0.69016 c 0.5841,-0.31746 1.00415,-0.84718 0.83208,-1.04934 -0.0698,-0.0821 -2.08065,0.58641 -2.61789,0.87029 -0.0462,0.0244 0.0379,0.14587 0.18678,0.26987 0.37521,0.31237 0.91341,0.2818 1.59903,-0.0908 z m 9.64319,0.11387 c 0.38444,-0.19423 0.37961,-0.21002 -0.11966,-0.39015 -0.28617,-0.10324 -0.92977,-0.35132 -1.43023,-0.55128 l -0.90992,-0.36355 0,0.32129 c 0,0.39494 1.10422,1.18611 1.65541,1.18611 0.22206,0 0.58403,-0.0911 0.8044,-0.20242 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"none"}]},{"name":"text","x":"19.854507","y":"41.007275","style":[],"text":"Le gouvernement de la République helvétique s'enfuit à Lausanne. "},{"name":"text","x":"19.854507","y":"59.757275","style":[],"text":"Alors que les rebelles sont sur le point de jeter le gouvernement "},{"name":"text","x":"19.854507","y":"78.507271","style":[],"text":"au lac, Bonaparte invite les bélligérents à une \"consulta\" à Paris."},{"name":"text","x":"57.912704","y":"112.01455","style":[],"text":"Dernière bataille de la République helvétique "},{"name":"text","x":"57.912704","y":"130.76454","style":[],"text":"le 3 Octobre 1802"}]},{"id":18,"els":[{"name":"text","x":"20.183664","y":"41.551186","style":[],"text":"L'acte de médiation de Bonaparte réstaure le fédéralisme suisse. "},{"name":"text","x":"20.183664","y":"60.301186","style":[],"text":"Six pays anciennement sujets ou alliés deviennent des cantons à "},{"name":"text","x":"20.183664","y":"79.051186","style":[],"text":"part entière. Berne perd définitivement l'Argovie et le pays de Vaud."},{"name":"text","x":"163.28894","y":"297.23743","style":[{"key":"font-style","val":"italic"}],"text":"Vaud"},{"name":"text","x":"462.13675","y":"151.453","style":[{"key":"font-style","val":"italic"}],"text":"Argovie"},{"name":"text","x":"624.2735","y":"120.68376","style":[{"key":"font-style","val":"italic"}],"text":"Thurgovie"},{"name":"text","x":"667.84229","y":"195.00047","style":[{"key":"font-style","val":"italic"}],"text":"St. Gall"},{"name":"text","x":"720","y":"290","style":[{"key":"font-style","val":"italic"}],"text":"Grisons"},{"name":"text","x":"572.849","y":"354.302","style":[{"key":"font-style","val":"italic"}],"text":"Tessin"},{"name":"path","d":"m 580,300 c 15,6.61323 30,5.4505 45,0 l 0,-5 10,-1.90883 0,1.90883 15,5 c -6.84174,7.06612 -3.56425,13.59965 2.24359,20 L 655,320 c 2.65332,6.56646 6.75259,11.89352 5,22.23647 L 655,355 l 2.22935,15 14.95726,10","style":[{"key":"fill","val":"none"},{"key":"stroke","val":"#ffffff"},{"key":"stroke-width","val":"1"},{"key":"stroke-dasharray","val":"2,1"}]},{"name":"path","d":"m 687.5,240 2.5,0 c 10,1.66667 22.31906,-0.14526 30,5 l 5,0 c 3.63372,-0.39596 5.6301,-4.61238 7.90598,-8.17664 -0.25759,-3.94112 4.99966,-7.88224 9.25926,-11.82336 -5.81078,-4.25392 -8.9068,-9.32226 -9.97151,-15 l 0,0 0.17807,0","style":[{"key":"fill","val":"none"},{"key":"stroke","val":"#ffffff"},{"key":"stroke-width","val":"1"},{"key":"stroke-dasharray","val":"2, 1"}]},{"name":"path","d":"m 629.79846,151.98662 11.33183,-10.07275 c 9.70279,-1.93061 9.54053,-3.86122 5.54002,-5.79183 -8.78777,-3.55507 -4.22165,-5.07027 5.54001,-5.79183 6.29546,1.2849 12.59093,2.36676 18.88639,-2.26636 6.66847,3.24945 31.0968,12.38908 26.9446,-1.2591 -10.12564,-1.31077 -4.84278,-2.29018 0.25182,-3.27364 4.63739,0.29924 9.63412,0.32897 9.06547,4.53274 2.25017,1.56024 2.90133,5.91875 7.55456,3.27364 l 9.06547,-5.28819 3.02183,1.76273 c -1.41496,6.07868 12.80907,-1.07563 19.39003,-1.76273","style":[{"key":"fill","val":"none"},{"key":"stroke","val":"#ffffff"},{"key":"stroke-width","val":"1"},{"key":"stroke-dasharray","val":"2, 1"}]},{"name":"rect","x":"20","y":"110","width":"50","height":"30","style":[{"key":"fill","val":"#6e9eab"}]},{"name":"text","x":"80.740738","y":"130.74074","style":[],"text":"Nouveaux cantons"}]},{"id":19,"els":[{"name":"path","d":"m 748.97639,265.90629 -1.11535,-1.13646 2.06154,-2.04944 2.06153,-2.04945 8.36334,0 8.36333,0 2.05396,2.06608 2.05396,2.06608 -1.14102,1.11982 c -0.62756,0.6159 -1.26004,1.11982 -1.40553,1.11982 -0.14548,0 -0.91344,-0.65709 -1.70657,-1.4602 l -1.44207,-1.46021 -6.78817,0 -6.78817,0 -1.44206,1.46021 c -0.79314,0.80311 -1.57061,1.4602 -1.72772,1.4602 -0.15711,0 -0.78756,-0.5114 -1.401,-1.13645 z m 0.92956,-11.54928 -2.05396,-2.06608 1.14102,-1.11982 c 0.62755,-0.6159 1.26004,-1.11982 1.40552,-1.11982 0.14548,0 0.91344,0.65709 1.70658,1.4602 l 1.44206,1.4602 6.78817,0 6.78817,0 1.44207,-1.4602 c 0.79313,-0.80311 1.56109,-1.4602 1.70657,-1.4602 0.14549,0 0.77797,0.50392 1.40553,1.11982 l 1.14102,1.11982 -2.05396,2.06608 -2.05396,2.06607 -8.37544,0 -8.37543,0 -2.05396,-2.06607 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"none"}]},{"name":"text","x":"696.58124","y":"293.4473","style":[{"key":"font-style","val":"italic"}],"text":"Col du Simplon"},{"name":"text","x":"438.74643","y":"321.00162","style":[],"text":"RÉPUBLIQUE RHODANIENNE"},{"name":"text","x":"19.854507","y":"42.014549","style":[],"text":"Ayant quitté la République hélvétique avant la médiation, le Valais ne fait pas partie de la nouvelle confédération. "},{"name":"text","x":"19.854507","y":"60.764549","style":[],"text":"La République rhôdaniènne est un pays indépendant sous protectorat français. "},{"name":"text","x":"19.854507","y":"98.264549","style":[],"text":"La route du col du Simplon, un projet français, ouvre le 9 octobre 1805. Napoléon déclare la guerre à l'Autriche un mois plus tard."}]},{"id":20,"els":[{"name":"rect","x":"10","y":"20","width":"580","height":"70","style":[{"key":"fill","val":"#ffffff"}]},{"name":"text","x":"20.368931","y":"42.798561","style":[],"text":"Victorieux en Italie grâce au passage facilité par le col, Napoléon étend son empire. "},{"name":"text","x":"20.368931","y":"61.548561","style":[],"text":"La république rhodannienne en fait partie en tant que département du Simplon à "},{"name":"text","x":"20.368931","y":"80.298561","style":[],"text":"partir du mois de novembre 1810."},{"name":"text","x":"204.81813","y":"366.68719","style":[{"key":"font-style","val":"italic"}],"text":"EMPIRE FRANCAIS"},{"name":"text","x":"534.24731","y":"276.97818","style":[{"key":"font-style","val":"italic"}],"text":"Département du Simplon"}]},{"id":21,"els":[{"name":"rect","x":"9.9440594","y":"19.944059","width":"560.11188","height":"70.973663","style":[{"key":"fill","val":"#ffffff"}]},{"name":"text","x":"19.457802","y":"41.811634","style":[],"text":"L'arrivée des troupes autrichiennes en décembre 1814 marque la fin de l'empire. "},{"name":"text","x":"19.457802","y":"60.561634","style":[],"text":"Le Valais et Genève redeviennent indépendants. "},{"name":"text","x":"19.457802","y":"79.31163","style":[],"text":"La Savoie est rendue au Royaume de Sardaigne."}]},{"id":22,"els":[{"name":"rect","x":"10.124149","y":"20.124149","width":"439.75171","height":"140.3215","style":[{"key":"fill","val":"#ffffff"}]},{"name":"path","d":"m 521.81636,365.92317 -0.81338,7.72776 0.002,5.32916 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.65522 -1.29314,0.65522 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.31042 -0.96986,1.31042 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.65522 c 0,0 -0.64862,0.4247 -0.96986,0.65522 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06083 -0.80304,-7.72776 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"path","d":"m 591.81636,165.92317 -0.81338,7.72776 0.002,5.32916 -0.96469,-1.3099 -0.96984,1.3104 -0.64657,-0.6552 -0.64657,0.6552 0,-3.27599 -1.29314,-0.65522 -1.29314,0.65522 0,3.27599 -0.64657,-0.6552 -0.64657,0.6552 0,1.96561 14.54781,0 0,-3.27601 0,-1.31039 -0.96985,-1.31042 -0.96986,1.31042 0,1.31039 -0.64657,-0.65519 -0.64656,0.65519 -0.64658,-0.65519 0,-1.3104 -0.96985,-0.65522 c 0,0 -0.64862,0.4247 -0.96986,0.65522 -0.002,0.002 -0.005,0.005 -0.008,0.007 l 0,-2.06083 -0.80304,-7.72776 z","style":[{"key":"fill","val":"#000000"},{"key":"stroke","val":"#000000"},{"key":"stroke-width","val":"0.5"}]},{"name":"text","x":"492.849","y":"400","style":[{"key":"font-style","val":"italic"}],"text":"Carouge"},{"name":"text","x":"520.65527","y":"181.50996","style":[{"key":"font-style","val":"italic"}],"text":"Versoix"},{"name":"rect","x":"20","y":"120","width":"50","height":"30","style":[{"key":"fill","val":"#e7bd92"}]},{"name":"text","x":"90","y":"140","style":[],"text":"Acquisitions genevoises"},{"name":"text","x":"19.927254","y":"41.007275","style":[],"text":"Au cours des négociations d'après-guerre, Genève obtient une "},{"name":"text","x":"19.927254","y":"59.757275","style":[],"text":"partie du pays de Gex et quelques communes savoyardes dont "},{"name":"text","x":"19.927254","y":"78.507271","style":[],"text":"la ville de Carouge. Elle réalise ainsi son unité terrotoriale, une "},{"name":"text","x":"19.927254","y":"97.257271","style":[],"text":"condition en vue du \"cantonnement\"."}]},{"id":23,"els":[{"name":"text","x":"21.869057","y":"42.876331","style":[],"text":"En septembre 1814, Genève, le Valais et la principauté de Neuchâtel"},{"name":"text","x":"21.869057","y":"61.626331","style":[],"text":"deviennent cantons suisses. L'évêché de Bâle, république indépendante "},{"name":"text","x":"21.869057","y":"80.376328","style":[],"text":"puis intégré à la France, est donné à Berne en compensation pour la "},{"name":"text","x":"21.869057","y":"99.126328","style":[],"text":"perte de l'Argovie et de Vaud. Une décision qui sera à l'origine de la "},{"name":"text","x":"21.869057","y":"117.87633","style":[],"text":"\"question jurassienne\"."},{"name":"rect","x":"22.01631","y":"135.83681","width":"50.122723","height":"29.915268","style":[{"key":"fill","val":"#6e9eab"}]},{"name":"rect","x":"21.304058","y":"195.83681","width":"50.122723","height":"29.915268","style":[{"key":"fill","val":"#82c997"}]},{"name":"rect","x":"21.332548","y":"260.80835","width":"50.122723","height":"29.915268","style":[{"key":"fill","val":"#bfe3cb"}]},{"name":"text","x":"89.971512","y":"156.43875","style":[],"text":"Nouveaux cantons"},{"name":"text","x":"90","y":"281.453","style":[],"text":"Reste du canton de Berne"},{"name":"text","x":"90.028488","y":"190.71225","style":[],"text":"( > 1792)"},{"name":"text","x":"90.028488","y":"209.46225","style":[],"text":"(1792 - 1793)"},{"name":"text","x":"90.028488","y":"228.21225","style":[],"text":"(1793 - 1815)"},{"name":"text","x":"90.028488","y":"246.96225","style":[],"text":"(1815 > )        "},{"name":"text","x":"200.05698","y":"193.4473","style":[],"text":"Évêché de Bâle"},{"name":"text","x":"200.05698","y":"212.1973","style":[],"text":"République Rauracienne"},{"name":"text","x":"200.05698","y":"230.9473","style":[],"text":"Département du Mont Terrible"},{"name":"text","x":"200.05698","y":"249.6973","style":[],"text":"Jura bernois"}]},{"id":24,"els":[{"name":"text","x":"22.877493","y":"41.396011","style":[],"text":"Avec un pacte fédéral renouvellé en 1814, la confédération obtient ses frontières actuelles."},{"name":"text","x":"22.877493","y":"60.146011","style":[],"text":"Elles auraient pu être différentes si les Grisons avaient obtenu l'ancien baillage de la Valteline "},{"name":"text","x":"22.877493","y":"78.896011","style":[],"text":"ou si Genève avait gardé le reste du département du Léman."},{"name":"text","x":"164.8853","y":"389.87781","style":[{"key":"font-style","val":"italic"},{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"}],"text":"Ancien département "},{"name":"text","x":"162.80522","y":"408.62781","style":[{"key":"font-style","val":"italic"},{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"}],"text":"du Léman"},{"name":"text","x":"760","y":"380","style":[{"key":"font-style","val":"italic"}],"text":"Valteline"},{"name":"text","x":"378.5755","y":"259.94302","style":[],"text":"CONFÉDÉRATION HELVÉTIQUE"}]},{"id":25,"els":[{"name":"rect","x":"10","y":"20","width":"610","height":"70","style":[{"key":"fill","val":"#ffffff"}]},{"name":"text","x":"21.723564","y":"41.723564","style":[],"text":"La France qui n'a plus accès au Léman, propose en 1858 au roi de Sardaigne d'échanger"},{"name":"text","x":"21.723564","y":"60.473564","style":[],"text":"la Savoie contre son aide en Italie. La maison de Savoie se débarrasse ainsi du pays"},{"name":"text","x":"21.723564","y":"79.223564","style":[],"text":"auquel elle doit son nom pour devenir rois de l'Italie unifiée."},{"name":"text","x":"500","y":"380","style":[{"key":"font-style","val":"italic"}],"text":"ROYAUME DE SARDAIGNE"},{"name":"text","x":"457.06552","y":"284.9003","style":[{"key":"font-style","val":"italic"}],"text":"Savoie"}]},{"id":26,"els":[{"name":"rect","x":"10","y":"20","width":"420","height":"130","style":[{"key":"fill","val":"#ffffff"}]},{"name":"text","x":"20.05698","y":"42.342545","style":[],"text":"Le Traité d'annexion de la Savoie est signé le 24 mars 1860. "},{"name":"text","x":"20.05698","y":"61.092548","style":[],"text":"Les savoyards sont priés de le valider par référundum un "},{"name":"text","x":"20.05698","y":"79.842552","style":[],"text":"mois plus tard. Le vote, sous le regard de l'armée française, "},{"name":"text","x":"20.05698","y":"98.592552","style":[],"text":"concerne l'annexion ou non à la France. Les alternatives "},{"name":"text","x":"20.05698","y":"117.34255","style":[],"text":"qu'auraient été l'indépendance, le rattachement à l'Italie ou "},{"name":"text","x":"20.05698","y":"136.09254","style":[],"text":"à la Suisse, ne font pas partie des choix possibles"},{"name":"path","d":"m 495,225 c 5.06194,-1.48227 8.73051,2.26057 10,15 -0.45597,10.95461 3.83801,14.44504 10,15 16.30175,1.86062 15.31465,8.52371 15,15 11.66667,9.07323 23.33333,7.05305 35,5 14.16355,-5.40577 24.53473,2.46178 35,10 27.98503,20.64048 40,-5 40,-15 l 15,-10 c 3.88376,-11.67283 11.40088,-18.98562 20,-25 5,-10 25,-5 15,10 0,5 3.37576,18.12222 25,15 11.72215,2.04519 18.43179,7.53648 15,20 10.89351,4.3472 16.70841,-6.54143 25,-10 l 0,0","style":[{"key":"fill","val":"none"},{"key":"stroke","val":"#ffffff"},{"key":"stroke-width","val":"1"},{"key":"stroke-dasharray","val":"2, 1"}]},{"name":"text","x":"654.5564","y":"185.03638","style":[{"key":"font-style","val":"italic"},{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"}],"text":"Département de "},{"name":"text","x":"652.47632","y":"203.78638","style":[{"key":"font-style","val":"italic"},{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"}],"text":"la Haute Savoie"},{"name":"text","x":"671.02319","y":"343.02182","style":[{"key":"font-style","val":"italic"},{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"}],"text":"Département de "},{"name":"text","x":"668.94312","y":"361.77182","style":[{"key":"font-style","val":"italic"},{"key":"text-align","val":"center"},{"key":"text-anchor","val":"middle"}],"text":"la Savoie"},{"name":"text","x":"182.87749","y":"305.81195","style":[{"key":"font-style","val":"italic"}],"text":"FRANCE"}]},{"id":27,"els":[{"name":"text","x":"297.26379","y":"94.720665","style":[{"key":"font-style","val":"italic"}],"text":"SUISSE"},{"name":"text","x":"178.4892","y":"94.824013","style":[{"key":"font-style","val":"italic"}],"text":"FRANCE"},{"name":"path","d":"m 268.87464,283.47578 45.58405,25.99715","style":[{"key":"fill","val":"none"},{"key":"stroke","val":"#ffffff"},{"key":"stroke-width","val":"1"},{"key":"stroke-dasharray","val":"2, 1"}]},{"name":"path","d":"m 341.88034,267.80627 -24.57265,-9.61539 -7.47863,11.03989 25.99715,10.68376","style":[{"key":"fill","val":"none"},{"key":"stroke","val":"#ffffff"},{"key":"stroke-width","val":"1"},{"key":"stroke-dasharray","val":"2, 1"}]},{"name":"path","d":"m 144.58689,439.45869 c -16.57578,3.8293 -38.91615,-2.71765 -47.008542,16.38177 -14.912183,17.13003 -28.27895,11.07883 -41.310542,0 l -14.245014,10.68376 -1.424501,32.05128","style":[{"key":"fill","val":"none"},{"key":"stroke","val":"#ffffff"},{"key":"stroke-width","val":"1"},{"key":"stroke-dasharray","val":"2, 1"}]},{"name":"path","d":"m 854.70086,233.61823 17.80626,17.80627 c 1.62002,8.77139 -12.32983,18.58078 14.95727,25.64103 19.27926,-0.41866 7.59734,24.92877 84.04558,102.5641 l 15.66952,13.53276 13.53281,-5.698","style":[{"key":"fill","val":"none"},{"key":"stroke","val":"#ffffff"},{"key":"stroke-width","val":"1"},{"key":"stroke-dasharray","val":"2, 1"}]},{"name":"path","d":"m 873.21937,-1.424502 c -10.13651,9.0218423 -21.5082,18.043685 -20.65527,27.065527 l -45.58404,9.259259 -7.12251,56.980057 29.91453,0 c 16.14435,-6.515688 30.15195,10.836579 48.43305,7.834758 l -30.62678,24.928771 c -22.79201,-8.547 -33.23837,-5.69801 -31.33903,8.54701 4.2352,12.22535 11.07516,21.10171 28.49003,16.38177 11.91827,-2.99158 21.98736,-9.68149 32.05128,-16.38177 l 57.69231,25.64103 c 6.42186,28.33794 17.60634,42.98338 39.17378,27.77778 l 27.06558,-22.79203","style":[{"key":"fill","val":"none"},{"key":"stroke","val":"#ffffff"},{"key":"stroke-width","val":"1"},{"key":"stroke-dasharray","val":"2, 1"}]},{"name":"text","x":"108.78567","y":"272.35596","style":[{"key":"font-style","val":"italic"}],"text":"Ain"},{"name":"text","x":"203.46947","y":"393.22888","style":[{"key":"font-style","val":"italic"}],"text":"Genève"},{"name":"text","x":"547.9574","y":"320.70511","style":[{"key":"font-style","val":"italic"}],"text":"Haute Savoie"},{"name":"text","x":"578.17566","y":"107.1629","style":[{"key":"font-style","val":"italic"}],"text":"Vaud"},{"name":"text","x":"855.17615","y":"382.14886","style":[{"key":"font-style","val":"italic"}],"text":"Valais"},{"name":"text","x":"905.53986","y":"68.886467","style":[{"key":"font-style","val":"italic"}],"text":"Fribourg"}]}]

},{}],2:[function(require,module,exports){
module.exports=[{"id":"1","nom":"France","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"0","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"10","clSc10":"10","clSc11":"10","clSc12":"10","clSc13":"10","clSc14":"0","clSc15":"10","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"10","clSc22":"10","clSc23":"10","clSc24":"0","clSc25":"0","clSc26":"10","clSc27":"10","clSc28":"10","chemin":"m 83.6217,34.598 0.8905,0.4307 0.251,-0.0471 0.66,-0.1223 1.1178,-0.4415 0.9305,-0.139 0.5324,0.3381 0.3008,0.191 0.5864,0.7618 0.1645,0.7953 0.2608,0.6605 0.475,0.2678 1.781,0.0877 1.3125,0.245 0.3473,0.2219 0.449,1.4683 0.2446,0.2077 0.3268,-0.1731 0.3235,-0.2418 0.449,-0.0384 0.7704,0.093 1.015,0.0292 1.0463,0.1618 1.4456,0.8294 -0.0552,0.2737 -0.2824,0.4804 -0.0985,0.3836 0.2489,0.1542 0.3819,0.396 -0.092,0.4577 -0.3722,0.3208 -0.1493,0.2646 0.0022,0.172 0.1363,0.1428 0.2965,0.1256 2.1344,0.1693 1.953,-0.1693 1.232,-0.4675 0.21,-0.4923 0.349,-0.5562 0.734,-0.4652 0.507,-0.1564 0.464,0.1915 -0.781,1.9536 0.57,0.4994 0.085,0.7466 0.204,0.6535 0.698,-0.0124 0.846,0.1206 0.6,0.2419 0.699,0.3884 1.007,0.3571 0.707,0.1255 0.256,0.2986 0.572,0.3452 0.899,0.7239 0.805,0.4831 0.388,-0.0016 0.75,-0.1905 1.112,-0.1217 0.879,0.0103 0.373,0.3679 0.864,0.1699 0.305,0.1352 0.339,0.2537 0.575,0.1018 0.695,-0.1018 0.507,-0.3386 0.678,-0.1521 0.677,0.0509 0.389,0.1861 0.743,0.2748 0.42,-0.06 0.84,0.1693 0.844,0.534 0.355,0.5372 0.093,0.2938 0.365,0.3192 1.416,1.4434 0.453,0.0714 0.492,-0.2191 0.319,-0.3105 0.462,-0.0617 0.743,0.1428 0.479,0.1634 0.229,0.6254 0.161,0.119 0.322,-0.1347 0.572,-0.0297 0.914,0.1542 1.258,-0.1764 1.006,-0.2608 0.514,0.0098 0.83,0.7293 0.947,0.2726 2.086,0.2202 2.238,0.343 0.88,0.2776 0.601,0.1363 0.06,0.9657 -0.18,0.1455 -2.23,1.9363 -0.94,0.6925 -0.478,0.9884 -0.329,1.5159 -0.659,1.4402 -0.987,1.3655 -0.359,1.0247 0.27,0.6839 -0.169,1.0739 -0.606,1.4629 -0.102,1.1052 0.399,0.7461 0.557,0.1531 -0.135,0.0505 -0.193,0.0393 -0.006,0.0016 -0.39,0.0995 -0.266,0.1002 -0.06,0.0336 0.031,0.0123 -0.031,-0.0123 -0.423,0.2344 0.026,0.0074 0.048,0.0246 -0.049,0.0699 -0.007,0.1807 -0.018,-0.0026 -0.064,0.0234 -0.015,0.035 0.024,0.0446 0.066,0.0633 -0.004,0.1122 -0.007,0.0066 -0.169,0.1036 -0.144,-0.0143 -0.094,-0.0408 -0.05,-0.0216 -0.172,-0.0406 -0.129,0.0257 0.001,0.0682 0.056,0.0684 0.037,0.0269 0.054,0.0518 0.018,0.0624 -0.036,0.1037 -0.061,0.0543 -0.157,0.1398 -0.201,0.0548 -0.107,0.0293 -0.461,-0.0134 -0.309,-0.0089 -0.293,0.0418 -0.419,0.1237 -0.075,0.0103 -0.085,-0.0246 -0.045,-0.0401 -0.031,-0.0398 -0.046,-0.0249 -0.325,-0.0693 -0.24,-0.0979 -0.063,-0.181 0.201,-0.3143 -0.301,0.0206 -0.127,-0.0138 0,0 -0.021,-0.0022 -0.144,-0.0564 -0.261,-0.0369 -0.552,0.0652 -0.288,-0.0283 -0.1,-0.0524 -0.101,-0.0175 -0.1,0.0175 -0.098,0.0524 -0.206,0.0426 0.027,0.1234 0.115,0.1532 0.053,0.132 -0.083,0.0933 -0.165,0.0953 -0.18,0.0705 -0.146,0.022 -0.145,0.0221 -0.017,0.2089 -0.285,0.114 -0.164,0.1454 -0.137,0.1732 -0.055,0.1417 1.318,-0.0881 0.204,-0.0668 0.165,0.0914 0.166,0.1025 0.115,0.1125 -0.086,0.1216 -0.104,0.0453 -0.113,0.0212 -0.116,0.0461 -0.161,0.1485 -0.06,0.0161 -0.101,0.0086 -0.208,0.146 -0.071,0.2273 0.045,0.2748 -0.753,0.3759 -0.321,0.2259 -0.211,0.237 -0.025,0.0155 -0.701,0.4426 -0.332,0.079 0.013,0.1895 -0.159,0.0561 -0.041,0.0195 -0.041,0.0704 -0.278,0.0682 -0.105,0.0701 -0.149,0.1761 0.133,0.2055 -0.253,0.2499 -0.739,0.3851 -1.192,0.2565 -0.537,0.213 -0.165,0.3888 0.046,0.1002 0.148,0.1929 0.035,0.1226 -0.018,0.1534 -0.041,0.0693 -0.021,0.0366 -0.077,0.0954 -0.174,0.3604 -0.016,0.0538 0.031,0.0624 0.058,0.0544 0.083,0.0624 0.004,0.187 -0.042,0.0919 -0.125,0.1076 -0.117,0.0599 -0.367,0.1339 -0.292,0.2265 -0.11,0.0638 -0.794,0.2998 -1.49,0.939 -0.148,0.1345 0.034,0.1461 0.182,0.1406 0.086,0.0661 -0.392,0.3412 -0.386,0.4569 -0.126,0.0939 -0.043,0.0676 0,0.0567 0.024,0.0521 0.026,0.0458 0.008,0.034 0,0.0845 0.023,0.075 -0.02,0.073 -0.128,0.0842 0.053,0.0225 -0.46,0.3451 -0.079,0.0811 -0.081,0.1006 -0.378,0.2772 -0.045,0.0481 -0.141,0.1906 -0.043,0.0332 -0.058,0.0341 -0.096,0.0449 -0.074,0.0568 -0.06,0.0635 -0.073,0.0618 -0.385,0.2353 -0.1,0.0396 -0.113,0.0252 -0.245,0.0248 -1.208,-0.0426 0.372,0.0131 0.858,1.7988 -0.181,0.1376 -0.011,0.4991 0.165,0.8827 0.014,0.3524 0.002,0.0647 -0.096,0.3846 -0.358,0.7353 -0.084,0.2299 -0.087,0.1527 -0.003,0.0249 -0.003,0.0256 -0.003,0.0263 -0.003,0.0268 -0.004,0.0274 -0.003,0.0278 -0.004,0.0283 -0.005,0.0285 -0.004,0.0289 -0.005,0.0291 -0.005,0.0292 -0.006,0.0294 -0.006,0.0294 -0.006,0.0294 -0.007,0.0293 -0.007,0.0291 -0.008,0.029 -0.009,0.0287 -0.009,0.0284 -0.009,0.028 -0.01,0.0276 -0.011,0.0271 -0.011,0.0265 -0.012,0.0259 -0.013,0.0253 -0.014,0.0245 -0.014,0.0237 -0.015,0.0229 -0.016,0.0219 -0.016,0.021 -0.018,0.0199 -0.018,0.0188 -0.019,0.0177 -0.021,0.0165 -0.021,0.0152 -0.022,0.0138 -0.023,0.0125 -0.024,0.011 -0.025,0.0095 -0.026,0.0079 -0.027,0.0063 -0.029,0.0045 -0.029,0.0029 -0.031,10e-4 -0.216,0.1094 -0.208,0.1447 -0.372,0.3327 -0.218,0.125 -0.232,0.0224 -0.215,-0.1311 0.257,0.4684 1.301,1.799 0.167,0.1287 1.713,0.5003 -0.025,-0.1914 0.035,-0.5746 0.04,-0.1461 0.172,-0.1063 0.193,-0.0378 0.201,0.0154 0.194,0.0532 0.678,0.4405 0.78,0.0597 0.11,0.0341 0.482,0.3876 0.206,0.2491 0.08,0.2813 -0.057,0.2472 -0.136,0.1258 -0.179,0.0884 -0.187,0.1351 -0.126,0.2013 -0.022,0.2103 0.256,0.7548 0.022,0.3481 0.045,0.0748 0.109,0.0297 0.629,0.0161 0.332,0.0869 0.108,0.2016 0.182,0.1052 0.106,0.0276 0.174,0.0205 0.267,-0.008 0.276,0.0425 0.154,0.06 0.084,0.0739 0.057,0.1501 0.037,0.0695 0.074,0.061 0.727,0.1866 0.114,-0.0045 0.124,-0.0432 0.163,-0.1436 0.066,-0.1029 0.034,-0.0923 0.019,-0.0746 0.051,-0.0608 0.102,-0.0369 0.321,0.0115 0.131,-0.0207 0.409,-0.1794 0.336,-0.0267 0.014,-0.0011 0,0 -0.164,0.0973 -0.131,0.1254 0.194,0.2107 0.181,0.1105 0.017,0.0779 -0.013,0.0887 0.03,0.1002 0.133,0.1632 0.117,0.071 0.388,0.0258 0.291,0.15 0.071,0.3177 -0.022,0.6201 0.194,0.2319 0.363,0.2233 0.763,0.3167 0.21,0.0378 0.546,-0.0779 0.193,0.0114 0.555,0.1626 0.199,0.155 0.046,0.056 0.024,0.065 -0.003,0.034 -0.011,0.03 0.001,0.053 -0.02,0.008 -0.055,0.174 -0.008,0.015 0.126,0.24 0.059,0.273 0.043,0.095 0.22,0.296 0.116,0.158 0.065,0.144 -0.199,0.003 -0.399,-0.085 -0.204,10e-4 -0.254,0.1 -0.204,0.179 -0.035,0.1 -0.044,0.125 0.125,0.236 -0.155,0.083 -0.38,0.471 -0.565,0.31 -0.118,0.149 0.035,0.344 0.248,0.311 0.337,0.254 0.29,0.173 -0.372,0.147 -0.078,0.096 -0.093,0.346 -0.028,0.066 -0.002,0.056 0.041,0.102 0.046,0.051 0.05,0.041 0.194,0.164 0.044,0.055 -0.044,-0.055 -0.194,-0.164 -0.217,0.131 -0.445,0.141 -0.219,0.13 -0.312,0.393 -0.304,0.22 -0.139,0.19 -0.316,0.636 -0.081,0.392 0.249,0.313 0.31,0.277 0.102,0.288 0.033,0.406 0.301,0.188 0.375,0.15 0.439,0.568 0.635,0.38 0.296,0.265 -0.371,0.057 -0.175,-0.004 -0.546,-0.224 -0.171,-0.028 -0.209,0.031 -0.112,0.051 -0.275,0.248 -0.163,0.087 -0.481,0.027 -0.1,0.045 -0.081,0.08 -0.058,0.099 -0.028,0.108 0.019,0.101 0.108,0.196 0.013,0.081 -0.041,0.054 -0.071,0.025 -0.282,0.032 -0.247,0.071 -0.118,0.063 0.13,0.258 0.191,0.144 0.521,0.138 0.41,0.023 0.088,0.08 0.149,0.326 0.015,0.117 -0.043,0.267 0.026,0.082 0.051,0.048 0.681,0.465 0.181,0.075 0.164,0 0.185,-0.037 0.174,0.005 0.131,0.122 0.016,0.166 -0.073,0.166 -0.218,0.286 -0.094,0.273 0.125,0.186 0.424,0.204 -0.704,0.491 -1.642,0.717 -0.323,0.432 -0.334,0.808 -0.965,0.694 -0.844,0.33 -2.09,0.338 -2.099,0.736 -0.946,-0.317 -2.449,0.034 -1.528,-0.886 -2.937,-0.562 -0.956,-1.289 -1.338,-0.084 -0.876,0.039 -0.524,-0.195 -0.136,-0.44 -0.012,-0.424 -0.929,0.195 -0.709,0 -0.423,0.17 -0.335,0.196 -0.395,-0.125 -0.229,0.042 0.02,0.249 -0.852,0.062 -0.924,-0.153 -2.426,-0.666 -0.372,-0.101 -1.684,-0.258 -0.6806,-0.266 -0.5507,-0.658 -0.4209,-0.208 -0.2489,-0.125 -1.5711,0.332 -0.5453,0.518 -0.8516,0.607 -5.8267,2.974 -1.0636,1.246 -1.2314,1.835 -0.0963,0.856 0.5302,2.737 1.1849,1.437 0.1504,0.332 -0.6568,0.002 -1.1026,-0.18 -0.9154,-0.222 -0.871,0.124 -0.8397,0.297 -0.7336,0.18 -0.5269,0.05 -0.3528,0.172 -0.1688,0.342 -0.0346,0.24 -0.9273,-0.059 -2.1446,-0.493 -1.9281,-0.34 -1.1307,0.387 -0.7272,0.36 -0.5118,-0.055 -0.3884,-0.38 -0.2608,-0.371 -0.7552,-0.341 -1.7031,-0.512 0.0876,-0.248 0.2911,-0.344 -0.0087,-0.213 -0.3278,-0.316 -1.5701,-0.339 -0.7401,-0.085 -0.4706,0.233 -0.3387,0.286 -0.8743,-1.05 -0.6222,-0.214 -0.9413,-0.035 -1.0766,-0.32 -1.1199,-0.409 -2.7213,-0.655 -0.7488,-0.078 -0.2997,0.103 -0.2002,0.392 -0.1082,1.105 -0.1147,0.123 -1.2627,0.036 -1.5559,-0.153 -0.7131,0.076 -0.6362,0.004 -0.5995,-0.293 -2.6872,0.335 -0.4468,-0.163 -0.6487,-0.5 -0.7233,-0.403 -0.5622,-0.206 -0.4793,-0.237 -0.435,-0.039 -0.6632,0.23 -0.9165,0.097 -0.7607,-0.03 -0.4057,0.034 -1.7037,-1.225 -0.2489,-0.335 -0.8483,-0.094 -1.0484,-0.014 -2.677,-0.794 -1.2189,-0.426 -0.1785,-0.253 0.0168,-0.205 -0.2083,0.044 -0.3755,0.362 -0.1969,0.296 -0.2608,0.055 -0.3846,-0.046 -0.3555,-0.166 -0.2175,-0.215 0.2332,-0.375 0.4079,-0.489 0.1694,-0.532 -0.0374,-0.476 -0.6762,-0.305 -0.9944,-0.128 -0.7277,-0.036 -0.9494,-0.272 -0.448,-0.196 -0.4371,-0.53 -0.0146,-0.386 1.8015,-0.34 1.6241,-1.393 1.5387,-5.057 1.1134,-5.98 0.8277,-1.129 1.0399,-0.311 -0.8413,-0.822 -0.5264,0.416 -0.2208,0.442 -0.2759,0.221 0.6222,-5.4825 0.4431,-2.0072 0.7542,-2.1029 1.5429,0.8348 1.279,0.8467 0.6611,0.7347 0.8369,2.4475 0.633,0.5134 0.9473,0.5156 -0.3744,-0.5627 -0.6519,-0.4301 -1.0192,-3.2623 -0.639,-0.924 -0.996,-0.7774 -3.2055,-1.6371 -0.2883,-0.316 -0.1548,-0.6254 1.0593,0.0265 0.9154,0.3041 -0.1082,-0.3501 -0.2716,-0.3657 -0.4252,-1.326 -0.3544,-3.0968 0.0482,-0.5302 -0.158,-0.6503 -1.0252,-0.1455 -0.8196,-0.0265 -0.883,-0.257 -4.3659,-1.8254 -1.4948,-1.8832 -1.5284,-1.3904 -0.3668,-0.6065 0.0243,-0.6146 0.791,-1.2979 -0.6985,-0.8196 -0.6827,-0.1629 -0.593,-0.4057 0.5373,-0.6757 0.4463,-0.4323 0.8943,-0.1179 1.1729,0.1433 1.1129,0.3912 0.8726,0.1039 -2.5801,-1.0496 -4.1841,0.3538 -0.9019,-0.1352 -0.7612,-0.2338 -0.2981,-0.7704 0.5951,-0.3473 0.5388,-0.6422 -0.6097,-0.4512 -0.7904,-0.1709 -1.2395,0.0097 -1.1566,0.1363 -0.2933,-0.2591 0.7055,-0.7152 -0.5994,-0.263 -0.7996,0.1229 -1.16,0.1482 -1.1096,-0.2245 -1.0485,-0.8126 -0.6952,0.0059 -0.4777,0.1001 -0.7082,-0.3127 -0.7455,-0.0784 -0.5323,0.1038 L 14.1817,67.8102 9.82604,66.8748 7.94494,66.7606 6.21965,67.1842 5.27018,67.0371 4.57227,66.4328 3.98635,65.4189 1.20718,64.6371 1.75684,64.1243 3.05094,64.0031 4.54197,63.6476 5.07812,63.1916 3.91278,62.6597 3.05311,62.5294 2.69712,62.3384 2.33356,61.8612 2.84861,61.6432 3.21163,61.759 4.25957,61.8277 6.05356,61.7103 5.38487,61.2293 4.69075,61.1222 4.3721,61.0015 2.91353,60.9496 2.24971,61.1135 0.757596,61.0513 0.434612,60.5319 0.279882,60.0862 0.742447,59.0929 2.84266,58.2056 l 5.2332,-0.97 2.25174,0.1417 1.5608,-0.1747 1.8703,-0.6114 0.8255,-0.5237 2.6596,-0.3089 2.5287,0.5556 2.3307,2.1008 1.114,0.7119 2.7272,-1.2351 4.0635,0.0363 0.8391,0.6973 0.3387,-0.5875 0.7472,-0.6871 0.5956,0.3132 0.3019,0.4247 4.2886,-0.1206 0.6779,-0.1239 -1.1524,-0.4988 -0.9419,-1.1956 -0.1953,-4.3974 -1.188,-1.2275 -1.3639,-1.9607 -0.6276,-1.1631 -0.059,-0.402 0.2099,-0.5805 1.6766,0.0314 1.2952,0.1471 2.4654,-0.4388 1.1864,0.3003 -0.0697,0.9078 0.3619,1.1453 0.4133,0.5546 0.6254,0.6308 1.9877,-0.0584 2.1451,0.3706 2.7105,0.0573 3.9602,0.64 1.6874,-0.3706 1.6323,-0.7898 3.1108,-0.5194 0.2478,-0.2748 -1.7908,0.1098 -1.6425,-0.5005 -0.2218,-0.5437 0.1904,-0.488 0.6665,-1.1242 4.7588,-1.7718 3.4116,-0.5237 3.5609,-0.9754 1.7919,-1.0004 1.1837,-1.2914 0.3809,-0.284 0.4912,-0.238 -0.4566,-0.4626 0.3095,-4.934 0.3332,-0.8889 0.6947,-0.7261 1.0571,-0.5615 1.6047,-0.6087 5.9078,-0.8407 0.8775,-0.3392 0.1234,0.5275 0.4295,0.6752 0.2954,0.3689 -0.2456,0.4821 0.1937,0.3971 0.8018,0.7146 0.9998,0.6736"},{"id":"2","nom":"Corse","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"0","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"10","clSc10":"10","clSc11":"10","clSc12":"10","clSc13":"10","clSc14":"0","clSc15":"10","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"10","clSc22":"10","clSc23":"10","clSc24":"0","clSc25":"0","clSc26":"10","clSc27":"10","clSc28":"10","chemin":"m 158.09,122.63 -0.29,1.627 0.211,0.477 0.4,0.332 0.186,0.365 0.336,4.34 -0.064,0.346 -1.355,1.743 -0.305,0.512 -0.067,2.161 -0.228,0.58 -0.481,0.573 -0.858,1.851 -0.745,0.832 -2.029,-1.015 -1.197,-0.439 -0.586,-0.473 -0.383,-0.327 0.246,-0.435 0.546,-0.453 0.086,-0.356 -1.283,-0.404 -0.588,-0.269 0.008,-0.472 0.444,-0.736 -0.203,-0.606 -0.74,0.031 -0.573,-0.093 -0.075,-0.315 0.424,-0.403 0.544,-0.527 -0.017,-0.582 -0.658,-0.25 -0.596,-0.473 -0.239,-0.642 0.462,-0.439 0.749,-0.284 -0.55,-0.658 -0.371,-0.014 -0.297,-0.144 0.243,-0.306 0.582,-0.457 0.809,-1.365 1.128,-0.644 1.995,-0.415 0.54,-0.181 0.496,-0.48 0.548,-0.309 0.667,0.041 0.614,0.185 0.379,0.198 0.285,-0.206 0.277,-0.595 -0.17,-0.522 0.087,-1.438 0.357,-0.815 0.577,-0.046 0.532,0.449 -0.027,0.396 0.197,0.939 0.02,0.61"},{"id":"3","nom":"Gex","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"0","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"10","clSc10":"10","clSc11":"10","clSc12":"10","clSc13":"10","clSc14":"0","clSc15":"11","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"10","clSc22":"10","clSc23":"10","clSc24":"0","clSc25":"9","clSc26":"10","clSc27":"10","clSc28":"10","chemin":"m 116.542,84.2294 1.208,0.0426 0.245,-0.0248 0.113,-0.0252 0.1,-0.0396 0.385,-0.2353 0.073,-0.0618 0.06,-0.0635 0.074,-0.0568 0.096,-0.0449 0.058,-0.0341 0.043,-0.0332 0.141,-0.1906 0.045,-0.0481 0.378,-0.2772 0.081,-0.1006 0.079,-0.0811 0.46,-0.3451 0,0 0.545,0.2314 0.163,0.1214 0.135,0.1678 0.015,0.1225 -0.197,0.3055 -0.162,0.2499 -0.036,0.0864 -0.079,0.3138 -0.006,0.1197 0.01,0.1025 -0.048,0.0738 -0.244,0.0527 -0.064,0.0052 -0.066,-0.0058 -0.087,-0.0194 -0.021,-0.0012 -0.018,0.0012 -0.019,0.004 -0.664,0.2256 -0.27,0.1191 -0.041,0.1334 0.115,0.1517 0.196,0.1706 -0.034,0.0951 -0.085,0.1116 -0.148,0.2405 -0.047,0.0246 -0.108,0.0122 -0.238,-0.027 -0.106,0.0148 -0.091,0.0623 -0.139,0.1853 -0.075,0.073 -0.162,0.0663 -0.088,-0.0433 -0.075,-0.0865 -0.121,-0.0663 -0.049,0.0368 -0.858,-1.7988 -0.372,-0.0131"},{"id":"4","nom":"Savoie","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"0","clSc05":"0","clSc08":"0","clSc06":"7","clSc07":"8","clSc09":"0","clSc10":"7","clSc11":"11","clSc12":"10","clSc13":"10","clSc14":"0","clSc15":"10","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"10","clSc22":"7","clSc23":"7","clSc24":"0","clSc25":"0","clSc26":"8","clSc27":"11","clSc28":"10","chemin":"m 120.075,90.094 0.269,-0.0159 0.091,-0.035 0.165,-0.1093 0.09,-0.0348 0.354,0.0051 0.341,0.1224 0.312,0.198 0.521,0.4823 0.129,0.034 0.298,-0.0053 0.286,-0.0756 0.256,-0.1442 0.206,-0.2118 0.2,-0.4636 0.011,-0.063 0.538,-0.2984 0.134,-0.1337 0.229,-0.459 0.15,-0.1777 0.548,-0.4389 0.118,-0.0205 0.121,0.02 0.114,0.0484 0.117,0.0781 0.055,0.0527 0.029,0.0552 -0.037,0.1937 -0.121,0.1338 -0.068,0.1358 0.123,0.1998 0.345,0.24 0.207,0.0812 0.52,0.0424 0.336,0.1383 0.197,0.2421 -0.091,0.3362 0.241,0.0067 0.804,-0.415 0.009,0.0599 0.125,0.4592 0.223,0.2359 0.299,0.1564 0.289,0.0412 0.148,0.0389 0.252,0.1752 0.148,0.079 0.359,0.0642 0.137,0.067 0.067,0.1649 -0.026,0.0629 -0.127,0.1947 -0.03,0.0922 0.022,0.0893 0.121,0.1306 0.044,0.0824 0.06,0.4581 0.084,0.1609 0.506,0.1992 0.482,0.256 0.038,0.0416 0,0 0.071,0.0797 0.077,0.138 0.089,0.1243 0.148,0.079 0.474,0.146 0.086,0.0464 -0.012,0.138 -0.098,0.1689 -0.229,0.2897 -0.359,0.3017 -0.057,0.0653 0.056,0.3212 0.119,0.2222 0,0.174 -0.301,0.1787 -0.211,0.272 -0.074,0.0538 -0.058,-0.0149 -0.139,-0.1191 -0.088,-0.0269 -0.391,0.0761 -0.396,0.1277 -0.143,0.0968 -0.192,0.2382 -0.163,0.1042 -0.101,0.0172 -0.259,0.0023 -0.087,0.0274 -0.058,0.0939 0.052,0.0602 0.064,0.0509 -0.022,0.0687 -0.361,0.1231 -0.398,-0.0996 -0.407,-0.1557 -0.388,-0.0464 -0.084,0.0303 -0.199,0.1094 -0.096,0.0389 -0.087,0.0103 -0.201,-0.0051 -0.098,0.0126 -0.384,0.1563 -0.037,0.0218 -0.014,0.0011 -0.336,0.0267 -0.409,0.1794 -0.131,0.0207 -0.321,-0.0115 -0.102,0.0369 -0.051,0.0608 -0.019,0.0746 -0.034,0.0923 -0.066,0.1029 -0.163,0.1436 -0.124,0.0432 -0.114,0.0045 -0.727,-0.1866 -0.074,-0.061 -0.037,-0.0695 -0.057,-0.1501 -0.084,-0.0739 -0.154,-0.06 -0.276,-0.0425 -0.267,0.008 -0.174,-0.0205 -0.106,-0.0276 -0.182,-0.1052 -0.108,-0.2016 -0.332,-0.0869 -0.629,-0.0161 -0.109,-0.0297 -0.045,-0.0748 -0.022,-0.3481 -0.256,-0.7548 0.022,-0.2103 0.126,-0.2013 0.187,-0.1351 0.179,-0.0884 0.136,-0.1258 0.057,-0.2472 -0.08,-0.2813 -0.206,-0.2491 -0.482,-0.3876 -0.11,-0.0341 -0.78,-0.0597 -0.678,-0.4405 -0.194,-0.0532 -0.201,-0.0154 -0.193,0.0378 -0.172,0.1063 -0.04,0.1461 -0.035,0.5746 0.025,0.1914 -1.713,-0.5003 -0.167,-0.1287 -1.301,-1.799 -0.257,-0.4684 0.215,0.1311 0.232,-0.0224 0.218,-0.125 0.372,-0.3327 0.208,-0.1447 0.216,-0.1094 0.031,-10e-4 0.029,-0.0029 0.029,-0.0045 0.027,-0.0063 0.026,-0.0079 0.025,-0.0095 0.024,-0.011 0.023,-0.0125 0.022,-0.0138 0.021,-0.0152 0.021,-0.0165 0.019,-0.0177 0.018,-0.0188 0.018,-0.0199 0.016,-0.021 0.016,-0.0219 0.015,-0.0229 0.014,-0.0237 0.014,-0.0245 0.013,-0.0253 0.012,-0.0259 0.011,-0.0265 0.011,-0.0271 0.01,-0.0276 0.009,-0.028 0.009,-0.0284 0.009,-0.0287 0.008,-0.029 0.007,-0.0291 0.007,-0.0293 0.006,-0.0294 0.006,-0.0294 0.006,-0.0294 0.005,-0.0292 0.005,-0.0291 0.004,-0.0289 0.005,-0.0285 0.004,-0.0283 0.003,-0.0278 0.004,-0.0274 0.003,-0.0268 0.003,-0.0263 0.003,-0.0256 0.003,-0.0249 0.087,-0.1527 0.084,-0.2299 0.358,-0.7353 0.096,-0.3846 -0.002,-0.0647 0.191,0.0388 0.107,0.1399 0.119,0.7976 0.062,0.1699 0.152,0.1378 0.199,0.057 0.433,0.0402 0.168,0.1038 0.055,0.1043 0.048,0.2294 0.059,0.1062 0.095,0.0813 0.116,0.0616 0.245,0.0764 0.267,0.0367"},{"id":"5","nom":"Haute Savoie","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"0","clSc05":"0","clSc08":"0","clSc06":"7","clSc07":"8","clSc09":"0","clSc10":"7","clSc11":"11","clSc12":"10","clSc13":"10","clSc14":"0","clSc15":"10","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"10","clSc22":"7","clSc23":"7","clSc24":"0","clSc25":"0","clSc26":"8","clSc27":"11","clSc28":"10","chemin":"m 130.768,87.9598 0.007,0.0137 0.077,0.0893 -0.159,0.0527 -0.117,0.1019 -0.089,0.1334 -0.07,0.1494 -0.151,0.1775 -0.223,0.1323 -0.251,0.0893 -0.236,0.0487 -0.274,-0.0017 -0.077,0.008 -0.008,0.0567 -0.011,0.0766 -0.012,0.0498 -0.069,0.0153 -0.065,-0.0728 -0.072,-0.0306 -0.096,-0.0268 -0.301,0.0635 -0.171,0.0715 -0.14,0.1632 -0.06,0.1821 -0.008,0.1975 0.021,0.1382 -0.804,0.415 -0.241,-0.0067 0.091,-0.3362 -0.197,-0.2421 -0.336,-0.1383 -0.52,-0.0424 -0.207,-0.0812 -0.345,-0.24 -0.123,-0.1998 0.068,-0.1358 0.121,-0.1338 0.037,-0.1937 -0.029,-0.0552 -0.055,-0.0527 -0.117,-0.0781 -0.114,-0.0484 -0.121,-0.02 -0.118,0.0205 -0.548,0.4389 -0.15,0.1777 -0.229,0.459 -0.134,0.1337 -0.538,0.2984 -0.011,0.063 -0.2,0.4636 -0.206,0.2118 -0.256,0.1442 -0.286,0.0756 -0.298,0.0053 -0.129,-0.034 -0.521,-0.4823 -0.312,-0.198 -0.341,-0.1224 -0.354,-0.0051 -0.09,0.0348 -0.165,0.1093 -0.091,0.035 -0.269,0.0159 -0.267,-0.0367 -0.245,-0.0764 -0.116,-0.0616 -0.095,-0.0813 -0.059,-0.1062 -0.048,-0.2294 -0.055,-0.1043 -0.168,-0.1038 -0.433,-0.0402 -0.199,-0.057 -0.152,-0.1378 -0.062,-0.1699 -0.119,-0.7976 -0.107,-0.1399 -0.191,-0.0388 -0.014,-0.3524 -0.165,-0.8827 0.011,-0.4991 0.181,-0.1376 0.575,1.206 2.253,0.0938 2.471,0.4693 1.721,-0.5006 1.909,0.0939 1.345,0.3754 1.846,0.3754 0.876,-0.1947"},{"id":"6","nom":"Dep. Du Leman","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"0","clSc05":"0","clSc08":"0","clSc06":"7","clSc07":"8","clSc09":"0","clSc10":"7","clSc11":"11","clSc12":"10","clSc13":"10","clSc14":"0","clSc15":"11","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"10","clSc22":"7","clSc23":"7","clSc24":"0","clSc25":"9","clSc26":"8","clSc27":"11","clSc28":"10","chemin":"m 128.266,82.8707 -0.073,0.1706 -0.292,0.2371 -0.059,0.128 0.211,0.253 0.393,0.2889 0.252,0.3006 -0.393,0.5296 -0.192,0.3968 -0.102,0.3796 0.096,0.1861 0.882,0.1351 0.169,0.114 -0.011,0.0847 -0.078,0.0848 -0.089,0.0755 -0.051,0.0573 0.031,-0.0109 0.02,0.1099 0.003,0.1157 -0.016,0.0109 0.005,0.0859 -0.023,0.0464 0.007,0.0343 0.097,0.0515 0.105,0.0103 0.085,-0.0446 0.079,-0.0567 0.093,-0.0263 0.252,0.0773 0.75,0.5897 0.054,0.0252 0.04,0.1179 0.127,0.2302 0.078,0.2027 0.059,0.1117 -0.007,-0.0137 -0.876,0.1947 -1.846,-0.3754 -1.345,-0.3754 -1.909,-0.0939 -1.721,0.5006 -2.471,-0.4693 -2.253,-0.0938 -0.575,-1.206 -0.181,0.1376 0.23,-0.1744 0.121,0.0663 0.075,0.0865 0.088,0.0433 0.162,-0.0663 0.075,-0.073 0.139,-0.1853 0.091,-0.0623 0.106,-0.0148 0.238,0.027 0.108,-0.0122 0.047,-0.0246 0,0 0.267,-0.1105 0.503,-0.083 0.505,-0.0138 0.377,0.1168 0.359,-0.1282 0.566,-0.4598 0.709,-0.3258 0.286,-0.2101 -0.057,-0.2554 -0.078,-0.0235 -0.185,0.059 -0.116,-0.0418 -0.047,-0.0469 -0.107,-0.1833 -10e-4,-0.0116 0.003,-0.0039 0.082,-0.0359 0.079,-0.104 -0.023,-0.0608 0.086,-0.0241 0.038,-0.0429 0.072,-0.1135 -0.023,-0.0429 0.061,-0.0365 0.121,-0.128 0.051,-0.0767 -0.008,-0.0465 0.285,-0.1553 0.009,-0.015 -0.013,-0.0044 0.218,-0.0345 0.025,-0.0277 0.073,0.0202 0.157,-0.002 0.066,0.0308 -0.004,0.0554 0.074,0.0815 0.018,0.0485 0.144,0.0657 0.207,0.0443 -0.031,-0.009 0.004,-9e-4 0.027,-6e-4 0.006,0.0055 0.011,-0.0028 0.074,-0.0981 0.072,-0.0168 0.087,-0.0895 0.195,-0.0035 0.521,-0.1697 0.057,-0.0797 0.013,-0.116 0.242,-0.11 -0.007,0.0121 0.026,0.012 -0.005,-0.022 0.071,-0.025 0.095,0.0106 -0.009,0.0134 0.013,-0.0107 0.254,0.0988 0.473,-0.0825 0.13,0.0054 0.412,-0.0471 0.298,0.0139 0.176,-0.0321 0.486,-0.0043 0.138,0.0333 0.226,0.0231 0.056,0.0298 0.305,0.0701"},{"id":"7","nom":"Carouge","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"0","clSc05":"0","clSc08":"0","clSc06":"7","clSc07":"8","clSc09":"0","clSc10":"7","clSc11":"11","clSc12":"10","clSc13":"10","clSc14":"0","clSc15":"11","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"10","clSc22":"7","clSc23":"5","clSc24":"4","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 122.052,84.0712 10e-4,0.0116 0.107,0.1833 0.047,0.0469 0.116,0.0418 0.006,-0.0019 -0.191,0.1486 0.049,0.3614 -0.539,0.2477 -0.566,0.4598 -0.359,0.1282 -0.377,-0.1168 -0.505,0.0138 -0.503,0.083 -0.267,0.1105 0,0 0.148,-0.2405 0.085,-0.1116 0.034,-0.0951 -0.01,-0.0092 0.314,-0.0266 0.238,-0.156 -0.066,-0.0575 0.098,-0.1149 0.083,0.1149 0.18,0.0411 0.177,-0.1383 0.014,8e-4 0.045,0.0041 0.021,-0.0616 0.07,-0.0493 0.053,0.0329 -0.021,0.0739 -0.045,0.0615 0.017,0.0493 0.102,0.0205 0.144,-0.1108 0.007,-0.0025 -0.001,0.0045 0.189,0.156 0.369,0.0821 0.115,-0.2463 -0.056,-0.1003 0.04,-0.017 -0.008,-0.026 0.067,-0.0185 0.077,-0.1047 -0.011,0.0035 0.1,-0.0959 0.029,-0.0564 0.007,-0.0512 -0.02,-0.0061 -0.004,-0.0343 0.025,-0.0456 0.002,-0.0758 0.046,-0.0729 0.052,-0.0135 0.079,-0.0055 0.196,-0.2191"},{"id":"8","nom":"Versoix","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"0","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"10","clSc10":"10","clSc11":"10","clSc12":"10","clSc13":"10","clSc14":"0","clSc15":"11","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"10","clSc22":"10","clSc23":"5","clSc24":"4","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 121.457,83.9105 0.054,-0.0121 -0.006,0.0076 -0.086,0.0502 -0.01,0.0413 0.022,0.0357 -0.018,0.0014 -0.033,0.0818 0.046,0.0579 0.001,0.0376 -0.012,-0.0071 -0.015,0.0424 -0.207,-0.0577 -0.09,0.0369 -0.012,0.0739 0.037,0.0493 0.137,0.0538 -0.002,0.0072 -0.055,0.0402 0,0.0362 0.025,0.0254 -0.031,0.0711 0.001,0.0646 -0.015,0.0467 -0.397,0.0284 -0.033,0.2955 0.001,-0.0045 -0.007,0.0025 -0.144,0.1108 -0.102,-0.0205 -0.017,-0.0493 0.045,-0.0615 0.021,-0.0739 -0.053,-0.0329 -0.07,0.0493 -0.021,0.0616 -0.045,-0.0041 -0.014,-8e-4 -0.177,0.1383 0.189,-0.1478 -0.433,-0.4202 0.071,-0.0242 0.019,-0.004 0.018,-0.0012 0.021,0.0012 0.087,0.0194 0.066,0.0058 0.064,-0.0052 0.244,-0.0527 0.048,-0.0738 -0.01,-0.1025 0.006,-0.1197 0.079,-0.3138 0.036,-0.0864 0.162,-0.2499 0.108,0.0618 0.507,0.29"},{"id":"9","nom":"Peney","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"5","clSc05":"0","clSc08":"6","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"6","clSc11":"6","clSc12":"6","clSc13":"10","clSc14":"0","clSc15":"11","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"10","clSc22":"6","clSc23":"6","clSc24":"4","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 119.338,85.3419 -0.196,-0.1706 -0.115,-0.1517 0.041,-0.1334 0.27,-0.1191 0.664,-0.2256 -0.071,0.0242 0.433,0.4202 -0.189,0.1478 -0.18,-0.0411 -0.083,-0.1149 -0.098,0.1149 0.066,0.0575 -0.238,0.156 -0.314,0.0266 0.01,0.0092"},{"id":"10","nom":"Geneve","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"5","clSc05":"0","clSc08":"5","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"6","clSc11":"6","clSc12":"6","clSc13":"10","clSc14":"0","clSc15":"11","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"10","clSc22":"6","clSc23":"6","clSc24":"4","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 121.375,84.9102 0.056,0.1003 -0.115,0.2463 -0.369,-0.0821 -0.189,-0.156 0.033,-0.2955 0.397,-0.0284 -0.009,0.0286 0.051,0.058 -0.022,0.0458 0.013,0.0492 0.02,0.0108 -0.019,-0.0094 0.007,0.0206 -0.061,0.0437 0.019,0.0206 0.049,0.0078 0.093,-0.0447 -0.003,-0.0111 0.018,0.0085 0.031,-0.013"},{"id":"11","nom":"Jussy","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"5","clSc05":"0","clSc08":"6","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"6","clSc11":"6","clSc12":"6","clSc13":"10","clSc14":"0","clSc15":"11","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"10","clSc22":"6","clSc23":"6","clSc24":"4","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 122.329,84.3529 0.179,-0.0571 0.078,0.0235 0.057,0.2554 -0.286,0.2101 -0.17,0.0781 -0.049,-0.3614 0.191,-0.1486"},{"id":"12","nom":"Genthod","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"5","clSc05":"0","clSc08":"6","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"6","clSc11":"6","clSc12":"6","clSc13":"10","clSc14":"0","clSc15":"11","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"10","clSc22":"6","clSc23":"6","clSc24":"4","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 121.265,84.4034 -0.137,-0.0538 -0.037,-0.0493 0.012,-0.0739 0.09,-0.0369 0.207,0.0577 -0.03,0.0812 -0.004,-0.003 0.005,-0.0053 -0.011,-0.0058 -0.037,0.0081 -0.043,0.0409 -0.015,0.0401"},{"id":"13","nom":"Celigny","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"5","clSc05":"0","clSc08":"6","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"6","clSc11":"6","clSc12":"6","clSc13":"10","clSc14":"0","clSc15":"12","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"4","clSc20":"0","clSc21":"0","clSc22":"6","clSc23":"6","clSc24":"4","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 121.789,83.5056 -0.158,-0.0776 -0.214,-0.078 0.021,-0.0657 0.098,-0.0903 0.339,0.1295 -0.035,0.0464 0.008,0.0123 -0.023,4e-4 0.011,0.055 -0.016,0.0152 0.013,0.0151 -0.044,0.0377"},{"id":"15","nom":"VD","clSc01":"0","clSc02":"2","clSc03":"2","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"2","clSc11":"2","clSc12":"2","clSc13":"11","clSc14":"2","clSc15":"12","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"4","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"0","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 128.467,80.1327 -0.007,0.0509 -0.002,0.1303 0.018,0.1222 0.017,0.0625 0.01,0.0581 -0.006,0.0226 -0.028,0.012 -0.009,0.0109 0.002,0.0255 0.005,0.0309 0.002,0.0409 -0.012,0.0487 0,0.0378 0.012,0.0149 0.095,-0.0284 0.051,-0.0094 0.065,6e-4 0.088,0.0435 0.163,-0.0103 0.124,-0.0226 0.043,0.0085 0.059,0.0224 0.125,0.0873 0.076,0.0369 0.048,0.0103 0.086,-0.0174 0.041,-0.0029 0.019,0.008 -0.021,0.0298 -0.058,0.0578 -0.277,0.217 -0.031,0.0344 -0.036,0.0177 -0.136,-0.0601 -0.026,-0.0069 -0.091,-0.0063 -0.146,0.004 -0.027,0.0046 -0.095,0.1323 0.078,0.1514 0.125,0.1211 0.048,0.0169 0.084,0.0129 0.162,-0.0163 0.095,-0.0329 0.08,-0.0407 0.162,-0.1219 0.118,0.0028 0.152,0.0401 0.615,0.3155 0.075,0.13 0.037,0.1133 0.009,0.0447 0.021,0.0575 0.034,0.0507 0.038,0.0409 0.024,0.041 0.036,0.0132 0.01,0.0177 0.258,-0.0865 0.044,-0.0976 0.021,-0.0295 0.035,-0.0355 0.108,-0.0853 0.193,-0.1133 0.072,-0.0304 0.08,-0.0223 0.327,-0.0269 0.095,-0.0418 0.117,-0.0676 0.175,-0.1414 0.079,-0.0779 0.112,-0.0647 0.636,-0.1334 0.332,-0.1821 0.048,0.0954 0.026,0.0312 0.032,0.0332 0.019,0.0337 0.005,0.0476 -0.007,0.0778 0.002,0.0716 -0.014,0.0905 -0.034,0.0887 -0.082,0.1102 -0.059,0.053 -0.031,0.0432 -0.007,0.041 0.026,0.15 -0.007,0.0681 -0.039,0.0756 -0.102,0.0933 -0.18,0.075 -0.033,0.0378 0.035,0.0959 0.036,0.0673 0.022,0.0888 0.002,0.0584 -0.125,0.2719 0.108,0.0599 0.159,0.1125 0.067,0.024 0.03,0.0309 0.003,0.0378 -0.053,0.0619 -0.022,0.0389 0.012,0.2239 -0.134,0.1053 -0.192,0.1449 -0.005,0.0349 0.02,0.1466 -0.042,0.0836 -0.131,0.1583 -0.154,0.1509 -0.212,0.1489 -0.127,0.0383 -0.261,0.225 -0.365,0.1658 -0.424,0.166 -0.127,-0.1139 -0.082,-0.1088 -0.248,-0.2316 -0.704,-0.8503 -0.051,-0.1007 -0.05,-0.1953 -0.118,-0.0653 -0.149,-0.0217 -0.138,-0.0653 -0.041,-0.0824 0.012,-0.0825 0.028,-0.0738 10e-4,-0.057 -0.07,-0.0948 -0.152,-0.1244 0.13,-0.0159 0.013,-0.0089 -0.012,-0.0335 0.027,0.0475 0.076,0.0118 0.106,-0.0251 0.142,0.0204 0.009,-0.0249 0.012,0.0128 0.056,-0.0295 0.002,-0.0432 0.057,-0.0501 0.006,-0.0384 -0.034,-0.0467 -0.004,-0.0382 -0.043,-0.0291 -0.009,-0.0551 -0.044,-0.0386 -0.068,0.008 -0.035,-0.0161 -0.005,-0.0582 -0.074,-0.0534 -0.133,0.0128 -0.06,-0.0209 0.01,-0.0134 -0.039,0.0105 -0.099,-0.0764 -0.088,-0.0051 -0.06,0.0158 -0.091,-0.1119 -0.181,-0.0386 -0.007,-0.0412 -0.037,-0.0413 -0.094,0.0038 -0.025,-0.0195 -0.128,0.0067 -0.014,-0.0101 0.014,-0.0081 -0.182,-0.0348 -0.093,0.0075 -0.138,-0.0275 -0.306,-0.1541 -0.088,-7e-4 -0.069,0.0319 -0.09,0.003 -0.234,-0.1304 -0.143,-0.0389 -0.097,-0.0075 -0.026,-0.0229 -0.084,0.0085 -0.107,-0.0275 -0.199,0.0143 -0.101,-0.0273 -0.045,0.0055 0.008,0.0167 -0.035,0.0072 -0.007,-0.0099 -0.044,-0.0187 -0.009,0.0115 -0.077,-0.052 -0.146,-0.0143 -0.014,-0.0261 -0.095,-0.0442 -0.036,0.0153 -0.091,-0.0067 -0.07,0.049 -0.086,0.0125 -0.055,0.0462 -0.044,0.0041 -0.188,0.0034 -0.212,-0.0917 -0.139,-0.0036 -0.065,0.0375 0.003,0.0239 -0.03,0.0428 -0.002,-0.0141 -0.016,0.0116 0.018,0.0057 -0.054,0.0137 -0.001,0.015 -0.058,0.0278 -0.003,-0.0013 0.012,-0.0151 -0.025,0.0014 0.01,0.0122 -0.018,-0.0027 -0.032,0.0428 -0.018,0.0647 -0.128,0.0126 -0.095,0.0653 -0.004,0.0659 -0.074,0.0042 -0.058,0.0442 -0.177,0.0509 -0.137,0.0183 -0.178,0.1009 -0.103,0.0105 -0.143,-0.0734 -0.116,-0.0052 -0.112,0.0364 -0.149,0.0066 -0.103,0.0404 -0.079,0.0958 -0.155,0.0721 -0.011,0.0367 -0.093,0.0465 -0.049,0.0714 -0.147,0.0667 -0.018,0.0376 0.013,0.0416 -0.032,0.0537 -0.069,0.0538 0.015,0.0603 -0.104,0.1144 -0.118,-0.0329 -0.072,0.013 -0.113,0.0774 -0.001,0.0238 -0.02,-0.0069 -0.1,0.0728 -0.034,0.0672 -0.115,0.0806 -0.099,0.0922 -0.018,0.0226 -0.339,-0.1295 -0.098,0.0903 -0.021,0.0657 0.214,0.078 0.158,0.0776 -0.008,0.0064 0.005,0.0533 -0.049,0.0715 -0.009,0.0306 0.012,0.0045 -0.013,-0.0036 -0.068,0.0858 -0.047,0.0187 -0.101,0.1256 -0.054,0.0121 -0.507,-0.29 -0.108,-0.0618 0.197,-0.3055 -0.015,-0.1225 -0.135,-0.1678 -0.163,-0.1214 -0.545,-0.2314 0,0 -0.053,-0.0225 0.128,-0.0842 0.02,-0.073 -0.023,-0.075 0,-0.0845 -0.008,-0.034 -0.026,-0.0458 -0.024,-0.0521 0,-0.0567 0.043,-0.0676 0.126,-0.0939 0.386,-0.4569 0.392,-0.3412 -0.086,-0.0661 -0.182,-0.1406 -0.034,-0.1461 0.148,-0.1345 1.49,-0.939 0.794,-0.2998 0.11,-0.0638 0.292,-0.2265 0.367,-0.1339 0.117,-0.0599 0.125,-0.1076 0.042,-0.0919 -0.004,-0.187 -0.083,-0.0624 -0.058,-0.0544 -0.031,-0.0624 0.016,-0.0538 0.174,-0.3604 0.077,-0.0954 0.021,-0.0366 0.204,-0.0246 0.571,-0.0195 0.097,-0.012 0.112,-0.0392 0.007,-0.0039 0.07,0.0819 0.459,-0.0328 0.148,0.5829 0,0.1889 0.263,0.0492 0.337,-0.156 1.262,-0.6196 0.013,0.02 -0.512,0.3697 0.041,0.1109 -0.024,0.0862 -0.214,0.1765 0.197,0.1109 0.246,0.0287 0.457,-0.4009 -0.444,0.405 0.106,0.7225 0.436,0.5747 0.208,0.0878 -0.01,0.0448 m -2.444,-0.5472 -0.004,0.2463 -0.255,0.193 -0.336,0.2914 0.045,0.0411 0.148,0.234 0.107,0.0041 0.217,0.0903 0.218,-0.0164 0.197,0.1396 0.197,-0.0247 0.23,-0.0985 0.361,-0.2422 -0.082,-0.0575 -0.049,-0.1313 0.254,0.0205 0.131,-0.234 -0.156,-0.1642 -0.246,0.0205 -0.254,-0.0575 -0.275,-0.3038 -0.448,0.0493 m -0.074,-0.6445 -0.542,-0.0246 -0.049,0.2709 0.058,0.3038 0.123,0.0164 0.279,-0.2627 0.131,-0.3038"},{"id":"16","nom":"Echallens","clSc01":"0","clSc02":"3","clSc03":"3","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"3","clSc11":"3","clSc12":"2","clSc13":"11","clSc14":"2","clSc15":"12","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"4","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"0","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 126.023,79.5855 0.448,-0.0493 0.275,0.3038 0.254,0.0575 0.246,-0.0205 0.156,0.1642 -0.131,0.234 -0.254,-0.0205 0.049,0.1313 0.082,0.0575 -0.361,0.2422 -0.23,0.0985 -0.197,0.0247 -0.197,-0.1396 -0.218,0.0164 -0.217,-0.0903 -0.107,-0.0041 -0.148,-0.234 -0.045,-0.0411 0.336,-0.2914 0.255,-0.193 0.004,-0.2463"},{"id":"17","nom":"Orbe","clSc01":"0","clSc02":"3","clSc03":"3","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"3","clSc11":"3","clSc12":"2","clSc13":"11","clSc14":"2","clSc15":"12","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"4","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"0","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 125.949,78.941 -0.131,0.3038 -0.279,0.2627 -0.123,-0.0164 -0.058,-0.3038 0.049,-0.2709 0.542,0.0246"},{"id":"18","nom":"Grandson","clSc01":"0","clSc02":"3","clSc03":"3","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"3","clSc11":"3","clSc12":"2","clSc13":"11","clSc14":"2","clSc15":"12","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"4","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"0","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 125.421,77.7053 0.153,-0.0828 0.54,-0.1969 0.335,-0.0779 0.17,-0.0767 0.294,-0.1695 0.653,-0.2705 0.036,0.1371 -0.026,0.1062 0.03,0.0673 0.06,0.0567 0.091,0.0503 0.032,0.0567 0.009,0.0624 -0.007,0.1054 0.021,0.0716 0.019,0.0449 0.184,0.2794 -0.048,-0.0731 -1.262,0.6196 -0.337,0.156 -0.263,-0.0492 0,-0.1889 -0.148,-0.5829 -0.459,0.0328 -0.07,-0.0819 -0.007,0.0039"},{"id":"19","nom":"Yvonand","clSc01":"0","clSc02":"3","clSc03":"3","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"3","clSc11":"3","clSc12":"2","clSc13":"11","clSc14":"2","clSc15":"12","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"4","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"0","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 127.98,77.8159 0.035,0.0531 0.055,0.29 0.04,0.0802 0.071,0.0502 -0.467,0.4094 -0.246,-0.0287 -0.197,-0.1109 0.214,-0.1765 0.024,-0.0862 -0.041,-0.1109 0.512,-0.3697"},{"id":"20","nom":"Broye VD","clSc01":"0","clSc02":"2","clSc03":"2","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"2","clSc11":"2","clSc12":"2","clSc13":"11","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"4","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"0","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 128.261,78.3394 0.025,0.0034 0.049,-0.0051 0.017,0.008 0.017,0.0215 -0.005,0.0223 -0.021,0.0249 -0.029,0.0263 -0.01,0.0249 0.015,0.0118 0.139,0.0458 0.035,0.0069 0.041,0.0017 0.048,0.0074 0.117,0.0384 0.05,0.0103 0.036,0.0017 0.091,-0.0092 0.064,-0.0309 0.075,-0.02 0.05,-0.0023 0.078,-0.0155 0.048,0.0166 0.057,0.0281 0.05,0.0189 0.048,0.0057 0.156,0.0029 0.057,-0.0057 0.086,-0.0184 0.025,-0.0131 0.035,-0.0229 0.081,-0.1312 0.045,-0.0529 0.001,-0.0238 -0.018,-0.0166 -0.069,-0.0074 -0.083,0.0275 -0.021,-0.0124 -0.017,-0.0297 0.041,-0.2276 0.011,-0.0375 0.013,-0.0364 0.021,-0.0361 0.05,-0.0727 0.067,-0.0741 0.004,-0.0361 -0.035,-0.0335 -0.115,-0.0633 -0.066,-0.022 -0.051,-0.0063 -0.04,0.004 -0.013,-0.0063 0.02,-0.0326 0.033,-0.0192 0.038,-0.0175 0.072,-0.0217 0.022,0.0017 0.025,0.0114 0.027,0.0201 0.017,0.004 -0.034,-0.0401 -0.038,-0.0355 -0.469,-0.3166 0.357,-0.2027 0.342,0.3304 0.037,0.0211 0.065,0.0453 0.18,0.17 0.031,0.0178 0.024,0.002 0.014,-0.0086 0.012,-0.0209 0.003,-0.0183 0.002,-0.0241 0.019,-0.0126 0.031,-0.0126 0.04,-0.008 0.033,-0.0011 0.022,0.0077 0.026,0.0226 0.022,0.0372 0.012,0.0456 -0.033,0.0466 -0.019,0.0487 -10e-4,0.0509 0.029,0.1002 0.041,0.0413 0.031,0.0171 0.053,-0.0125 0.014,0.0011 0.012,0.0114 -0.008,0.0355 -0.037,0.047 -0.109,0.0928 -0.067,0.0309 -0.05,0.03 -0.04,0.0433 -0.064,0.1122 0.019,0.154 -0.299,0.2966 -0.043,0.0344 -0.045,0.0223 -0.144,0.0292 -0.014,0.02 0.03,0.0407 0.041,0.0194 0.038,0.0124 0.141,0.0246 0.012,0.0077 -0.042,0.0922 -0.323,0.3046 -0.383,0.3871 -0.062,0.111 -0.003,0.0161 0.013,0.0183 0.007,0.0129 -0.026,0.0154 -0.063,0.0095 -0.173,0.0043 -0.125,0.0192 -0.179,0.0858 -0.132,0.0092 -0.026,0.1151 0.01,-0.0448 -0.208,-0.0878 -0.436,-0.5747 -0.106,-0.7225 0.454,-0.4136 -0.071,-0.0501 0.123,0.0867 0.028,0.0135 m 0.552,0.509 -0.101,0.0916 -0.045,0.0733 -0.119,0.0367 -0.083,0.0274 -0.064,0.0367 -0.037,0.0275 0.028,0.0458 0.073,0 0.092,-0.0092 0.128,-0.0824 0.082,-0.0184 0.129,0.0458 0.091,0.0275 0.101,0.0275 0.083,-0.0275 0.082,-0.0549 0.082,-0.11 0.037,-0.0824 -0.055,-0.0825 -0.092,-0.0366 -0.073,-0.0183 -0.036,-0.055 -0.065,-0.0458 -0.055,0.0275 -0.045,0.0458 -0.074,0.0733 -0.064,0.0366 m -0.504,0.1008 -0.064,-0.0458 -0.073,0 -0.092,0.0641 -0.073,0.0641 -0.073,0 -0.028,0.055 0.046,0.055 0.055,0.0366 0.028,0.0733 0.054,0.0183 0.074,-0.0458 0.055,-0.0366 0.082,-0.0733 0.019,-0.0825 -0.01,-0.0824"},{"id":"21","nom":"Payerne","clSc01":"0","clSc02":"2","clSc03":"2","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"2","clSc11":"2","clSc12":"2","clSc13":"11","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"4","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"0","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 131.77,77.2836 -0.082,0.0641 -0.026,0.008 -0.023,-0.0091 -0.03,-0.0258 -0.03,-0.0075 -0.036,0.0052 -0.042,0.0361 -0.036,0.0504 -0.027,0.1016 -0.022,0.0558 -0.03,0.0464 -0.031,0.0332 -0.094,0.0787 -0.194,0.0696 -0.012,-0.0266 -0.014,-0.0808 -0.159,-0.1577 -0.125,-0.0464 -0.055,-0.075 -0.694,-0.6639 0.833,-0.4706 0.458,0.1268 0.077,0.3727 0.043,0.0808 0.231,0.328 0.029,0.0169 0.038,0.0158 0.068,0.0206 0.007,0.0223 -0.022,0.0304"},{"id":"22","nom":"Broye FR 1","clSc01":"0","clSc02":"0","clSc03":"3","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"3","clSc11":"3","clSc12":"3","clSc13":"11","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"0","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 128.163,79.224 -0.074,0.0458 -0.054,-0.0183 -0.028,-0.0733 -0.055,-0.0366 -0.046,-0.055 0.028,-0.055 0.073,0 0.073,-0.0641 0.092,-0.0641 0.073,0 0.064,0.0458 0.01,0.0824 -0.019,0.0825 -0.082,0.0733 -0.055,0.0366"},{"id":"23","nom":"Broye FR 2","clSc01":"0","clSc02":"0","clSc03":"3","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"3","clSc11":"3","clSc12":"3","clSc13":"11","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"0","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 129.335,78.9858 -0.082,0.11 -0.082,0.0549 -0.083,0.0275 -0.101,-0.0275 -0.091,-0.0275 -0.129,-0.0458 -0.082,0.0184 -0.128,0.0824 -0.092,0.0092 -0.073,0 -0.028,-0.0458 0.037,-0.0275 0.064,-0.0367 0.083,-0.0274 0.119,-0.0367 0.045,-0.0733 0.101,-0.0916 0.064,-0.0366 0.074,-0.0733 0.045,-0.0458 0.055,-0.0275 0.065,0.0458 0.036,0.055 0.073,0.0183 0.092,0.0366 0.055,0.0825 -0.037,0.0824"},{"id":"24","nom":"Broye FR 3","clSc01":"0","clSc02":"0","clSc03":"3","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"3","clSc11":"3","clSc12":"3","clSc13":"11","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"0","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 129.731,77.5355 0.034,0.0401 -0.017,-0.004 -0.027,-0.0201 -0.025,-0.0114 -0.022,-0.0017 -0.072,0.0217 -0.038,0.0175 -0.033,0.0192 -0.02,0.0326 0.013,0.0063 0.04,-0.004 0.051,0.0063 0.066,0.022 0.115,0.0633 0.035,0.0335 -0.004,0.0361 -0.067,0.0741 -0.05,0.0727 -0.021,0.0361 -0.013,0.0364 -0.011,0.0375 -0.041,0.2276 0.017,0.0297 0.021,0.0124 0.083,-0.0275 0.069,0.0074 0.018,0.0166 -0.001,0.0238 -0.045,0.0529 -0.081,0.1312 -0.035,0.0229 -0.025,0.0131 -0.086,0.0184 -0.057,0.0057 -0.156,-0.0029 -0.048,-0.0057 -0.05,-0.0189 -0.057,-0.0281 -0.048,-0.0166 -0.078,0.0155 -0.05,0.0023 -0.075,0.02 -0.064,0.0309 -0.091,0.0092 -0.036,-0.0017 -0.05,-0.0103 -0.117,-0.0384 -0.048,-0.0074 -0.041,-0.0017 -0.035,-0.0069 -0.139,-0.0458 -0.015,-0.0118 0.01,-0.0249 0.029,-0.0263 0.021,-0.0249 0.005,-0.0223 -0.017,-0.0215 -0.017,-0.008 -0.049,0.0051 -0.025,-0.0034 -0.028,-0.0135 -0.123,-0.0867 -0.04,-0.0802 -0.055,-0.29 1.209,-0.6856 0.469,0.3166 0.038,0.0355"},{"id":"25","nom":"FR","clSc01":"0","clSc02":"0","clSc03":"3","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"3","clSc11":"3","clSc12":"3","clSc13":"11","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"0","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 132.889,77.1945 0.038,0.0141 0.052,-6e-4 0.115,-0.0149 0.569,0.1122 0.885,0.0544 0.053,0.2491 -0.053,0.0905 -0.105,0.0595 -0.063,0.0241 -0.067,-6e-4 -0.038,-0.016 -0.017,-0.0149 0.005,-0.029 -0.021,-0.0094 -0.065,-0.008 -0.081,0.0464 -0.012,0.0337 0.035,0.051 0.029,0.1139 -0.005,0.1627 -0.13,0.367 -0.025,0.1752 -0.007,0.29 0.024,0.1623 0.043,0.0842 0.024,0.0355 0.036,0.0223 0.193,0.0515 0.053,0.0224 0.096,0.0526 0.047,0.0567 0.034,0.0212 0.041,0.01 0.047,-0.0037 0.036,0.0052 0.031,0.0194 0.024,0.0238 0.029,0.0155 0.043,0.0134 0.048,0.0241 0.018,0.0194 -0.03,0.0745 -0.043,0.2742 0.021,0.0412 -0.039,0.0384 -0.099,0.0716 -0.082,-0.0046 -0.097,-0.0261 -0.159,-0.0237 -0.048,0.0252 -0.122,0.0965 0.041,0.3249 -0.023,0.1552 -0.025,0.0956 -0.05,0.0475 -0.047,0.0135 -0.108,0.0037 -0.194,0.0114 -0.449,0.2737 -0.332,0.1821 -0.636,0.1334 -0.112,0.0647 -0.079,0.0779 -0.175,0.1414 -0.117,0.0676 -0.095,0.0418 -0.327,0.0269 -0.08,0.0223 -0.072,0.0304 -0.193,0.1133 -0.108,0.0853 -0.035,0.0355 -0.021,0.0295 -0.044,0.0976 -0.258,0.0865 -0.01,-0.0177 -0.036,-0.0132 -0.024,-0.041 -0.038,-0.0409 -0.034,-0.0507 -0.021,-0.0575 -0.009,-0.0447 -0.037,-0.1133 -0.075,-0.13 -0.615,-0.3155 -0.152,-0.0401 -0.118,-0.0028 -0.162,0.1219 -0.08,0.0407 -0.095,0.0329 -0.162,0.0163 -0.084,-0.0129 -0.048,-0.0169 -0.125,-0.1211 -0.078,-0.1514 0.095,-0.1323 0.027,-0.0046 0.146,-0.004 0.091,0.0063 0.026,0.0069 0.136,0.0601 0.036,-0.0177 0.031,-0.0344 0.277,-0.217 0.058,-0.0578 0.021,-0.0298 -0.019,-0.008 -0.041,0.0029 -0.086,0.0174 -0.048,-0.0103 -0.076,-0.0369 -0.125,-0.0873 -0.059,-0.0224 -0.043,-0.0085 -0.124,0.0226 -0.163,0.0103 -0.088,-0.0435 -0.065,-6e-4 -0.051,0.0094 -0.095,0.0284 -0.012,-0.0149 0,-0.0378 0.012,-0.0487 -0.002,-0.0409 -0.005,-0.0309 -0.002,-0.0255 0.009,-0.0109 0.028,-0.012 0.006,-0.0226 -0.01,-0.0581 -0.017,-0.0625 -0.018,-0.1222 0.002,-0.1303 0.007,-0.0509 0.026,-0.1151 0.132,-0.0092 0.179,-0.0858 0.125,-0.0192 0.173,-0.0043 0.063,-0.0095 0.026,-0.0154 -0.007,-0.0129 -0.013,-0.0183 0.003,-0.0161 0.062,-0.111 0.383,-0.3871 0.323,-0.3046 0.042,-0.0922 -0.012,-0.0077 -0.141,-0.0246 -0.038,-0.0124 -0.041,-0.0194 -0.03,-0.0407 0.014,-0.02 0.144,-0.0292 0.045,-0.0223 0.043,-0.0344 0.299,-0.2966 -0.019,-0.154 0.064,-0.1122 0.04,-0.0433 0.05,-0.03 0.067,-0.0309 0.109,-0.0928 0.037,-0.047 0.008,-0.0355 -0.012,-0.0114 -0.014,-0.0011 -0.053,0.0125 -0.031,-0.0171 -0.041,-0.0413 -0.029,-0.1002 10e-4,-0.0509 0.019,-0.0487 0.033,-0.0466 -0.012,-0.0456 -0.022,-0.0372 -0.026,-0.0226 -0.022,-0.0077 -0.033,0.0011 -0.04,0.008 -0.031,0.0126 -0.019,0.0126 -0.002,0.0241 -0.003,0.0183 -0.012,0.0209 -0.014,0.0086 -0.024,-0.002 -0.031,-0.0178 -0.18,-0.17 -0.065,-0.0453 -0.037,-0.0211 -0.342,-0.3304 0.427,-0.2408 0.694,0.6639 0.055,0.075 0.125,0.0464 0.159,0.1577 0.014,0.0808 0.012,0.0266 0.194,-0.0696 0.094,-0.0787 0.031,-0.0332 0.03,-0.0464 0.022,-0.0558 0.027,-0.1016 0.036,-0.0504 0.042,-0.0361 0.036,-0.0052 0.03,0.0075 0.03,0.0258 0.023,0.0091 0.026,-0.008 0.082,-0.0641 0.022,-0.0304 -0.007,-0.0223 -0.068,-0.0206 -0.038,-0.0158 -0.029,-0.0169 -0.231,-0.328 -0.043,-0.0808 -0.077,-0.3727 0.89,-0.0607 0.552,-0.1517 0.258,-0.0753 0.103,0.0192 0.031,0.0263 0.009,0.0143 0.002,0.0092 0.012,0.0652 0.072,0.0716 -0.024,0.041 -0.115,0.0976 -0.061,0.0335 -0.142,0.0489 -0.022,0.0178 0.003,0.03 0.062,0.0725 0.026,0.0426 0.012,0.0484 0.007,0.071 0.027,0.1174 -0.012,0.0549 -0.029,0.0642 -0.078,0.1122 0.007,0.0283"},{"id":"26","nom":"NE","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"5","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"5","clSc11":"5","clSc12":"6","clSc13":"6","clSc14":"0","clSc15":"0","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"0","clSc22":"6","clSc23":"6","clSc24":"4","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 128.943,74.3257 0.229,0.0847 0.126,0.1145 0.067,0.0979 0.025,0.0582 0.012,0.0455 -0.012,0.0727 -0.044,0.1408 -0.011,0.0166 -0.012,0.0155 -0.043,0.0292 -0.012,0.0106 -0.025,0.0793 0.005,0.0693 0.027,-6e-4 1.689,-0.3584 0.077,-0.0135 0.007,0.152 0.153,0.0275 0.321,0.1237 0.087,0.051 0.042,0.0481 -0.001,0.0188 -0.016,0.0121 -0.027,0.0126 -0.017,0.0086 -0.012,0.0128 0.003,0.0175 0.009,0.0189 0.01,0.0177 0.01,0.029 0.019,0.0867 0.002,0.0286 0,0.031 -0.005,0.0194 -0.009,0.0241 -0.017,0.0212 -0.033,0.0128 -0.04,0.0112 -0.031,0.0137 -0.072,0.0438 -0.043,0.0198 -0.247,0.0716 -0.041,0.0349 -0.035,0.0504 -0.06,0.1838 -0.052,0.0779 -0.105,0.2001 -0.833,0.4706 -0.427,0.2408 -0.357,0.2027 -1.209,0.6856 -0.184,-0.2794 -0.019,-0.0449 -0.021,-0.0716 0.007,-0.1054 -0.009,-0.0624 -0.032,-0.0567 -0.091,-0.0503 -0.06,-0.0567 -0.03,-0.0673 0.026,-0.1062 -0.036,-0.1371 -0.653,0.2705 -0.294,0.1695 -0.17,0.0767 -0.335,0.0779 -0.54,0.1969 -0.153,0.0828 -0.112,0.0392 -0.097,0.012 -0.571,0.0195 -0.204,0.0246 0.041,-0.0693 0.018,-0.1534 -0.035,-0.1226 -0.148,-0.1929 -0.046,-0.1002 0.165,-0.3888 0.537,-0.213 1.192,-0.2565 0.739,-0.3851 0.253,-0.2499 -0.133,-0.2055 0.149,-0.1761 0.105,-0.0701 0.278,-0.0682 0.041,-0.0704 0.041,-0.0195 0.159,-0.0561 -0.013,-0.1895 0.332,-0.079 0.701,-0.4426 0.13,0.0338"},{"id":"27","nom":"Bas VS","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"6","clSc05":"6","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"6","clSc11":"6","clSc12":"6","clSc13":"6","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"0","clSc20":"6","clSc21":"11","clSc22":"6","clSc23":"6","clSc24":"4","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 136.188,87.7141 -0.232,0.0206 -0.33,0.0996 -0.655,0.3344 -0.355,0.087 -0.832,-0.0618 -0.146,0.0349 -0.311,0.1346 -0.684,0.1958 -0.334,0.0435 -0.362,0.0046 -0.34,-0.0487 -0.258,-0.1076 -0.497,-0.3882 -0.077,-0.0893 -0.059,-0.1117 -0.078,-0.2027 -0.127,-0.2302 -0.04,-0.1179 -0.054,-0.0252 -0.75,-0.5897 -0.252,-0.0773 -0.093,0.0263 -0.079,0.0567 -0.085,0.0446 -0.105,-0.0103 -0.097,-0.0515 -0.007,-0.0343 0.023,-0.0464 -0.005,-0.0859 0.016,-0.0109 -0.003,-0.1157 -0.02,-0.1099 -0.031,0.0109 0.051,-0.0573 0.089,-0.0755 0.078,-0.0848 0.011,-0.0847 -0.169,-0.114 -0.882,-0.1351 -0.096,-0.1861 0.102,-0.3796 0.192,-0.3968 0.393,-0.5296 -0.252,-0.3006 -0.393,-0.2889 -0.211,-0.253 0.059,-0.128 0.292,-0.2371 0.073,-0.1706 0.059,0.0136 0.123,-0.0185 0.059,0.0408 0.218,0.0549 0.159,-0.0274 0.098,0.0176 0.027,-0.0096 -0.023,0.0106 0.024,0.013 0.018,-0.0083 -0.008,-0.0126 0.018,0.0186 -0.013,-0.0203 0.027,-0.0126 -0.021,-0.0689 0.084,0.0198 0.085,-0.0211 0.039,0.0763 -0.025,0.0266 -0.003,0.0113 0.015,0.009 0.04,0.0054 -0.007,-0.0044 -0.036,-0.0038 -0.01,-0.0133 0.028,-0.0231 -0.002,-0.0208 0.048,0.0051 -0.056,-0.0181 0.007,-0.011 -0.032,-0.0351 0.01,-0.0013 0.152,0.1244 0.07,0.0948 -10e-4,0.057 -0.028,0.0738 -0.012,0.0825 0.041,0.0824 0.138,0.0653 0.149,0.0217 0.118,0.0653 0.05,0.1953 0.051,0.1007 0.704,0.8503 0.248,0.2316 0.082,0.1088 0.127,0.1139 0.424,-0.166 0.365,-0.1658 0.261,-0.225 0.127,-0.0383 0.212,-0.1489 0.154,-0.1509 0.131,-0.1583 0.042,-0.0836 -0.02,-0.1466 0.005,-0.0349 0.192,-0.1449 0.134,-0.1053 -0.095,0.074 1.077,0.1734 0.115,0.2134 -0.131,0.7718 0.082,0.1971 0.805,-0.2299 0.213,0.197 0.164,0.9524 0.132,1.2644 0.592,0.5471 0.102,-0.009"},{"id":"28","nom":"Haut VS","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"5","clSc05":"5","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"5","clSc11":"5","clSc12":"5","clSc13":"6","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"0","clSc20":"6","clSc21":"11","clSc22":"6","clSc23":"6","clSc24":"4","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 146.972,81.342 -0.325,0.3023 -0.184,0.0841 -0.255,0.0212 -0.097,0.0209 -0.036,0.0255 -0.006,0.0263 0.014,0.0218 0.004,0.0218 -0.007,0.024 -0.057,0.0744 -0.046,0.0791 -0.028,0.0715 0.01,0.083 0.004,0.0441 0,0.0044 -0.47,0.0701 -0.301,0.1133 -0.236,0.1729 -0.093,0.1406 0.042,0.047 0.074,0.0386 0.004,0.1122 -0.066,0.1014 -0.11,0.0913 -0.127,0.0673 -0.314,0.1099 -0.545,0.4982 -0.229,0.1105 -0.481,0.0744 -0.239,0.0767 -0.217,0.1523 -0.111,0.1082 -0.047,0.0934 0.039,0.0429 0.259,0.1563 0.327,0.4386 0.031,0.4065 -0.24,0.359 -0.485,0.2921 -0.12,0.028 -0.229,0.0172 -0.111,0.0595 -0.079,0.114 -0.024,0.1271 -0.001,0.1242 -0.059,0.3155 -0.02,0.0223 -0.108,0.1649 -0.008,0.0241 -0.138,0.1254 -0.079,0.0458 -0.107,0.0229 -0.785,0.1237 -0.16,0.0895 -0.121,0.1605 -0.03,0.2107 -0.228,0.0073 0,0 -0.013,0.0181 -0.035,0.1139 0.009,0.0579 -0.026,0.0372 -0.139,0.0527 -0.064,-0.0023 -0.198,-0.0424 -0.304,0.004 -0.533,-0.1357 -0.109,0.0086 -0.083,0.0275 -0.093,0.0154 -0.136,-0.0326 -0.016,-0.0281 -0.209,-0.2118 -0.166,-0.1077 -0.174,-0.0698 -1.129,-0.197 -0.185,0.067 -0.108,0.126 -0.122,0.1105 -0.102,0.009 -0.592,-0.5471 -0.132,-1.2644 -0.164,-0.9524 -0.213,-0.197 -0.805,0.2299 -0.082,-0.1971 0.131,-0.7718 -0.115,-0.2134 -1.077,-0.1734 0.095,-0.074 0.385,-0.1578 0.086,-0.1004 0.003,-0.0396 0.005,-0.0314 0.016,-0.0164 0.038,-0.0151 0.359,-0.0842 0.065,0 0.031,0.0246 0.007,0.0779 -0.01,0.055 -0.002,0.0349 0.012,0.0257 0.067,0.0144 0.066,0.0229 0.417,-0.0962 0.253,-0.1214 0.106,-0.0893 0.025,-0.0155 0.025,-0.0103 0.16,-0.024 0.483,-0.0035 0.265,0.055 0.03,0.0114 0.065,0.0118 0.069,-0.0017 0.096,-0.0169 0.395,-0.1168 0.162,-0.0997 -0.144,-0.0561 -0.066,-0.0595 0.255,-0.1097 0.375,-0.0787 0.034,-0.0263 0.118,-0.0653 0.025,-0.0235 0.013,-0.0412 0.017,-0.0327 0.035,-0.0211 0.053,-0.0195 0.23,0.0218 0.733,0.2433 0.131,-0.008 1.349,-0.6774 0.129,0.0272 0.168,-3e-4 0.101,-0.012 0.233,-0.0624 0.406,-0.1987 0.306,-0.1351 0.034,-0.0321 0.041,-0.0555 -0.001,-0.0355 -0.016,-0.0372 -0.024,-0.0364 -0.029,-0.0323 -0.017,-0.0244 0.002,-0.0151 0.02,-0.0166 0.038,-0.0229 0.361,-0.1544 0.285,-0.0105 0.946,0.1245 0.095,0.0564 0.266,0.0807 0.296,0.0218 0.015,0.0068 0.004,0.0207 0,0.0286 0.01,0.0355 0.036,0.0189 0.057,0.012 0.065,-0.0017 0.578,-0.0819 0.265,-0.0653 0.51,-0.1975 0.118,-0.0696 0.173,-0.077 0.115,-0.0801 0.057,-0.0556 0.046,-0.063 0.057,-0.2427 0.067,-0.1735 0.045,-0.0882 0.065,-0.0927 0.212,-0.1821 0.12,-0.0126 0.091,0.03 0.026,0.029 0.019,0.0486 -0.005,0.0945 -0.025,0.1368 -0.037,0.1203 -0.079,0.1798 -0.011,0.0532 0.014,0.0641 0.031,0.0688 0.117,0.2015 0.169,0.1815 0.438,0.1638"},{"id":"29","nom":"BE","clSc01":"0","clSc02":"0","clSc03":"2","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"2","clSc11":"2","clSc12":"3","clSc13":"11","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"2","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 134.933,74.3559 0.024,0.0121 0.069,0.0112 0.115,-0.014 0.09,-0.0332 0.086,-0.0745 0.1,-0.0618 0.06,-0.0475 0.091,-0.0161 0.082,-0.0481 0.059,-0.0211 0.171,-0.0235 0.026,0.142 0.016,0.0527 0.036,0.0292 0.052,0.0292 0.038,0.0389 -0.038,0.0584 -0.121,0.0573 -0.077,0.012 -0.067,-0.012 -0.053,-0.0212 -0.038,0 -0.122,0.069 -0.069,0.0707 -0.021,0.0532 0.023,0.106 -0.009,0.0529 -0.084,0.0341 -0.196,0.0361 -0.052,0.0037 -0.113,-0.0203 -0.071,0.0017 -0.125,-0.0155 -0.036,0.0083 -0.017,0.0484 0.012,0.0349 0.031,0.043 0.037,0.0409 0.067,0.0953 0.064,0.0367 0.039,0.0132 0.317,-0.0622 0.093,-0.012 0.026,0.0052 0.008,0.1004 0.096,0.1492 0.205,-0.0472 0.07,-0.0298 0.04,-0.0372 0.008,-0.0636 -0.017,-0.0527 -0.057,-0.0984 -10e-4,-0.0476 0.038,-0.0317 0.296,-0.0937 0.159,-0.0979 0.291,-0.2897 0.155,-0.1025 0.123,-0.0132 0.298,0.1403 0.51,0.0109 0.067,-0.0074 0.116,-0.0808 0.069,-0.0713 0.103,-0.0375 0.036,-0.0234 0.029,-0.0361 0.017,-0.0344 -0.019,-0.0635 -0.056,-0.0899 -0.158,-0.1944 -0.178,-0.1784 -0.203,-0.0629 -0.206,-0.1695 -0.008,-0.0853 -0.035,-0.0796 -0.013,-0.0415 -0.159,-0.1294 0.74,-0.0627 0.4,-0.122 0.375,0.3063 0.129,0.0559 0.306,0.0106 0.215,-0.055 0.105,0.0258 0.383,-0.0639 0.028,0.2162 0.01,0.0269 0.144,0.1683 0.287,0.4495 0.05,0.0641 0.059,0.0973 0.036,0.0879 0.002,0.1125 0.096,0.3356 -0.089,0.1093 -0.035,0.0745 -0.02,0.1145 0,0.2193 -0.035,0.2253 0,0.0684 0.026,0.0773 0.095,0.0882 0.077,0.091 0.057,0.0478 0.039,0.179 0.292,0.0183 0.08,0.0452 0.237,0.0338 -0.072,0.2562 -0.031,0.047 -0.038,0.1005 -0.026,0.0309 -0.038,0.0358 -0.02,0.03 -0.012,0.0687 -0.012,0.0344 -0.022,0.0229 -0.058,0.03 -0.017,0.0215 -0.024,0.043 -0.035,0.0406 -0.053,0.0269 -0.056,0.0063 -0.09,-0.0143 -0.027,0.004 -0.083,0.0372 -0.096,0.0261 -0.041,0.0203 -0.019,0.047 -0.002,0.0658 0.024,0.1346 -0.008,0.0807 -0.037,0.0638 -0.103,0.0707 -0.019,0.0521 0.101,0.2193 0.006,0.0865 0.172,0.1288 0.732,0.402 0.131,0.1391 0.146,0.122 0.069,0.0131 0.086,-0.0111 0.165,-0.0639 0.192,-0.0538 0.226,0.0106 0.35,0.0129 0.213,0.032 0.375,0.169 0.114,0.0538 0.132,0.0412 0.083,0.016 0.058,-0.008 0.261,-0.0693 0.131,-0.0183 0.579,0.0493 0.214,0.0463 0.108,0.0026 0.12,-0.0323 0.372,-0.1775 0.484,-0.1306 0.26,0.1595 0.105,0.0601 0.076,-0.0283 0.148,-0.0207 0.056,0 0.221,0.0542 -0.095,0.1531 -0.012,0.0527 0.01,0.1028 0.035,0.0667 0.062,0.0887 0.019,0.0441 0.003,0.0613 0.019,0.0446 0.008,0.0458 -0.001,0.0476 -0.012,0.0667 -0.016,0.0506 -0.038,0.0413 -0.08,0.0137 -0.088,-0.0034 -0.184,-0.033 -0.071,0.0066 -0.053,0.0424 0.004,0.1317 0.048,0.091 0.034,0.1432 -0.12,0.0126 -0.212,0.1821 -0.065,0.0927 -0.045,0.0882 -0.067,0.1735 -0.057,0.2427 -0.046,0.063 -0.057,0.0556 -0.115,0.0801 -0.173,0.077 -0.118,0.0696 -0.51,0.1975 -0.265,0.0653 -0.578,0.0819 -0.065,0.0017 -0.057,-0.012 -0.036,-0.0189 -0.01,-0.0355 0,-0.0286 -0.004,-0.0207 -0.015,-0.0068 -0.296,-0.0218 -0.266,-0.0807 -0.095,-0.0564 -0.946,-0.1245 -0.285,0.0105 -0.361,0.1544 -0.038,0.0229 -0.02,0.0166 -0.002,0.0151 0.017,0.0244 0.029,0.0323 0.024,0.0364 0.016,0.0372 0.001,0.0355 -0.041,0.0555 -0.034,0.0321 -0.306,0.1351 -0.406,0.1987 -0.233,0.0624 -0.101,0.012 -0.168,3e-4 -0.129,-0.0272 -1.349,0.6774 -0.131,0.008 -0.733,-0.2433 -0.23,-0.0218 -0.053,0.0195 -0.035,0.0211 -0.017,0.0327 -0.013,0.0412 -0.025,0.0235 -0.118,0.0653 -0.034,0.0263 -0.375,0.0787 -0.255,0.1097 0.066,0.0595 0.144,0.0561 -0.162,0.0997 -0.395,0.1168 -0.096,0.0169 -0.069,0.0017 -0.065,-0.0118 -0.03,-0.0114 -0.265,-0.055 -0.483,0.0035 -0.16,0.024 -0.025,0.0103 -0.025,0.0155 -0.106,0.0893 -0.253,0.1214 -0.417,0.0962 -0.066,-0.0229 -0.067,-0.0144 -0.012,-0.0257 0.002,-0.0349 0.01,-0.055 -0.007,-0.0779 -0.031,-0.0246 -0.065,0 -0.359,0.0842 -0.038,0.0151 -0.016,0.0164 -0.005,0.0314 -0.003,0.0396 -0.086,0.1004 -0.385,0.1578 -0.012,-0.2239 0.022,-0.0389 0.053,-0.0619 -0.003,-0.0378 -0.03,-0.0309 -0.067,-0.024 -0.159,-0.1125 -0.108,-0.0599 0.125,-0.2719 -0.002,-0.0584 -0.022,-0.0888 -0.036,-0.0673 -0.035,-0.0959 0.033,-0.0378 0.18,-0.075 0.102,-0.0933 0.039,-0.0756 0.007,-0.0681 -0.026,-0.15 0.007,-0.041 0.031,-0.0432 0.059,-0.053 0.082,-0.1102 0.034,-0.0887 0.014,-0.0905 -0.002,-0.0716 0.007,-0.0778 -0.005,-0.0476 -0.019,-0.0337 -0.032,-0.0332 -0.026,-0.0312 -0.048,-0.0954 0.449,-0.2737 0.194,-0.0114 0.108,-0.0037 0.047,-0.0135 0.05,-0.0475 0.025,-0.0956 0.023,-0.1552 -0.041,-0.3249 0.122,-0.0965 0.048,-0.0252 0.159,0.0237 0.097,0.0261 0.082,0.0046 0.099,-0.0716 0.039,-0.0384 -0.021,-0.0412 0.043,-0.2742 0.03,-0.0745 -0.018,-0.0194 -0.048,-0.0241 -0.043,-0.0134 -0.029,-0.0155 -0.024,-0.0238 -0.031,-0.0194 -0.036,-0.0052 -0.047,0.0037 -0.041,-0.01 -0.034,-0.0212 -0.047,-0.0567 -0.096,-0.0526 -0.053,-0.0224 -0.193,-0.0515 -0.036,-0.0223 -0.024,-0.0355 -0.043,-0.0842 -0.024,-0.1623 0.007,-0.29 0.025,-0.1752 0.13,-0.367 0.005,-0.1627 -0.029,-0.1139 -0.035,-0.051 0.012,-0.0337 0.081,-0.0464 0.065,0.008 0.021,0.0094 -0.005,0.029 0.017,0.0149 0.038,0.016 0.067,6e-4 0.063,-0.0241 0.105,-0.0595 0.053,-0.0905 -0.053,-0.2491 -0.885,-0.0544 -0.569,-0.1122 -0.115,0.0149 -0.052,6e-4 -0.038,-0.0141 -0.007,-0.0283 0.078,-0.1122 0.029,-0.0642 0.012,-0.0549 -0.027,-0.1174 -0.007,-0.071 -0.012,-0.0484 -0.026,-0.0426 -0.062,-0.0725 -0.003,-0.03 0.022,-0.0178 0.142,-0.0489 0.061,-0.0335 0.115,-0.0976 0.024,-0.041 -0.072,-0.0716 -0.012,-0.0652 -0.002,-0.0092 -0.009,-0.0143 -0.031,-0.0263 -0.103,-0.0192 -0.258,0.0753 -0.552,0.1517 -0.89,0.0607 -0.458,-0.1268 0.105,-0.2001 0.025,-0.0372 3.962,-1.6761 m -1.86,2.4822 0.038,0.0567 0.033,-0.0057 0.024,0.0025 0.034,-0.0105 0.026,-0.0207 0.013,-0.0148 -0.003,-0.0396 -0.165,0.0321"},{"id":"30","nom":"Piedmont","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"0","clSc05":"0","clSc08":"0","clSc06":"7","clSc07":"8","clSc09":"0","clSc10":"7","clSc11":"7","clSc12":"0","clSc13":"7","clSc14":"0","clSc15":"0","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"10","clSc22":"7","clSc23":"7","clSc24":"0","clSc25":"0","clSc26":"7","clSc27":"7","clSc28":"7","chemin":"m 138.23,108.388 0,0 0.044,0.069 -0.022,0.191 -0.124,0.12 -0.16,0.088 -0.121,0.099 -0.071,0.135 -0.092,0.248 -0.086,0.128 -0.247,0.199 -0.573,0.349 -0.223,0.258 -0.48,0.383 -0.173,0.23 0.054,0.28 0.217,0.532 -0.146,0.075 -0.047,0 -0.046,-0.005 -0.048,0.015 -0.007,0.041 0.017,0.141 -0.01,0.038 -0.088,0.033 -0.064,-0.005 -0.092,0.056 -0.093,0.08 -0.095,0.072 -0.124,-0.134 -0.213,-0.089 -0.216,0.062 -0.165,0.134 -0.059,0.129 -0.017,0.127 -0.139,0.078 -0.121,0.087 -0.047,0.105 -0.083,0.132 -0.128,0.013 -0.201,-0.027 -0.228,-0.063 -0.255,0.019 -0.173,0.075 -0.146,0.118 0.037,0.119 -0.2,0.164 -0.111,0.048 -0.078,-0.139 -0.211,-0.036 -0.145,0.045 -0.144,0.015 -0.082,0.103 -0.084,0.047 -0.039,0.081 -0.077,0.311 0.066,0.299 0.005,0.059 0.041,0.122 0.03,0.094 -0.149,0.069 -0.139,-0.186 -0.096,-0.041 -0.176,-0.004 -0.192,0.087 -0.144,0.121 -0.144,0.086 -0.087,0.065 -0.073,-0.129 -0.179,0.009 -0.229,-0.02 -0.202,0.021 -0.15,0.076 -0.187,0.143 -0.047,0.163 0.096,0.051 -0.007,0.006 0.054,0.03 0.005,0.05 -0.234,0.219 -0.478,-0.229 -0.125,-0.186 0.094,-0.273 0.218,-0.286 0.073,-0.166 -0.016,-0.166 -0.131,-0.122 -0.174,-0.005 -0.185,0.037 -0.164,0 -0.181,-0.075 -0.681,-0.465 -0.051,-0.048 -0.026,-0.082 0.043,-0.267 -0.015,-0.117 -0.149,-0.326 -0.088,-0.08 -0.41,-0.023 -0.521,-0.138 -0.191,-0.144 -0.13,-0.258 0.118,-0.063 0.247,-0.071 0.282,-0.032 0.071,-0.025 0.041,-0.054 -0.013,-0.081 -0.108,-0.196 -0.019,-0.101 0.028,-0.108 0.058,-0.099 0.081,-0.08 0.1,-0.045 0.481,-0.027 0.163,-0.087 0.275,-0.248 0.112,-0.051 0.209,-0.031 0.171,0.028 0.546,0.224 0.175,0.004 0.371,-0.057 -0.296,-0.265 -0.635,-0.38 -0.439,-0.568 -0.375,-0.15 -0.301,-0.188 -0.033,-0.406 -0.102,-0.288 -0.31,-0.277 -0.249,-0.313 0.081,-0.392 0.316,-0.636 0.139,-0.19 0.304,-0.22 0.312,-0.393 0.219,-0.13 0.445,-0.141 0.217,-0.131 0.194,0.164 0.044,0.055 -0.044,-0.055 -0.194,-0.164 -0.05,-0.041 -0.046,-0.051 -0.041,-0.102 0.002,-0.056 0.028,-0.066 0.093,-0.346 0.078,-0.096 0.372,-0.147 -0.29,-0.173 -0.337,-0.254 -0.248,-0.311 -0.035,-0.344 0.118,-0.149 0.565,-0.31 0.38,-0.471 0.155,-0.083 -0.125,-0.236 0.044,-0.125 0.035,-0.1 0.204,-0.179 0.254,-0.1 0.204,-10e-4 0.399,0.085 0.199,-0.003 -0.065,-0.144 -0.116,-0.158 -0.22,-0.296 -0.043,-0.095 -0.059,-0.273 -0.126,-0.24 0.008,-0.015 0.055,-0.174 0.02,-0.008 -0.001,-0.053 0.011,-0.03 0.003,-0.034 -0.024,-0.065 -0.046,-0.056 -0.199,-0.155 -0.555,-0.1626 -0.193,-0.0114 -0.546,0.0779 -0.21,-0.0378 -0.763,-0.3167 -0.363,-0.2233 -0.194,-0.2319 0.022,-0.6201 -0.071,-0.3177 -0.291,-0.15 -0.388,-0.0258 -0.117,-0.071 -0.133,-0.1632 -0.03,-0.1002 0.013,-0.0887 -0.017,-0.0779 -0.181,-0.1105 -0.194,-0.2107 0.131,-0.1254 0.164,-0.0973 0,0 0.037,-0.0218 0.384,-0.1563 0.098,-0.0126 0.201,0.0051 0.087,-0.0103 0.096,-0.0389 0.199,-0.1094 0.084,-0.0303 0.388,0.0464 0.407,0.1557 0.398,0.0996 0.361,-0.1231 0.022,-0.0687 -0.064,-0.0509 -0.052,-0.0602 0.058,-0.0939 0.087,-0.0274 0.259,-0.0023 0.101,-0.0172 0.163,-0.1042 0.192,-0.2382 0.143,-0.0968 0.396,-0.1277 0.391,-0.0761 0.088,0.0269 0.139,0.1191 0.058,0.0149 0.074,-0.0538 0.211,-0.272 0.301,-0.1787 0,-0.174 -0.119,-0.2222 -0.056,-0.3212 0.057,-0.0653 0.359,-0.3017 0.229,-0.2897 0.098,-0.1689 0.012,-0.138 -0.086,-0.0464 -0.474,-0.146 -0.148,-0.079 -0.089,-0.1243 -0.077,-0.138 -0.071,-0.0797 0,0 -0.038,-0.0416 -0.482,-0.256 -0.506,-0.1992 -0.084,-0.1609 -0.06,-0.4581 -0.044,-0.0824 -0.121,-0.1306 -0.022,-0.0893 0.03,-0.0922 0.127,-0.1947 0.026,-0.0629 -0.067,-0.1649 -0.137,-0.067 -0.359,-0.0642 -0.148,-0.079 -0.252,-0.1752 -0.148,-0.0389 -0.289,-0.0412 -0.299,-0.1564 -0.223,-0.2359 -0.125,-0.4592 -0.009,-0.0599 -0.021,-0.1382 0.008,-0.1975 0.06,-0.1821 0.14,-0.1632 0.171,-0.0715 0.301,-0.0635 0.096,0.0268 0.072,0.0306 0.065,0.0728 0.069,-0.0153 0.012,-0.0498 0.011,-0.0766 0.008,-0.0567 0.077,-0.008 0.274,0.0017 0.236,-0.0487 0.251,-0.0893 0.223,-0.1323 0.151,-0.1775 0.07,-0.1494 0.089,-0.1334 0.117,-0.1019 0.159,-0.0527 0.497,0.3882 0.258,0.1076 0.34,0.0487 0.362,-0.0046 0.334,-0.0435 0.684,-0.1958 0.311,-0.1346 0.146,-0.0349 0.832,0.0618 0.355,-0.087 0.655,-0.3344 0.33,-0.0996 0.232,-0.0206 0.122,-0.1105 0.108,-0.126 0.185,-0.067 1.129,0.197 0.174,0.0698 0.166,0.1077 0.209,0.2118 0.016,0.0281 0.136,0.0326 0.093,-0.0154 0.083,-0.0275 0.109,-0.0086 0.533,0.1357 0.304,-0.004 0.198,0.0424 0.064,0.0023 0.139,-0.0527 0.026,-0.0372 -0.009,-0.0579 0.035,-0.1139 0.013,-0.0181 0,0 0.228,-0.0073 0.03,-0.2107 0.121,-0.1605 0.16,-0.0895 0.785,-0.1237 0.107,-0.0229 0.079,-0.0458 0.138,-0.1254 0.008,-0.0241 0.108,-0.1649 0.02,-0.0223 0.059,-0.3155 0.001,-0.1242 0.024,-0.1271 0.079,-0.114 0.111,-0.0595 0.229,-0.0172 0.12,-0.028 0.485,-0.2921 0.24,-0.359 -0.031,-0.4065 -0.327,-0.4386 -0.259,-0.1563 -0.039,-0.0429 0.047,-0.0934 0.111,-0.1082 0.217,-0.1523 0.239,-0.0767 0.481,-0.0744 0.229,-0.1105 0.545,-0.4982 0.314,-0.1099 0.127,-0.0673 0.11,-0.0913 0.066,-0.1014 -0.004,-0.1122 -0.074,-0.0386 -0.042,-0.047 0.093,-0.1406 0.236,-0.1729 0.301,-0.1133 0.47,-0.0701 0.147,-0.0218 0.318,0.0386 0.153,0.1523 0.045,0.2502 0.006,0.3344 -0.038,0.3192 -0.179,0.574 -0.038,0.2852 0.043,0.2702 0.122,0.1781 0.204,0.1168 0.289,0.0807 0.306,0.1071 0.315,0.2244 0.7,0.718 0.107,0.0384 0.214,0.0515 0.517,0.2096 0.195,0.0069 0.079,-0.0309 0.171,-0.106 0.069,-0.0223 0.056,0.0144 0.059,0.6824 -0.002,0.063 -0.014,0.0756 -0.051,0.1345 -0.04,0.065 -0.043,0.0456 -1.414,1.0472 -0.029,0.0315 -0.022,0.0486 0.002,0.0839 0.027,0.1721 0.076,0.2078 0.052,0.3281 -0.007,0.0693 -0.02,0.039 -0.02,0.0337 -0.028,0.0343 -0.031,0.0298 -0.231,0.1432 -0.03,0.0275 -0.027,0.0337 -0.019,0.0347 0.034,0.101 0.084,0.1495 0.246,0.3304 0.119,0.1299 0.093,0.0751 0.227,0.0423 0.087,0.0355 0.035,0.0389 0.024,0.0547 -0.006,0.1068 -0.013,0.0638 -0.036,0.0896 0.003,0.0453 0.028,0.0418 0.07,0.0421 0.061,0.0089 0.111,-0.0132 0.047,0.0119 0.022,0.039 -0.005,0.079 0.003,0.0618 0.016,0.0602 0.039,0.067 0.007,0.0475 -0.044,0.0481 -0.052,0.0057 -0.053,-0.0017 -0.043,0.0034 -0.005,0.0407 0.043,0.0716 0.297,0.2479 0.024,0.0426 0.015,0.0513 -0.029,0.2016 0.107,0.0961 -0.018,0.1088 0.011,0.0547 0.031,0.0753 0.066,0.1185 0.022,0.0745 0.012,0.1059 0.039,0.0529 0.071,0.0657 0.235,0.1328 0.222,0.0552 0.047,0.0186 0.067,0.075 0.082,0.1214 0.278,0.536 0.031,0.0411 0.202,0.1736 -0.742,0.1932 -0.333,0.1689 -0.003,0.0386 0.041,0.0216 0.139,0.0557 0.04,0.0235 0.025,0.0292 0.005,0.0356 -0.017,0.032 -0.044,0.0271 -0.306,0.1277 -0.074,0.0485 -0.033,0.0292 -0.029,0.0337 -0.021,0.0383 -0.015,0.0413 -0.026,0.1357 -0.016,0.0378 -0.024,0.0281 -0.06,0.0077 -0.087,-0.0086 -0.201,-0.0455 -0.083,-0.0406 -0.056,-0.0419 -0.176,-0.2774 -0.052,-0.0649 -0.058,-0.0608 -0.038,-0.0258 -0.043,-0.0205 -0.103,-0.0278 -0.488,-0.0798 -0.176,0.0019 -0.063,0.0095 -0.047,0.0159 -0.05,0.0504 -0.048,0.0777 -0.069,0.1732 -0.084,0.1597 -0.124,0.1013 0,2e-4 -0.018,0.0153 -0.055,0.0819 -0.067,0.075 -0.016,0.0269 -0.002,0.0393 0.019,0.0466 0.064,0.0492 0.06,0.0275 0.048,0.0421 0.026,0.0633 0.015,0.209 0.059,0.0653 0.055,0.0263 0.043,0.0315 0.018,0.0403 -0.027,0.0787 -0.005,0.0653 0.02,0.0787 0.103,0.1137 0.072,0.0527 0.061,0.0361 0.026,0.0366 0.015,0.032 -0.084,0.1592 0.033,0.0996 0.024,0.055 0.072,0.0968 0.021,0.0178 0.092,0.1923 0.381,0.3224 0.271,0.5202 0.149,0.2196 0.26,0.182 0.147,-0.0724 0.13,0.0084 0.211,0.064 0.42,0 0.257,-0.0314 0.658,-0.2852 0.186,-0.0561 0.305,0.051 0.033,0.0142 0.003,0.0614 -0.054,0.2776 -0.002,0.0481 0.005,0.0441 0.012,0.0421 0.014,0.0364 0.017,0.0326 0.023,0.0341 0.022,0.0146 0.155,0.0756 0.077,0.0269 0.072,0.0165 0.327,0.0184 0.095,0.0243 0.078,0.0363 0.021,0.0132 0.055,0.0436 0.036,0.0409 0.033,0.0558 0.029,0.1036 -0.003,0.0602 -0.026,0.0916 0.026,0.0579 0.056,0.0658 0.21,0.1701 0.597,0.3829 0.033,0.0313 0.022,0.0415 0,0.0682 -0.019,0.0411 -0.05,0.0733 -0.012,0.0436 -0.006,0.0423 0.009,0.0415 0.049,0.0593 0.077,0.07 0.18,0.138 0.109,0.049 0.089,0.023 0.267,0 0.252,0.029 0.052,0.016 0.043,0.018 0.039,0.022 0.045,0.042 0.048,0.057 0.114,0.177 0.199,0.437 0.057,0.081 0.048,0.05 0.038,0.024 0.041,0.126 -0.05,0.429 0.019,0.757 -0.043,0.16 -0.082,0.074 -0.14,0.063 -0.104,0.036 -0.171,0.027 -0.065,0.002 -0.155,-0.026 -0.151,-0.043 -0.057,-0.023 -0.044,-0.026 -0.033,-0.027 -0.019,-0.035 -0.008,-0.043 -0.01,-0.095 -0.066,-0.053 -0.116,-0.052 -0.533,-0.143 -0.154,-0.092 -0.158,-0.142 -0.153,-0.073 -0.188,-0.062 -0.089,-0.04 -0.064,-0.034 -0.099,-0.116 -0.069,-0.019 -0.093,-0.005 -0.239,0.022 -0.062,0.019 -0.028,0.024 -0.015,0.025 -0.05,0.143 -0.017,0.03 -0.015,0.018 -0.122,0.096 -0.19,0.119 -0.024,0.03 -0.009,0.034 0.016,0.031 0.034,0.024 0.135,0.059 0.115,0.069 0.027,0.03 0.023,0.035 0.013,0.04 0.005,0.047 0.002,0.148 0.011,0.092 10e-4,0.046 -0.003,0.046 -0.019,0.05 -0.04,0.048 -0.087,0.054 -0.065,0.011 -0.226,-0.025 -0.278,-0.004 -0.127,0.011 -0.083,0.024 -0.025,0.033 -0.058,0.165 -0.019,0.039 -0.024,0.033 -0.031,0.029 -0.036,0.025 -0.165,0.087 -0.031,0.027 -0.058,0.074 -0.103,0.105 -0.031,0.021 -0.027,0.004 -0.03,-0.014 -0.026,-0.027 -0.015,-0.036 0,-0.043 0.03,-0.123 -0.006,-0.041 -0.021,-0.035 -0.086,-0.086 -0.053,-0.067 -0.064,-0.104 -0.093,-0.084 -0.051,-0.068 -0.043,-0.072 -0.024,-0.032 -0.031,-0.03 -0.062,-0.024 -0.09,-0.019 -0.873,-0.068 -0.122,0.001 -0.089,0.012 -0.04,0.024 -0.025,0.031 -0.04,0.076 -0.015,0.039 -0.041,0.074 -0.015,0.038 -0.003,0.037 0.017,0.036 0.019,0.032 0.013,0.037 -0.003,0.037 -0.019,0.037 -0.024,0.034 -0.084,0.093 -0.082,0.07 -0.2,0.095 -0.973,-0.021 -0.311,0.031 -0.113,0.038 -0.089,0.001 -0.08,-0.013 -0.097,-0.035 -0.058,0.002 -0.05,0.014 -0.159,0.087 -0.033,0.024 -0.026,0.023 -0.017,0.019 -0.017,0.033 -0.014,0.034 -0.04,0.047 -0.058,0.046 -0.131,0.061 -0.07,0.003 -0.05,-0.017 -0.029,-0.031 -0.031,-0.026 -0.037,-0.024 -0.094,-0.033 -0.207,-0.05 -0.054,-0.021 -0.085,-0.045 -0.108,-0.072 -0.177,-0.071 -0.082,-0.046 -0.019,-0.019 -0.058,-0.06 -0.116,-0.083 -0.151,0.025 -0.169,0.158 -0.029,0.041 -0.075,0.138 -0.051,0.122 -0.089,0.108 -0.036,0.074 -0.014,0.055 0.009,0.043 0.02,0.036 0.029,0.029 0.069,0.052 0.033,0.045 0.024,0.059 0.006,0.12 -0.023,0.07 -0.04,0.068 -0.081,0.088 -0.037,0.03 -0.038,0.023 -0.04,0.018 -0.166,0.036 -0.045,0.014 -0.055,0.046 -0.057,0.066 -0.124,0.177 -0.041,0.106 -0.029,0.117 -0.028,0.046 -0.039,0.033 -0.21,0.107 -0.074,0.056 -0.077,0.081 -0.068,0.058 -0.075,0.045 -0.122,0.04 -0.081,0.043 -0.027,0.04 0,0.04 0.029,0.028 0.039,0.024 0.026,0.054 0.005,0.079 -0.077,0.269 -0.014,0.075 0.004,0.043 0.013,0.04 0.009,0.059 0,0.074 -0.031,0.125 0.007,0.068 0.022,0.045 0.041,0.022 0.036,0.039 0.025,0.054 0,0.105 -0.018,0.059 -0.024,0.05 -0.106,0.127 -0.115,0.118 -0.071,0.042 -0.029,0.012 -0.036,0.009 -0.055,10e-4 -0.109,-0.017 -0.152,-0.042 -0.112,-0.015 -0.067,0.015 -0.053,0.032 -0.103,0.088 -0.039,0.061 -0.014,0.056 0.017,0.036 0.032,0.029 0.045,0.019 0.087,0.028 0.026,0.019 0.022,0.032 0.009,0.061 -0.012,0.035 -0.021,0.026 -0.061,0.023 -0.08,0.012 -0.765,-0.069 -0.21,-0.046 -0.722,-0.023 -0.299,-0.04 -0.036,-0.025 -0.153,-0.067 -0.18,-0.058 -0.103,-0.015 -0.08,0.001 -0.046,0.016 -0.042,0.02 -0.073,0.049 -0.033,0.027 -0.083,0.101 -0.019,0.032 -0.013,0.037 -0.007,0.039 0.007,0.04 0.019,0.038 0.029,0.028 0.041,0.021 0.005,0.023 -0.001,0.021 -0.318,0.087 -0.237,0.008 m -7.813,-1.672 0.074,0.022 -0.074,-0.022 -0.104,-0.085 -0.009,-0.016 0.009,0.016 0.104,0.085 m 1.074,0.159 0.278,0.107 0.184,0.048 -0.184,-0.048 -0.278,-0.107 m 1.388,0.519 0.513,0.227 0.104,0.032 -0.104,-0.032 -0.513,-0.227 m 1.089,0.348 0.066,0.018 0.039,0.041 -0.039,-0.041 -0.066,-0.018 m 0.255,0.228 0.052,0.037 0.106,0.017 0.223,0.004 -0.223,-0.004 -0.106,-0.017 -0.052,-0.037 m 3.649,-0.526 -0.043,0.1 0.043,-0.1 0,0 m -0.15,0.363 0.133,0.203 0.122,0.088 -0.122,-0.088 -0.133,-0.203 m -8.115,-1.956 0.066,0.112 0.021,0.029 -0.021,-0.029 -0.066,-0.112 m 0.392,0.356 0.055,0.029 0.025,0.021 -0.025,-0.021 -0.055,-0.029"},{"id":"31","nom":"TI","clSc01":"0","clSc02":"0","clSc03":"3","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"3","clSc11":"3","clSc12":"0","clSc13":"3","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"4","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 153.383,81.9306 0.024,-0.0098 0.05,-0.0137 0.167,-0.0166 0.127,0.1655 0.003,0.0661 -0.005,0.0896 -0.022,0.1214 0.019,0.0927 0.041,0.0776 0.055,0.0753 0.009,0.0452 -0.026,0.0484 -0.036,0.1074 -0.047,0.0904 0.012,0.335 -0.039,0.0767 -0.17,0.221 -0.019,0.0748 0.009,0.0735 0.018,0.0693 -0.018,0.0538 -0.045,0.0722 -0.091,0.0756 -0.005,0.0449 0.017,0.055 0.089,0.1551 0.115,0.1589 0.007,0.0413 0.004,0.0552 -0.033,0.1423 0.021,0.0584 0.036,0.0581 0.087,0.0993 0.074,0.0459 0.183,0.0881 0.232,0.1961 0.096,0.0656 0.253,0.13 0.002,5e-4 0.005,0.0013 -0.006,0.0079 -0.805,0.3779 -0.205,0.2136 -0.043,0.1431 0.024,0.2496 -0.036,0.1363 -0.088,0.1037 -0.105,0.0429 -0.243,0.0532 -0.284,0.1529 -0.048,0.126 0.197,0.3859 -0.365,0.2342 -0.024,0.0275 -0.008,0.0286 0.008,0.028 0.024,0.0281 0.12,0.0842 0.091,0.2015 0.101,0.1042 0.108,0.043 0.241,0.0337 0.104,0.0464 0.126,0.1838 -0.042,0.1884 -0.276,0.375 -0.354,0.3035 -0.333,-0.0435 -0.363,-0.1128 -0.34,0.0724 -0.099,0.0209 0.042,-0.1706 0.066,-0.1317 0.045,-0.1374 -0.019,-0.1918 -0.061,-0.1449 -0.093,-0.1449 -0.193,-0.2387 -0.108,-0.1769 -0.073,-0.0705 -0.074,-0.0406 -0.636,-0.2376 -0.169,-0.0418 -0.19,-0.0086 0.018,-0.0298 0.043,-0.0532 0.194,-0.3115 0.317,-0.2686 0.164,-0.2599 -0.282,-0.2588 -0.167,-0.0407 -0.34,0.0058 -0.177,-0.0172 -0.085,-0.0401 -0.081,-0.1036 -0.036,-0.009 0,-1e-4 -0.056,-0.0144 -0.069,0.0223 -0.171,0.106 -0.079,0.0309 -0.195,-0.0069 -0.517,-0.2096 -0.214,-0.0515 -0.107,-0.0384 -0.7,-0.718 -0.315,-0.2244 -0.306,-0.1071 -0.289,-0.0807 -0.204,-0.1168 -0.122,-0.1781 -0.043,-0.2702 0.038,-0.2852 0.179,-0.574 0.038,-0.3192 -0.006,-0.3344 -0.045,-0.2502 -0.153,-0.1523 -0.318,-0.0386 -0.147,0.0218 0,-0.0044 -0.004,-0.0441 -0.01,-0.083 0.028,-0.0715 0.046,-0.0791 0.057,-0.0744 0.007,-0.024 -0.004,-0.0218 -0.014,-0.0218 0.006,-0.0263 0.036,-0.0255 0.097,-0.0209 0.255,-0.0212 0.184,-0.0841 0.325,-0.3023 0.364,-0.2108 0.026,-0.0575 0.043,-0.0724 0.086,-0.1764 0.028,-0.0266 0.037,-0.024 0.083,-0.0164 0.127,-0.0048 0.972,0.1531 0.46,-0.1377 0.37,0.1171 0.855,0.0541 0.653,-0.0787 0.562,-0.1552 0.107,-0.0544 0.024,-0.0366 -0.007,-0.0361 -0.024,-0.0343 -0.012,-0.0498 0.017,-0.0556 0.081,-0.0779 0.077,-0.0297 0.086,-0.0229 0.107,-0.0166 0.091,-0.0607 0.062,-0.0029 0.032,0.0189 0.012,0.0584 0.031,0.055 0.055,0.0618 0.377,0.0258 0.055,0.0157 0.077,0.0327 0.126,0.036 0.146,0.0965 0.027,0.0258 0.009,0.0346 -0.022,0.0427 -0.083,0.1073 -0.038,0.0656 -0.031,0.0801 -0.019,0.0693 -0.022,0.1317 -0.017,0.0596 -0.017,0.0441 -0.009,0.034 0.069,0.2133 0.029,0.059 0.033,0.0509 0.118,0.138 0.121,0.1214 0.077,0.0241"},{"id":"32","nom":"GR","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"5","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"5","clSc11":"5","clSc12":"0","clSc13":"0","clSc14":"2","clSc15":"2","clSc16":"9","clSc17":"2","clSc18":"2","clSc19":"4","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 158.674,75.5395 0.305,0.0347 0.228,-0.0496 0.207,0.0375 0.581,-0.0492 0.185,0.0192 2.094,0.4512 -0.019,0.1262 0.047,0.0275 0.069,-0.0037 0.042,0.0343 0,0.0653 -0.045,0.1059 -0.028,0.26 -0.035,0.1194 0.018,0.1039 0.141,0.1368 0.275,0.1443 1.185,0.262 0.428,0.2791 0.25,0.099 0.478,0.1054 0.154,0.004 0.075,0.002 0.287,-0.0558 0.483,-0.1686 0.113,-0.1131 0.03,-0.0848 0.009,-0.0933 0.053,-0.1403 0.168,-0.1944 0.18,-0.0229 0.215,0.0387 0.276,-0.0089 0.006,-0.207 0.194,-0.2542 0.279,-0.2193 0.322,-0.1262 0.061,-0.0083 0.061,0.0083 0.059,0.026 0.001,0 0,0.0017 0.114,0.0842 0.232,0.2548 0.376,0.205 0.099,0.0807 0.06,0.1869 -0.138,0.3765 0.026,0.2365 -0.058,0.3567 -0.04,0.0996 -0.065,0.0704 -0.242,0.1999 0.021,0.1649 0.079,0.1612 0.027,0.1525 -0.134,0.14 -0.188,0.0828 -0.044,0.1013 0.01,0.1263 -0.024,0.1571 -0.107,0.1309 -0.12,0.0787 -0.052,0.1054 0.092,0.2118 0.201,0.1603 0.472,0.035 0.231,0.1339 0.083,0.2136 -0.008,0.286 -0.088,0.2745 -0.067,0.0776 0,0 -0.087,0.0994 -0.201,0.0266 -0.793,-0.144 -0.386,0.0252 -0.142,-0.016 -0.125,-0.0398 -0.07,-0.051 -0.058,-0.0558 -0.087,-0.0533 -0.457,-0.1082 -0.05,-0.1202 0.061,-0.2276 -0.022,-0.1251 -0.176,-0.0997 -0.285,0.0018 -1.049,0.2081 -0.107,0.0404 -0.048,0.0818 -0.136,0.3613 -0.092,0.0848 -0.239,0.1649 -0.095,0.0985 -0.015,0.0795 -0.002,0.2434 -0.048,0.1179 0.014,0.1025 0.026,0.0805 0.054,0.0621 0.096,0.0452 -0.196,0.2296 0.174,0.15 0.325,0.0876 0.496,0.0665 0.191,0.0532 0.082,0.1231 -0.084,0.2416 -0.08,0.0745 -0.232,0.1443 -0.084,0.1076 -0.056,0.15 -0.007,0.1014 0.045,0.0933 0.1,0.1237 0.457,0.3223 0.142,0.1976 -0.145,0.2118 -0.309,0.1351 -0.468,0.1231 -0.366,-0.0051 -0.009,-0.2502 -0.112,-0.1884 -0.438,-0.2691 -0.162,-0.1523 -0.073,-0.2428 -0.004,-0.2193 -0.073,-0.1803 -0.278,-0.126 -0.227,-0.0409 -0.216,-0.0112 -0.483,0.0575 -0.737,0.2623 -0.231,0.0518 -0.142,-0.0212 -0.27,-0.1128 -0.119,-0.002 -0.12,0.0942 -0.022,0.1265 0.017,0.1257 -0.004,0.0873 -0.17,0.1626 -0.208,0.0584 -1.27,-0.0103 -0.258,-0.0652 -0.235,-0.1105 -0.14,-0.1346 -0.221,-0.3997 -0.099,-0.0561 -0.245,-0.0942 -0.08,-0.0543 -0.022,-0.0622 0.016,-0.1689 -0.066,-1.0627 -0.036,-0.0695 -0.087,0.0134 -0.178,0.0911 -0.076,0.0707 -0.039,0.0787 -0.054,0.0664 -0.12,0.0332 -0.084,-0.0252 -0.283,-0.1861 -0.008,-0.1371 -0.219,-0.0404 -0.54,0.0459 -0.212,0.1357 -0.192,0.2668 -0.087,0.2714 0.106,0.1497 0.148,0.0707 0.022,0.1111 -0.029,0.1397 10e-4,0.1583 0.149,0.3931 0.015,0.1425 -0.068,0.244 -0.325,0.4695 -0.164,0.3967 0,10e-5 -0.101,0.1122 -0.128,0.083 -0.133,0.0435 -0.121,0.0619 -0.061,0.1099 -0.052,0.1277 -0.081,0.1066 -0.005,-0.0013 -0.002,-5e-4 -0.253,-0.13 -0.096,-0.0656 -0.232,-0.1961 -0.183,-0.0881 -0.074,-0.0459 -0.087,-0.0993 -0.036,-0.0581 -0.021,-0.0584 0.033,-0.1423 -0.004,-0.0552 -0.007,-0.0413 -0.115,-0.1589 -0.089,-0.1551 -0.017,-0.055 0.005,-0.0449 0.091,-0.0756 0.045,-0.0722 0.018,-0.0538 -0.018,-0.0693 -0.009,-0.0735 0.019,-0.0748 0.17,-0.221 0.039,-0.0767 -0.012,-0.335 0.047,-0.0904 0.036,-0.1074 0.026,-0.0484 -0.009,-0.0452 -0.055,-0.0753 -0.041,-0.0776 -0.019,-0.0927 0.022,-0.1214 0.005,-0.0896 -0.003,-0.0661 -0.127,-0.1655 -0.167,0.0166 -0.05,0.0137 -0.024,0.0098 -0.077,-0.0241 -0.121,-0.1214 -0.118,-0.138 -0.033,-0.0509 -0.029,-0.059 -0.069,-0.2133 0.009,-0.034 0.017,-0.0441 0.017,-0.0596 0.022,-0.1317 0.019,-0.0693 0.031,-0.0801 0.038,-0.0656 0.083,-0.1073 0.022,-0.0427 -0.009,-0.0346 -0.027,-0.0258 -0.146,-0.0965 -0.126,-0.036 -0.077,-0.0327 -0.055,-0.0157 -0.377,-0.0258 -0.055,-0.0618 -0.031,-0.055 -0.012,-0.0584 -0.032,-0.0189 -0.062,0.0029 -0.091,0.0607 -0.107,0.0166 -0.086,0.0229 -0.077,0.0297 -0.081,0.0779 -0.017,0.0556 0.012,0.0498 0.024,0.0343 0.007,0.0361 -0.024,0.0366 -0.107,0.0544 -0.562,0.1552 -0.653,0.0787 -0.855,-0.0541 -0.37,-0.1171 0.033,-0.1503 -0.024,-0.0907 -0.058,-0.1346 -0.028,-0.0352 -0.044,-0.0218 -0.05,-0.0168 -0.038,-0.0192 -0.033,-0.0347 -0.023,-0.0449 -0.013,-0.063 0.008,-0.0613 0.078,-0.1737 0.081,-0.1263 0.019,-0.0572 0.005,-0.0438 -0.009,-0.029 -0.001,-0.036 0.039,-0.0464 0.076,-0.0455 0.18,-0.0553 0.112,-0.0166 0.108,-0.0424 0.258,-0.2307 0.11,-0.0802 0.194,-0.0469 0.166,0.0409 0.044,0.0032 0.167,-0.0258 0.038,-0.0177 0.037,-0.0373 -0.01,-0.1007 0.004,-0.0149 0.012,-0.0241 0.089,-0.1053 0.101,-0.0876 0.016,-0.0928 -0.007,-0.1314 0.031,-0.0272 0.083,-0.0137 0.077,-0.0206 0.074,-0.055 0.125,-0.0475 0.121,-0.1088 0.23,0.0074 0.115,0.0289 0.054,0.0066 0.02,0.0295 0.026,0.0736 0.043,0.0206 0.105,-0.0017 0.612,-0.13 0.251,-0.0813 0.158,-0.1016 0.081,-0.073 0.055,-0.079 0.033,-0.055 0.031,-0.045 0.03,-0.034 0.014,-0.0381 -0.002,-0.085 0.009,-0.0407 0.026,-0.0263 0.074,-0.0246 0.108,-0.0161 0.184,0.0115 0.107,0.0257 0.08,0.0401 0.05,0.0481 0.091,0.0229 0.111,-0.0212 0.378,-0.1777 0.16,-0.0238 0.21,-0.002 0.091,-0.0275 0.058,-0.0258 0.189,-0.1789 0.308,-0.1889 0.175,0.1414 0.04,0.0074 0.058,-2e-4 0.048,-0.0187 1.484,0.1483 0.227,0.0785 0.124,0.0644 0.079,0.006 0.035,-0.0103 0.032,-0.091 0.139,-0.0315 0.146,-0.1767 0.031,-0.0598 0.012,-0.0573 -0.005,-0.0526 0.035,-0.1317 0.056,-0.0859 0.076,-0.0945 0.057,-0.0475 0.103,-0.0553 0.031,-0.0461 0.041,-0.1033 0.052,-0.0392 0.065,-0.0269 0.084,-0.0155 -0.061,-0.0865 -0.338,-0.3925 -0.123,-0.1846 -0.085,-0.1858 -0.001,-0.0432 0.249,0.0503 0.372,0.0424"},{"id":"33","nom":"Valteline","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"6","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"6","clSc11":"6","clSc12":"0","clSc13":"0","clSc14":"0","clSc15":"0","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"0","clSc22":"7","clSc23":"7","clSc24":"0","clSc25":"9","clSc26":"0","clSc27":"0","clSc28":"0","chemin":"m 168.854,81.1773 0.063,0.045 0.115,0.2648 0.05,0.0668 0.11,0.1241 0.067,0.0459 0.06,0.032 0.526,0.0555 0.31,0.0951 0.526,0.2308 0.088,0.0621 0.033,0.0753 0.027,0.0833 0.095,0.3221 0.006,0.1334 -0.015,0.0464 -0.022,0.0446 -0.04,0.0498 -0.036,0.0367 -0.112,0.0847 -0.081,0.043 -0.046,0.0186 -0.103,0.0271 -0.127,0.0104 -0.259,-0.0104 -0.056,0.0072 -0.071,0.0261 -0.194,0.1225 -0.072,0.118 -0.202,0.0677 -0.154,-0.0453 -0.272,-0.1552 -0.28,0.0724 -0.874,0.6099 -0.402,0.0613 -0.143,0.1121 -0.17,0.4635 -0.128,0.1582 -1.246,0.5349 -0.194,0.1619 -0.08,0.2617 0.067,0.2231 0.128,0.213 0.074,0.2105 -0.094,0.2153 -0.662,0.0378 -0.14,-0.0395 -0.032,-0.0891 0.05,-0.1906 -0.021,-0.0946 -1.88,0.3141 -0.277,0.1463 -0.15,0.0503 -0.187,0.009 -1.354,-0.2044 -1.371,0.1212 -0.24,0.0884 -0.188,0.1816 -0.089,0.0569 -0.455,0.1135 -0.125,0.0039 -0.058,-0.1715 -0.118,-0.1267 -0.078,-0.1198 0.059,-0.151 -0.179,-0.0867 -0.643,-0.1542 -0.163,-0.0928 -0.064,-0.1285 -0.005,-0.3583 0.106,-0.204 0.01,-0.053 0.068,-0.387 0.112,-0.2167 -0.216,-0.0592 -0.529,0.0867 -0.497,-0.2549 -0.851,-0.0071 -0.3,0.0498 0.164,-0.3967 0.325,-0.4695 0.068,-0.244 -0.015,-0.1425 -0.149,-0.3931 -10e-4,-0.1583 0.029,-0.1397 -0.022,-0.1111 -0.148,-0.0707 -0.106,-0.1497 0.087,-0.2714 0.192,-0.2668 0.212,-0.1357 0.54,-0.0459 0.219,0.0404 0.008,0.1371 0.283,0.1861 0.084,0.0252 0.12,-0.0332 0.054,-0.0664 0.039,-0.0787 0.076,-0.0707 0.178,-0.0911 0.087,-0.0134 0.036,0.0695 0.066,1.0627 -0.016,0.1689 0.022,0.0622 0.08,0.0543 0.245,0.0942 0.099,0.0561 0.221,0.3997 0.14,0.1346 0.235,0.1105 0.258,0.0652 1.27,0.0103 0.208,-0.0584 0.17,-0.1626 0.004,-0.0873 -0.017,-0.1257 0.022,-0.1265 0.12,-0.0942 0.119,0.002 0.27,0.1128 0.142,0.0212 0.231,-0.0518 0.737,-0.2623 0.483,-0.0575 0.216,0.0112 0.227,0.0409 0.278,0.126 0.073,0.1803 0.004,0.2193 0.073,0.2428 0.162,0.1523 0.438,0.2691 0.112,0.1884 0.009,0.2502 0.366,0.0051 0.468,-0.1231 0.309,-0.1351 0.145,-0.2118 -0.142,-0.1976 -0.457,-0.3223 -0.1,-0.1237 -0.045,-0.0933 0.007,-0.1014 0.056,-0.15 0.084,-0.1076 0.232,-0.1443 0.08,-0.0745 0.084,-0.2416 -0.082,-0.1231 -0.191,-0.0532 -0.496,-0.0665 -0.325,-0.0876 -0.174,-0.15 0.196,-0.2296 -0.096,-0.0452 -0.054,-0.0621 -0.026,-0.0805 -0.014,-0.1025 0.048,-0.1179 0.002,-0.2434 0.015,-0.0795 0.095,-0.0985 0.239,-0.1649 0.092,-0.0848 0.136,-0.3613 0.048,-0.0818 0.107,-0.0404 1.049,-0.2081 0.285,-0.0018 0.176,0.0997 0.022,0.1251 -0.061,0.2276 0.05,0.1202 0.457,0.1082 0.087,0.0533 0.058,0.0558 0.07,0.051 0.125,0.0398 0.142,0.016 0.386,-0.0252 0.793,0.144 0.201,-0.0266 0.087,-0.0994"},{"id":"34","nom":"JU","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"6","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"6","clSc09":"0","clSc10":"6","clSc11":"6","clSc12":"0","clSc13":"10","clSc14":"0","clSc15":"10","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"10","clSc22":"10","clSc23":"10","clSc24":"12","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 131.205,70.7213 0.552,-0.0652 0.261,0.0369 0.144,0.0564 0.021,0.0022 0,0 0.127,0.0138 0.301,-0.0206 -0.201,0.3143 0.063,0.181 0.24,0.0979 0.325,0.0693 0.046,0.0249 0.031,0.0398 0.045,0.0401 0.085,0.0246 0.075,-0.0103 0.419,-0.1237 0.293,-0.0418 0.309,0.0089 0.027,0.0318 0.034,0.0191 0.463,0.1569 0.299,0.1641 0.077,0.0847 0.017,0.0882 0.038,0.024 0.035,0.0132 0.12,6e-4 0.538,0.0933 0.215,0.0149 0.081,-0.0035 0.091,0.0212 0.092,0.0461 0.104,0.1174 0.179,0.1011 -0.181,0.1145 -0.026,0.0735 0.009,0.0353 0.04,0.0177 0.208,0.018 -0.03,0.0275 -0.662,0.128 -1.212,-0.0664 -0.108,-0.0309 -0.022,-0.0407 -0.04,-0.0544 -0.031,-0.008 -0.026,0.0195 -0.022,0.0481 -0.042,0.0389 -0.061,0.0407 -0.09,0.0263 -0.051,0.0252 -0.047,0.032 -0.085,0.047 -0.128,0.0544 -0.284,0.0696 -0.17,0.0243 -0.211,0.0086 -0.934,-0.1288 -0.027,0.1133 0.019,0.0484 -0.021,0.0415 -0.045,0.0327 -0.111,0.0561 -0.021,0.0337 -0.005,0.0252 0.002,0.0355 0.02,0.0791 0.023,0.0458 -0.057,0.0383 -0.545,0.0699 -0.346,-0.0218 -0.072,0.0092 -0.045,0.0303 -0.02,0.0624 -0.011,0.0184 -0.017,0.0263 -0.081,0.0819 -0.053,0.0721 -0.079,0.0739 -0.117,0.0801 -0.177,0.063 -0.103,0.0513 -0.12,0.0827 -0.116,0.0157 -0.251,-0.0065 -0.129,0.0486 -0.397,0.2096 -0.124,0.0501 -0.086,0.0155 -0.046,-0.0169 -0.038,-0.0298 -0.101,-0.057 -0.305,-0.0157 -0.13,-0.0338 0.025,-0.0155 0.211,-0.237 0.321,-0.2259 0.753,-0.3759 -0.045,-0.2748 0.071,-0.2273 0.208,-0.146 0.101,-0.0086 0.06,-0.0161 0.161,-0.1485 0.116,-0.0461 0.113,-0.0212 0.104,-0.0453 0.086,-0.1216 -0.115,-0.1125 -0.166,-0.1025 -0.165,-0.0914 -0.204,0.0668 -1.318,0.0881 0.055,-0.1417 0.137,-0.1732 0.164,-0.1454 0.285,-0.114 0.017,-0.2089 0.145,-0.0221 0.146,-0.022 0.18,-0.0705 0.165,-0.0953 0.083,-0.0933 -0.053,-0.132 -0.115,-0.1532 -0.027,-0.1234 0.206,-0.0426 0.098,-0.0524 0.1,-0.0175 0.101,0.0175 0.1,0.0524 0.288,0.0283"},{"id":"35","nom":"Ev. Bale","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"6","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"6","clSc09":"0","clSc10":"6","clSc11":"6","clSc12":"0","clSc13":"10","clSc14":"0","clSc15":"10","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"10","clSc22":"10","clSc23":"10","clSc24":"12","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 134.897,72.691 1.212,0.0664 0.662,-0.128 -0.084,0.1704 -0.065,0.0532 -0.104,0.049 -0.362,0.079 -0.077,0.0323 -0.095,0.0516 -0.126,0.0944 -0.103,0.0602 -0.247,0.0681 -0.234,0.1357 0.029,0.0779 -0.83,0.2539 -0.03,0.053 0.057,0.0904 0.04,0.0401 0.03,0.0641 0.035,0.0301 0.053,0.0215 0.123,0.0309 0.053,0.0269 0.027,0.0344 0.076,0.1276 0.007,0.0338 -0.007,0.0241 -0.005,0.0234 0.025,0.0126 -0.024,-0.0121 -3.962,1.6761 0.027,-0.0407 0.06,-0.1838 0.035,-0.0504 0.041,-0.0349 0.247,-0.0716 0.043,-0.0198 0.072,-0.0438 0.031,-0.0137 0.04,-0.0112 0.033,-0.0128 0.017,-0.0212 0.009,-0.0241 0.005,-0.0194 0,-0.031 -0.002,-0.0286 -0.019,-0.0867 -0.01,-0.029 -0.01,-0.0177 -0.009,-0.0189 -0.003,-0.0175 0.012,-0.0128 0.017,-0.0086 0.027,-0.0126 0.016,-0.0121 0.001,-0.0188 -0.042,-0.0481 -0.087,-0.051 -0.321,-0.1237 -0.153,-0.0275 -0.007,-0.152 -0.077,0.0135 -1.689,0.3584 -0.027,6e-4 -0.005,-0.0693 0.025,-0.0793 0.012,-0.0106 0.043,-0.0292 0.012,-0.0155 0.011,-0.0166 0.044,-0.1408 0.012,-0.0727 -0.012,-0.0455 -0.025,-0.0582 -0.067,-0.0979 -0.126,-0.1145 -0.229,-0.0847 0.305,0.0157 0.101,0.057 0.038,0.0298 0.046,0.0169 0.086,-0.0155 0.124,-0.0501 0.397,-0.2096 0.129,-0.0486 0.251,0.0065 0.116,-0.0157 0.12,-0.0827 0.103,-0.0513 0.177,-0.063 0.117,-0.0801 0.079,-0.0739 0.053,-0.0721 0.081,-0.0819 0.017,-0.0263 0.011,-0.0184 0.02,-0.0624 0.045,-0.0303 0.072,-0.0092 0.346,0.0218 0.545,-0.0699 0.057,-0.0383 -0.023,-0.0458 -0.02,-0.0791 -0.002,-0.0355 0.005,-0.0252 0.021,-0.0337 0.111,-0.0561 0.045,-0.0327 0.021,-0.0415 -0.019,-0.0484 0.027,-0.1133 0.934,0.1288 0.211,-0.0086 0.17,-0.0243 0.284,-0.0696 0.128,-0.0544 0.085,-0.047 0.047,-0.032 0.051,-0.0252 0.09,-0.0263 0.061,-0.0407 0.042,-0.0389 0.022,-0.0481 0.026,-0.0195 0.031,0.008 0.04,0.0544 0.022,0.0407 0.108,0.0309"},{"id":"36","nom":"SO1","clSc01":"0","clSc02":"0","clSc03":"3","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"3","clSc11":"3","clSc12":"0","clSc13":"11","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 137.968,70.7082 0.473,0.1987 0.036,0.0286 0.034,0.0412 -0.051,0.0464 -0.05,0.067 -0.033,0.0338 -0.045,0.0257 -0.044,0.0189 -0.031,0.0198 -0.023,0.0283 -0.01,0.0344 -0.005,0.1402 -0.035,0.0928 -0.092,0.0782 -0.05,0.0174 -0.263,0.0527 -0.104,0.0189 -0.01,0.0922 0.012,0.0824 0.017,0.0647 0.062,0.1403 0.037,0.0298 0.058,0.016 0.39,-0.0246 0.276,0.0452 0.233,0.0842 0.108,0.0538 0.083,0.067 0.075,0.0332 0.066,0.0218 0.236,0.0469 0.039,-0.0761 0.174,-0.2019 0.138,-0.0621 0.23,-0.0446 0.082,-0.043 0.272,-0.0836 0.029,-0.0275 0.036,-0.0515 0.062,-0.1174 0.055,-0.0126 0.088,0.0046 0.142,-0.0074 0.235,-0.0441 0.209,-0.1039 0.065,-0.0576 -0.006,-0.0515 -0.038,-0.0412 -0.033,-0.0424 -0.019,-0.0418 -0.001,-0.0252 0.053,-0.0713 0.058,-0.1188 0.172,0.0212 0.096,0.079 0.019,0.0355 0.003,0.0361 -0.01,0.0229 0.012,0.0996 0.075,0.0312 0.048,0.1532 0.051,0.0509 0.096,0.0624 0.109,0.0413 0.139,0.0269 0.012,0.2104 -0.081,0.126 -0.125,0.1288 -0.151,0.2402 -0.09,0.0401 -0.079,0.0286 -0.707,-0.0727 -0.096,-0.0255 -0.081,-0.0129 -0.492,0.3063 -0.032,0.0292 -0.268,0.3619 -0.083,0.0707 -0.383,0.0639 -0.105,-0.0258 -0.215,0.055 -0.306,-0.0106 -0.129,-0.0559 -0.375,-0.3063 -0.4,0.122 -0.74,0.0627 0.159,0.1294 0.013,0.0415 0.035,0.0796 0.008,0.0853 0.206,0.1695 0.203,0.0629 0.178,0.1784 0.158,0.1944 0.056,0.0899 0.019,0.0635 -0.017,0.0344 -0.029,0.0361 -0.036,0.0234 -0.103,0.0375 -0.069,0.0713 -0.116,0.0808 -0.067,0.0074 -0.51,-0.0109 -0.298,-0.1403 -0.123,0.0132 -0.155,0.1025 -0.291,0.2897 -0.159,0.0979 -0.296,0.0937 -0.038,0.0317 10e-4,0.0476 0.057,0.0984 0.017,0.0527 -0.008,0.0636 -0.04,0.0372 -0.07,0.0298 -0.205,0.0472 -0.096,-0.1492 -0.008,-0.1004 -0.026,-0.0052 -0.093,0.012 -0.317,0.0622 -0.039,-0.0132 -0.064,-0.0367 -0.067,-0.0953 -0.037,-0.0409 -0.031,-0.043 -0.012,-0.0349 0.017,-0.0484 0.036,-0.0083 0.125,0.0155 0.071,-0.0017 0.113,0.0203 0.052,-0.0037 0.196,-0.0361 0.084,-0.0341 0.009,-0.0529 -0.023,-0.106 0.021,-0.0532 0.069,-0.0707 0.122,-0.069 0.038,0 0.053,0.0212 0.067,0.012 0.077,-0.012 0.121,-0.0573 0.038,-0.0584 -0.038,-0.0389 -0.052,-0.0292 -0.036,-0.0292 -0.016,-0.0527 -0.026,-0.142 -0.171,0.0235 -0.059,0.0211 -0.082,0.0481 -0.091,0.0161 -0.06,0.0475 -0.1,0.0618 -0.086,0.0745 -0.09,0.0332 -0.115,0.014 -0.069,-0.0112 -0.025,-0.0126 0.005,-0.0234 0.007,-0.0241 -0.007,-0.0338 -0.076,-0.1276 -0.027,-0.0344 -0.053,-0.0269 -0.123,-0.0309 -0.053,-0.0215 -0.035,-0.0301 -0.03,-0.0641 -0.04,-0.0401 -0.057,-0.0904 0.03,-0.053 0.83,-0.2539 -0.029,-0.0779 0.234,-0.1357 0.247,-0.0681 0.103,-0.0602 0.126,-0.0944 0.095,-0.0516 0.077,-0.0323 0.362,-0.079 0.104,-0.049 0.065,-0.0532 0.084,-0.1704 0.03,-0.0275 0.094,-0.0051 0.016,-0.0318 0.012,-0.0584 -0.009,-0.0492 -0.019,-0.045 -0.031,-0.0312 -0.029,-0.0226 -0.084,-0.0157 -0.179,-0.1011 -0.104,-0.1174 -0.092,-0.0461 -0.091,-0.0212 -0.081,0.0035 -0.215,-0.0149 -0.538,-0.0933 0.172,-0.1827 0.151,-0.0229 0.079,0.0097 0.19,0.0739 0.18,0.0189 0.105,-0.0195 0.08,-0.0349 0.05,-0.0498 0.04,-0.0484 0.032,-0.0567 0.042,-0.0243 0.043,-0.0123 0.318,-0.0175 0.057,-0.012 0.015,-0.0223 -0.026,-0.0361 -0.012,-0.0441 0.009,-0.0627 0.06,-0.0169 0.251,-0.0143 0.136,-0.0948 0.127,-0.2447 -0.007,-0.0264 -0.027,-0.0392 -0.17,-0.0567 0.07,-0.1245 0.091,-0.0137 0.3,0.0211 0.044,-0.0206 0.026,-0.028 0.002,-0.0461 0.089,0.0043"},{"id":"37","nom":"BS","clSc01":"0","clSc02":"0","clSc03":"3","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"3","clSc11":"3","clSc12":"0","clSc13":"11","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 137.653,69.8991 -0.261,-0.0015 -0.029,-2e-4 0.412,0.1474 -0.002,0.1847 -0.07,0.0567 -0.112,-0.0452 -0.086,-0.047 -0.063,-0.051 -0.057,-0.016 -0.058,0.0126 -0.195,0.0888 -0.112,-0.0642 -0.03,-0.0412 -0.109,-0.008 -0.104,-0.0183 -0.336,-0.1601 -0.062,-0.0245 0.06,-0.0336 0.266,-0.1002 0.39,-0.0995 0.006,-0.0016 0.565,-0.1148 0.251,-0.0177 -0.146,0.2774 -0.118,0.077"},{"id":"38","nom":"BL1","clSc01":"0","clSc02":"0","clSc03":"3","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"3","clSc11":"3","clSc12":"0","clSc13":"11","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 134.865,71.5776 -0.463,-0.1569 -0.034,-0.0191 -0.027,-0.0318 0.461,0.0134 0.107,-0.0293 -0.044,0.2237"},{"id":"39","nom":"BL2","clSc01":"0","clSc02":"0","clSc03":"3","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"3","clSc11":"3","clSc12":"0","clSc13":"11","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 134.865,71.5776 0.622,-0.0163 0.163,-0.0762 0.007,-0.0403 -0.008,-0.0324 -0.102,-0.1202 -0.026,-0.0215 -0.025,-0.006 -0.074,6e-4 -0.028,-0.004 -0.031,-0.0121 -0.025,-0.018 -0.014,-0.0112 -0.054,-0.0584 -0.003,-0.0023 0.061,-0.0543 0.036,-0.1037 -0.018,-0.0624 -0.054,-0.0518 -0.037,-0.0269 -0.056,-0.0684 -0.001,-0.0682 0.129,-0.0257 0.172,0.0406 0.05,0.0216 0.014,0.2452 0.037,0.0888 0.016,0.0246 0.024,0.0275 0.18,0.0028 0.703,-0.1002 -0.006,-0.2937 -0.019,-0.0349 -0.03,-0.0384 -0.089,-0.0126 -0.213,-0.0552 -0.176,0.0144 -0.01,-0.0236 -0.079,-0.0753 -0.024,-0.0446 0.015,-0.035 0.064,-0.0234 0.115,0.0166 0.089,-0.0201 0.048,-0.0632 -0.003,-0.1108 -0.038,5e-4 -0.185,-0.0956 -0.026,-0.0074 0.423,-0.2344 0.062,0.0245 0.336,0.1601 0.104,0.0183 0.109,0.008 0.03,0.0412 0.112,0.0642 0.195,-0.0888 0.058,-0.0126 0.057,0.016 0.063,0.051 0.086,0.047 0.112,0.0452 0.07,-0.0567 0.002,-0.1847 0.161,0.0576 0.244,0.022 0.486,-0.0683 0.036,0.0182 0.404,0.1349 0.052,0.006 0.026,0.0114 0.041,0.0269 -0.007,0.0536 0.007,0.0638 0.024,0.063 0.031,0.0387 0.149,-0.0146 0.279,-0.1718 0.028,-0.0306 0.008,-0.0358 0.005,-0.0693 0.014,-0.045 0.031,-0.0169 0.067,-0.0074 0.158,0.0312 0.088,0.0816 0.063,0.0332 0.052,0.0764 0.323,0.3336 0.04,0.0836 0.101,0.0509 0.339,0.0246 0.002,0.1572 0.012,0.0452 0.01,0.0221 0.139,0.0624 -0.058,0.1188 -0.053,0.0713 0.001,0.0252 0.019,0.0418 0.033,0.0424 0.038,0.0412 0.006,0.0515 -0.065,0.0576 -0.209,0.1039 -0.235,0.0441 -0.142,0.0074 -0.088,-0.0046 -0.055,0.0126 -0.062,0.1174 -0.036,0.0515 -0.029,0.0275 -0.272,0.0836 -0.082,0.043 -0.23,0.0446 -0.138,0.0621 -0.174,0.2019 -0.039,0.0761 -0.236,-0.0469 -0.066,-0.0218 -0.075,-0.0332 -0.083,-0.067 -0.108,-0.0538 -0.233,-0.0842 -0.276,-0.0452 -0.39,0.0246 -0.058,-0.016 -0.037,-0.0298 -0.062,-0.1403 -0.017,-0.0647 -0.012,-0.0824 0.01,-0.0922 0.104,-0.0189 0.263,-0.0527 0.05,-0.0174 0.092,-0.0782 0.035,-0.0928 0.005,-0.1402 0.01,-0.0344 0.023,-0.0283 0.031,-0.0198 0.044,-0.0189 0.045,-0.0257 0.033,-0.0338 0.05,-0.067 0.051,-0.0464 -0.034,-0.0412 -0.036,-0.0286 -0.473,-0.1987 -0.089,-0.0043 -0.002,0.0461 -0.026,0.028 -0.044,0.0206 -0.3,-0.0211 -0.091,0.0137 -0.07,0.1245 0.17,0.0567 0.027,0.0392 0.007,0.0264 -0.127,0.2447 -0.136,0.0948 -0.251,0.0143 -0.06,0.0169 -0.009,0.0627 0.012,0.0441 0.026,0.0361 -0.015,0.0223 -0.057,0.012 -0.318,0.0175 -0.043,0.0123 -0.042,0.0243 -0.032,0.0567 -0.04,0.0484 -0.05,0.0498 -0.08,0.0349 -0.105,0.0195 -0.18,-0.0189 -0.19,-0.0739 -0.079,-0.0097 -0.151,0.0229 -0.172,0.1827 -0.12,-6e-4 -0.035,-0.0132 -0.038,-0.024 -0.017,-0.0882 -0.077,-0.0847 -0.299,-0.1641"},{"id":"40","nom":"SO2","clSc01":"0","clSc02":"0","clSc03":"3","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"3","clSc11":"3","clSc12":"0","clSc13":"11","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 135.394,71.2613 0.028,0.004 0.074,-6e-4 0.025,0.006 0.026,0.0215 0.102,0.1202 0.008,0.0324 -0.007,0.0403 -0.163,0.0762 -0.622,0.0163 0.044,-0.2237 0.201,-0.0548 0.157,-0.1398 0.003,0.0023 0.054,0.0584 0.014,0.0112 0.025,0.018 0.031,0.0121"},{"id":"41","nom":"SO3","clSc01":"0","clSc02":"0","clSc03":"3","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"3","clSc11":"3","clSc12":"0","clSc13":"11","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 136.517,70.7551 0.006,0.2937 -0.703,0.1002 -0.18,-0.0028 -0.024,-0.0275 -0.016,-0.0246 -0.037,-0.0888 -0.014,-0.2452 0.094,0.0408 0.144,0.0143 0.169,-0.1036 0.02,-0.0186 0.014,-0.0315 0.002,-0.0289 -0.002,-0.0042 0.176,-0.0144 0.213,0.0552 0.089,0.0126 0.03,0.0384 0.019,0.0349"},{"id":"42","nom":"AG","clSc01":"0","clSc02":"0","clSc03":"2","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"2","clSc11":"2","clSc12":"0","clSc13":"3","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"4","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 146.32,69.7199 0.033,-0.0038 -0.019,0.0674 -0.254,0.2788 -0.24,0.1643 -0.185,0.2016 -0.055,0.2101 -0.005,0.1134 0.058,0.1537 0.245,0.3536 0.082,0.1712 0.151,0.1357 0.028,0.0412 -0.047,0.0916 -0.294,0.2044 -0.022,0.0601 0.032,0.0247 0.064,0.0355 0.217,0.075 0.05,0.0398 -0.002,0.0695 -0.022,0.1197 -0.004,0.0361 0.011,0.036 0.024,0.0424 0.13,0.0962 0.329,-0.0704 -0.033,0.1065 -0.101,0.1208 -0.207,0.1815 -0.191,0.0802 -0.073,0.0206 -0.03,0.0023 -0.034,5e-4 -0.031,0.0046 0.028,0.0896 0.249,0.3602 -0.145,0.1892 -0.007,0.0301 -0.008,0.0687 0.057,0.4669 0.082,0.3885 -0.009,0 -0.313,-0.0089 -0.137,-0.0452 -0.06,-0.0378 -0.081,-0.0681 -0.122,-0.13 -0.04,-0.0538 -0.369,-0.7209 -0.085,-0.1265 -0.046,-0.0939 -0.034,-0.1083 -0.062,-0.0638 -0.065,-0.0421 -0.183,-0.0515 -0.187,0.0132 -0.186,0.1477 -0.05,0.0899 -0.251,0.3049 -0.18,0.0916 -0.1,0.0071 -0.076,-0.0226 -0.051,-0.0243 -0.041,-0.0275 -0.021,-0.0183 -0.014,-0.037 -0.019,-0.022 0,-0.0157 0.016,-0.0106 0.081,-0.0224 -0.031,-0.0174 -0.1,-0.0275 -0.301,-0.0077 -0.222,-0.0499 -0.165,-0.1185 -0.763,0.2021 -0.248,-0.3326 -0.17,-0.0484 -0.237,0.0034 -0.047,0.0049 -0.017,0.0143 -0.009,0.0298 0.002,0.0882 0.012,0.0941 -0.005,0.0381 -0.009,0.0221 -0.006,0.0106 -0.018,0.0134 -0.043,0.0226 -0.282,0.069 -0.252,3e-4 -0.678,0.0939 -0.144,-0.1683 -0.01,-0.0269 -0.028,-0.2162 0.083,-0.0707 0.268,-0.3619 0.032,-0.0292 0.492,-0.3063 0.081,0.0129 0.096,0.0255 0.707,0.0727 0.079,-0.0286 0.09,-0.0401 0.151,-0.2402 0.125,-0.1288 0.081,-0.126 -0.012,-0.2104 -0.139,-0.0269 -0.109,-0.0413 -0.096,-0.0624 -0.051,-0.0509 -0.048,-0.1532 -0.075,-0.0312 -0.012,-0.0996 0.01,-0.0229 -0.003,-0.0361 -0.019,-0.0355 -0.096,-0.079 -0.172,-0.0212 -0.139,-0.0624 -0.01,-0.0221 -0.012,-0.0452 -0.002,-0.1572 -0.339,-0.0246 -0.101,-0.0509 -0.04,-0.0836 -0.323,-0.3336 -0.052,-0.0764 -0.063,-0.0332 -0.088,-0.0816 -0.158,-0.0312 -0.067,0.0074 -0.031,0.0169 -0.014,0.045 -0.005,0.0693 -0.008,0.0358 -0.028,0.0306 -0.279,0.1718 -0.149,0.0146 -0.031,-0.0387 -0.024,-0.063 -0.007,-0.0638 0.007,-0.0536 -0.041,-0.0269 -0.026,-0.0114 -0.052,-0.006 -0.404,-0.1349 -0.036,-0.0182 0.437,-0.0614 0.208,-0.0801 0.177,-0.1429 0.201,-0.2133 0.156,0.0539 0.715,0.0292 0.067,0.0475 0.036,0.1039 0.021,0.1039 0.03,0.047 1.442,0 0.498,-0.0756 0.108,-0.0495 0.049,-0.0481 0.045,-0.0561 0.093,-0.073 0.091,-0.0476 0.24,-0.0879 0.203,-0.0409 0.076,-0.0541 0.055,-0.0541 0.057,-0.0252 0.598,-0.0681 0.2,-6e-4 0.287,0.0595 0.129,0.0092 0.059,0.0481 0.06,0.1068 0.078,0.1068 0.108,0.0481 0.421,0.0755 0.709,0.0029"},{"id":"43","nom":"LU","clSc01":"0","clSc02":"0","clSc03":"3","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"2","clSc11":"2","clSc12":"0","clSc13":"3","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 146.172,74.5779 0.009,0 0.137,0.152 0.095,0.016 0.05,0.0164 0.047,0.0071 0.015,0.0103 0.064,0.1197 -0.341,0.1408 -0.06,0.0395 -0.034,0.0401 -0.012,0.0424 -0.004,0.0573 -0.017,0.0409 -0.038,0.0369 -0.1,0.0716 -0.015,0.0361 0.017,0.0607 0.06,0.0555 0.122,0.0452 0.17,-0.0538 0.444,0.0796 0.425,0.2682 0.041,0.0398 0.036,0.0539 -0.039,0.0858 -0.036,0.0564 -0.367,0.1329 -0.058,-0.0776 -0.153,-0.0996 -0.157,-0.0224 -0.098,0.0653 -0.01,0.0521 -0.11,0.0238 -0.366,-0.0055 -0.015,-0.0103 -0.006,-0.01 -0.005,-0.0272 -0.121,-0.0486 -0.17,0.0586 -0.238,0.0567 -0.138,-0.0186 -0.129,-0.0034 -0.139,0.0166 -0.27,-0.0012 -0.19,0.027 -0.213,0.0509 -0.061,0.0289 -0.036,0.0558 -0.007,0.0441 0.053,0.0845 -0.616,0.0404 -0.185,0.0836 -0.025,0.0292 0.042,0.0984 0.012,0.0553 -0.017,0.055 -0.224,0.1422 -0.264,0.2302 -0.049,0.0097 -0.025,-0.0111 -0.016,-0.0266 -0.02,-0.0126 -0.036,-0.004 -0.063,0.0022 -0.053,0.0144 -0.047,0.0269 -0.08,0.0801 -0.036,0.0539 -0.042,0.081 -0.039,0.1583 -0.192,0.3017 -0.026,0.0584 0.036,0.1151 0.055,0.0796 0.058,0.1723 -0.18,0.1973 -0.226,-0.0106 -0.192,0.0538 -0.165,0.0639 -0.086,0.0111 -0.069,-0.0131 -0.146,-0.122 -0.131,-0.1391 -0.732,-0.402 -0.172,-0.1288 -0.006,-0.0865 -0.101,-0.2193 0.019,-0.0521 0.103,-0.0707 0.037,-0.0638 0.008,-0.0807 -0.024,-0.1346 0.002,-0.0658 0.019,-0.047 0.041,-0.0203 0.096,-0.0261 0.083,-0.0372 0.027,-0.004 0.09,0.0143 0.056,-0.0063 0.053,-0.0269 0.035,-0.0406 0.024,-0.043 0.017,-0.0215 0.058,-0.03 0.022,-0.0229 0.012,-0.0344 0.012,-0.0687 0.02,-0.03 0.038,-0.0358 0.026,-0.0309 0.038,-0.1005 0.031,-0.047 0.072,-0.2562 -0.237,-0.0338 -0.08,-0.0452 -0.292,-0.0183 -0.039,-0.179 -0.057,-0.0478 -0.077,-0.091 -0.095,-0.0882 -0.026,-0.0773 0,-0.0684 0.035,-0.2253 0,-0.2193 0.02,-0.1145 0.035,-0.0745 0.089,-0.1093 -0.096,-0.3356 -0.002,-0.1125 -0.036,-0.0879 -0.059,-0.0973 -0.05,-0.0641 -0.287,-0.4495 0.678,-0.0939 0.252,-3e-4 0.282,-0.069 0.043,-0.0226 0.018,-0.0134 0.006,-0.0106 0.009,-0.0221 0.005,-0.0381 -0.012,-0.0941 -0.002,-0.0882 0.009,-0.0298 0.017,-0.0143 0.047,-0.0049 0.237,-0.0034 0.17,0.0484 0.248,0.3326 0.763,-0.2021 0.165,0.1185 0.222,0.0499 0.301,0.0077 0.1,0.0275 0.031,0.0174 -0.081,0.0224 -0.016,0.0106 0,0.0157 0.019,0.022 0.014,0.037 0.021,0.0183 0.041,0.0275 0.051,0.0243 0.076,0.0226 0.1,-0.0071 0.18,-0.0916 0.251,-0.3049 0.05,-0.0899 0.186,-0.1477 0.187,-0.0132 0.183,0.0515 0.065,0.0421 0.062,0.0638 0.034,0.1083 0.046,0.0939 0.085,0.1265 0.369,0.7209 0.04,0.0538 0.122,0.13 0.081,0.0681 0.06,0.0378 0.137,0.0452 0.313,0.0089"},{"id":"44","nom":"OW1","clSc01":"0","clSc02":"0","clSc03":"4","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"4","clSc11":"4","clSc12":"0","clSc13":"3","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"3","clSc18":"3","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 145.382,77.1129 -0.002,0.2961 -0.015,0.0512 -0.054,0.1257 -0.013,0.2244 -0.018,0.1051 0.028,0.2614 0.228,0.2161 0.23,0.0942 -0.484,0.1306 -0.372,0.1775 -0.12,0.0323 -0.108,-0.0026 -0.214,-0.0463 -0.579,-0.0493 -0.131,0.0183 -0.261,0.0693 -0.058,0.008 -0.083,-0.016 -0.132,-0.0412 -0.114,-0.0538 -0.375,-0.169 -0.213,-0.032 -0.35,-0.0129 0.18,-0.1973 -0.058,-0.1723 -0.055,-0.0796 -0.036,-0.1151 0.026,-0.0584 0.192,-0.3017 0.039,-0.1583 0.042,-0.081 0.036,-0.0539 0.08,-0.0801 0.047,-0.0269 0.053,-0.0144 0.063,-0.0022 0.036,0.004 0.02,0.0126 0.016,0.0266 0.025,0.0111 0.049,-0.0097 0.264,-0.2302 0.224,-0.1422 0.017,-0.055 -0.012,-0.0553 -0.042,-0.0984 0.025,-0.0292 0.185,-0.0836 0.616,-0.0404 0.187,-0.0309 0.065,-0.0198 0.059,-0.024 0.048,-0.0115 0.045,0 0.423,0.0882 0.036,0.0172 0.029,0.0289 -0.017,0.0564 -0.019,0.0458 -0.031,0.0515 -0.031,0.0375 -0.036,0.0352 -0.027,0.0384 -0.016,0.0739 0.057,0.0498 0.067,0.0429 0.261,0.0836 0.055,0.0349 0.023,0.0458"},{"id":"45","nom":"OW2","clSc01":"0","clSc02":"0","clSc03":"4","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"4","clSc11":"4","clSc12":"0","clSc13":"3","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"3","clSc18":"3","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 145.854,77.7256 0.021,0.0029 0.041,-0.0086 0.212,-0.0956 0.05,-0.0018 0.051,0.0155 0.041,0.0673 0.115,0.0618 0.539,-0.0137 0.116,-0.0072 0.04,0.0189 0.093,0.0149 0.029,0.0197 0.019,0.0232 0.007,0.0201 -0.013,0.0263 -0.033,0.0338 -0.083,0.0624 -0.06,0.0779 -0.064,0.142 -0.026,0.0798 -0.048,0.0656 0.026,0.0452 0.028,0.0178 0.032,0.0146 0.01,0.0258 0.009,0.0375 0.019,0.0555 -0.012,0.0553 -0.022,0.0538 -0.359,0.0756 -0.221,-0.0542 -0.056,0 -0.148,0.0207 -0.076,0.0283 -0.105,-0.0601 0.316,-0.069 0.026,-0.0206 -0.02,-0.0384 -0.033,-0.0223 -0.173,-0.0495 -0.043,-0.0255 -0.033,-0.0287 -0.043,-0.0532 -0.036,-0.0286 -0.017,-0.0149 -0.011,-0.012 -0.005,-0.0166 -0.01,-0.0484 -0.015,-0.0226 -0.084,-0.0361 -0.027,-0.0178 0,-0.0289 0.007,-0.0375 -0.004,-0.0378 -0.063,-0.14 -0.016,-0.0529 -0.02,-0.1297 -0.038,-0.0516 -0.005,-0.038 0.041,-0.055 0.046,-0.0218 0.04,0.0086 0.058,0.0576 0,0.0421 -0.001,0.0315 -0.009,0.024 0,0.0126"},{"id":"46","nom":"NW","clSc01":"0","clSc02":"0","clSc03":"4","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"4","clSc11":"4","clSc12":"0","clSc13":"3","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"3","clSc18":"3","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 146.841,76.2292 0.27,0.1297 0.8,-0.0725 0.017,0.0673 -0.016,0.0578 -0.152,0.3284 -0.034,0.0438 -0.046,0.0367 -0.129,0.0813 -0.564,0.1992 -0.185,0.0876 -0.024,0.0218 -0.007,0.0366 0.082,0.0842 0.029,0.0484 0.018,0.0724 -0.023,0.0785 0.047,0.223 -0.539,0.0137 -0.115,-0.0618 -0.041,-0.0673 -0.051,-0.0155 -0.05,0.0018 -0.212,0.0956 -0.041,0.0086 -0.021,-0.0029 0,-0.0126 0.009,-0.024 0.001,-0.0315 0,-0.0421 -0.058,-0.0576 -0.04,-0.0086 -0.046,0.0218 -0.041,0.055 0.005,0.038 0.038,0.0516 0.02,0.1297 0.016,0.0529 0.063,0.14 0.004,0.0378 -0.007,0.0375 0,0.0289 0.027,0.0178 0.084,0.0361 0.015,0.0226 0.01,0.0484 0.005,0.0166 0.011,0.012 0.017,0.0149 0.036,0.0286 0.043,0.0532 0.033,0.0287 0.043,0.0255 0.173,0.0495 0.033,0.0223 0.02,0.0384 -0.026,0.0206 -0.316,0.069 -0.26,-0.1595 -0.23,-0.0942 -0.228,-0.2161 -0.028,-0.2614 0.018,-0.1051 0.013,-0.2244 0.054,-0.1257 0.015,-0.0512 0.002,-0.2961 -0.023,-0.0458 -0.055,-0.0349 -0.261,-0.0836 -0.067,-0.0429 -0.057,-0.0498 0.016,-0.0739 0.027,-0.0384 0.036,-0.0352 0.031,-0.0375 0.031,-0.0515 0.019,-0.0458 0.017,-0.0564 -0.029,-0.0289 -0.036,-0.0172 -0.423,-0.0882 -0.045,0 -0.048,0.0115 -0.059,0.024 -0.065,0.0198 -0.187,0.0309 -0.053,-0.0845 0.007,-0.0441 0.036,-0.0558 0.061,-0.0289 0.213,-0.0509 0.19,-0.027 0.27,0.0012 0.139,-0.0166 0.129,0.0034 0.138,0.0186 0.238,-0.0567 0.17,-0.0586 0.121,0.0486 0.005,0.0272 0.006,0.01 0.015,0.0103 0.366,0.0055 0.11,-0.0238 0.01,-0.0521 0.098,-0.0653 0.157,0.0224 0.153,0.0996 0.058,0.0776"},{"id":"47","nom":"ZG","clSc01":"0","clSc02":"0","clSc03":"4","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"4","clSc11":"4","clSc12":"0","clSc13":"3","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 146.941,73.7897 0.115,-5e-4 0.207,-0.0496 0.314,-0.042 0.435,0.0492 0.205,0.1529 0.187,0.1108 0.127,0.1056 0.028,0.0412 0.045,0.0464 0.082,0.0432 0.327,0.0977 0.247,-0.0221 0.205,0.0965 -0.198,0.1437 -0.084,0.1632 -0.31,0.2559 -0.122,0.063 -0.149,0.0418 -0.15,0.0201 -0.253,0.0624 -0.132,0.0192 -0.096,-0.0015 -0.091,-0.0607 -0.047,-0.0223 -0.06,-0.0092 -0.571,0.0338 -0.192,-0.2977 -0.116,-0.0069 -0.079,-0.0203 -0.111,0.0375 -0.115,0.0584 -0.064,-0.1197 -0.015,-0.0103 -0.047,-0.0071 -0.05,-0.0164 -0.095,-0.016 -0.137,-0.152 -0.082,-0.3885 -0.057,-0.4669 0.008,-0.0687 0.007,-0.0301 0.145,-0.1892 0.051,0.1176 0.014,0.047 0.029,0.0446 0.074,0.0324 0.44,0.0988 0.131,0.0148"},{"id":"48","nom":"SZ","clSc01":"0","clSc02":"0","clSc03":"4","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"4","clSc11":"4","clSc12":"0","clSc13":"3","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"3","clSc18":"3","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 150.884,73.7834 1.043,-0.0712 0.346,0.0724 -0.031,0.1059 -0.009,0.0684 0.002,0.0275 0.072,0.0936 0.295,0.203 -0.213,0.4672 0,0.0627 -0.032,0.1237 -0.026,0.0452 -0.052,0.059 0.026,0.1449 -0.01,0.0798 -0.11,0.1544 -0.088,0.0907 -0.096,0.0747 -0.275,0.0893 -0.126,0.0636 -0.053,0.1231 0.155,0.0973 0.311,0.3067 0.001,0.0174 -0.031,0.0378 0.004,0.0321 0.048,0.0601 0.054,0.0384 0.177,0.0824 0.043,0.0504 0.019,0.0698 -0.043,0.1483 -0.054,0.1329 -0.236,0.0819 -0.499,0.1952 -0.051,0.0106 -0.276,0.0885 -0.072,0.0498 -0.049,0.01 -0.041,-0.0203 -0.027,-0.0659 -0.012,-0.1219 -0.026,-0.0338 -0.069,-0.004 -0.064,-0.0487 -0.033,-0.0384 -0.005,-0.0521 0.007,-0.0486 -0.032,-0.0418 -0.078,-0.0215 -0.312,0.0054 -0.102,-0.012 -0.074,-0.0418 -0.059,-0.0195 -0.079,0.0132 -0.13,0.0453 -0.084,0.0206 -0.105,0.0395 -0.113,0.0635 -0.075,0.0201 -0.065,-0.0155 -0.081,-0.0824 -0.053,-0.1214 -0.033,-0.0318 -0.055,-0.0169 -0.252,0.0117 -0.082,-0.0083 -0.233,-0.0595 -0.098,-0.0149 -0.064,-0.02 -0.082,-0.0464 -0.045,-0.0994 -0.042,-0.1551 -0.017,-0.0398 -0.055,-0.0221 -0.043,-0.0123 -0.324,0.0123 -0.8,0.0725 -0.27,-0.1297 0.367,-0.1329 0.036,-0.0564 0.039,-0.0858 -0.036,-0.0539 -0.041,-0.0398 -0.425,-0.2682 -0.444,-0.0796 -0.17,0.0538 -0.122,-0.0452 -0.06,-0.0555 -0.017,-0.0607 0.015,-0.0361 0.1,-0.0716 0.038,-0.0369 0.017,-0.0409 0.004,-0.0573 0.012,-0.0424 0.034,-0.0401 0.06,-0.0395 0.341,-0.1408 0.115,-0.0584 0.111,-0.0375 0.079,0.0203 0.116,0.0069 0.192,0.2977 0.571,-0.0338 0.06,0.0092 0.047,0.0223 0.091,0.0607 0.096,0.0015 0.132,-0.0192 0.253,-0.0624 0.15,-0.0201 0.149,-0.0418 0.122,-0.063 0.31,-0.2559 0.084,-0.1632 0.198,-0.1437 -0.205,-0.0965 -0.017,-0.0601 -0.063,-0.0604 -0.012,-0.0226 -0.002,-0.0295 0.008,-0.0292 0.018,-0.0346 0.065,-0.053 0.11,-0.0673 0.432,-0.1884 0.479,-0.0667 0.606,0.0727"},{"id":"49","nom":"UR","clSc01":"0","clSc02":"0","clSc03":"4","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"4","clSc11":"4","clSc12":"0","clSc13":"3","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"3","clSc18":"3","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 148.996,76.7519 0.252,-0.0117 0.055,0.0169 0.033,0.0318 0.053,0.1214 0.081,0.0824 0.065,0.0155 0.075,-0.0201 0.113,-0.0635 0.105,-0.0395 0.084,-0.0206 0.13,-0.0453 0.079,-0.0132 0.059,0.0195 0.074,0.0418 0.102,0.012 0.312,-0.0054 0.078,0.0215 0.032,0.0418 -0.007,0.0486 0.005,0.0521 0.033,0.0384 0.064,0.0487 0.069,0.004 0.026,0.0338 0.012,0.1219 0.027,0.0659 0.041,0.0203 0.049,-0.01 0.072,-0.0498 0.276,-0.0885 0.051,-0.0106 0.499,-0.1952 0.15,0.1849 0.019,0.0315 0.028,0.0698 0.007,0.0645 -0.005,0.1116 -0.047,0.0593 -0.074,0.0441 -0.237,0.0672 -0.05,0.0069 -0.038,-3e-4 -0.029,0.0037 -0.033,0.0181 -0.051,0.0366 -0.288,0.1475 -0.019,0.0707 0.011,0.0544 0.007,0.2124 -0.121,0.1088 -0.125,0.0475 -0.074,0.055 -0.077,0.0206 -0.083,0.0137 -0.031,0.0272 0.007,0.1314 -0.016,0.0928 -0.101,0.0876 -0.089,0.1053 -0.012,0.0241 -0.004,0.0149 0.01,0.1007 -0.037,0.0373 -0.038,0.0177 -0.167,0.0258 -0.044,-0.0032 -0.166,-0.0409 -0.194,0.0469 -0.11,0.0802 -0.258,0.2307 -0.108,0.0424 -0.112,0.0166 -0.18,0.0553 -0.076,0.0455 -0.039,0.0464 0.001,0.036 0.009,0.029 -0.005,0.0438 -0.019,0.0572 -0.081,0.1263 -0.078,0.1737 -0.008,0.0613 0.013,0.063 0.023,0.0449 0.033,0.0347 0.038,0.0192 0.05,0.0168 0.044,0.0218 0.028,0.0352 0.058,0.1346 0.024,0.0907 -0.033,0.1503 -0.46,0.1377 -0.972,-0.1531 -0.127,0.0048 -0.083,0.0164 -0.037,0.024 -0.028,0.0266 -0.086,0.1764 -0.043,0.0724 -0.026,0.0575 -0.364,0.2108 -0.438,-0.1638 -0.169,-0.1815 -0.117,-0.2015 -0.031,-0.0688 -0.014,-0.0641 0.011,-0.0532 0.079,-0.1798 0.037,-0.1203 0.025,-0.1368 0.005,-0.0945 -0.019,-0.0486 -0.026,-0.029 -0.091,-0.03 -0.034,-0.1432 -0.048,-0.091 -0.004,-0.1317 0.053,-0.0424 0.071,-0.0066 0.184,0.033 0.088,0.0034 0.08,-0.0137 0.038,-0.0413 0.016,-0.0506 0.012,-0.0667 0.001,-0.0476 -0.008,-0.0458 -0.019,-0.0446 -0.003,-0.0613 -0.019,-0.0441 -0.062,-0.0887 -0.035,-0.0667 -0.01,-0.1028 0.012,-0.0527 0.095,-0.1531 0.359,-0.0756 0.022,-0.0538 0.012,-0.0553 -0.019,-0.0555 -0.009,-0.0375 -0.01,-0.0258 -0.032,-0.0146 -0.028,-0.0178 -0.026,-0.0452 0.048,-0.0656 0.026,-0.0798 0.064,-0.142 0.06,-0.0779 0.083,-0.0624 0.033,-0.0338 0.013,-0.0263 -0.007,-0.0201 -0.019,-0.0232 -0.029,-0.0197 -0.093,-0.0149 -0.04,-0.0189 -0.116,0.0072 -0.047,-0.223 0.023,-0.0785 -0.018,-0.0724 -0.029,-0.0484 -0.082,-0.0842 0.007,-0.0366 0.024,-0.0218 0.185,-0.0876 0.564,-0.1992 0.129,-0.0813 0.046,-0.0367 0.034,-0.0438 0.152,-0.3284 0.016,-0.0578 -0.017,-0.0673 0.324,-0.0123 0.043,0.0123 0.055,0.0221 0.017,0.0398 0.042,0.1551 0.045,0.0994 0.082,0.0464 0.064,0.02 0.098,0.0149 0.233,0.0595 0.082,0.0083"},{"id":"50","nom":"SG","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"6","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"6","clSc11":"6","clSc12":"0","clSc13":"3","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"4","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 156.983,70.8207 0.076,-0.1028 0.565,-0.2886 0.113,0.0504 -0.05,0.1025 0.012,0.0143 0.01,0.0166 0.11,0.039 0.041,0.0028 0.054,-0.0068 0.099,-0.0255 0.88,-0.1944 0.002,-6e-4 0.021,0.0664 0.328,0.3344 0.412,0.1277 0.317,0.1895 -0.009,0.4695 -0.108,0.1683 -0.429,0.3685 -0.052,0.0993 -0.057,0.1953 -0.042,0.0761 -0.378,0.3098 -0.356,0.4105 -0.184,0.2113 -0.083,0.164 -0.108,0.2096 -0.01,0.1451 -0.016,0.2279 0.085,0.1833 0.032,0.0427 0.088,0.117 0.093,0.1775 0.005,0.2365 -0.105,0.1477 -0.17,0.1191 -0.129,0.1188 0.013,0.1034 0.001,0.0432 0.085,0.1858 0.123,0.1846 0.338,0.3925 0.061,0.0865 -0.084,0.0155 -0.065,0.0269 -0.052,0.0392 -0.041,0.1033 -0.031,0.0461 -0.103,0.0553 -0.057,0.0475 -0.076,0.0945 -0.056,0.0859 -0.035,0.1317 0.005,0.0526 -0.012,0.0573 -0.031,0.0598 -0.146,0.1767 -0.139,0.0315 -0.032,0.091 -0.035,0.0103 -0.079,-0.006 -0.124,-0.0644 -0.227,-0.0785 -1.484,-0.1483 -0.048,0.0187 -0.058,2e-4 -0.04,-0.0074 -0.175,-0.1414 0.022,-0.1037 -0.012,-0.0421 -0.086,-0.1325 -0.037,-0.0973 -0.005,-0.0407 0.022,-0.0343 0.01,-0.0284 0.052,-0.3186 -0.017,-0.0785 -0.049,-0.0979 -0.146,-0.205 -0.091,-0.0847 -0.09,-0.0458 -0.08,0.0052 -0.083,0.0177 -0.123,0.0424 -0.207,0.0154 -0.072,-0.014 -0.205,-0.0807 -0.006,-0.0209 0.027,-0.0269 0.384,-0.1833 0.061,-0.1554 0.055,-0.5271 -1.165,-0.1554 -0.169,-0.0656 -0.581,-0.3601 -0.065,-0.0017 -0.178,0.0655 -0.295,-0.203 -0.072,-0.0936 -0.002,-0.0275 0.009,-0.0684 0.031,-0.1059 -0.346,-0.0724 -1.043,0.0712 -0.606,-0.0727 0.153,-0.2565 0.205,-0.1093 0.455,0.0432 0.145,-0.0086 0.653,-0.2064 0.103,-0.0636 0.052,-0.0524 -0.009,-0.0913 0.062,-0.0687 0.083,-0.075 0.142,-0.0842 0.069,-0.0555 0.034,-0.0429 -0.032,-0.0871 -0.064,-0.2367 -0.263,-0.3227 -0.048,-0.0481 0.112,-0.0051 0.091,-0.0828 0.153,-0.1881 0.108,-0.0864 0.124,-0.1907 0.041,-0.0401 0.05,-0.012 0.042,0.0109 0.037,6e-4 0.043,-0.0075 0.052,-0.0206 0.055,-0.0157 0.06,-0.0106 0.077,-0.0052 0.04,-0.0174 0.02,-0.0278 0.006,-0.0372 -0.016,-0.1128 0,-0.0395 -0.307,-0.1489 -0.024,-0.0361 -0.011,-0.0561 0.036,-0.0487 0.067,-0.0177 0.06,-0.0086 0.047,-0.0114 0.093,-0.067 0.039,-0.0075 0.088,0.0218 0.067,0.0017 0.191,-0.0206 0.036,0.0046 0.029,0.0206 0.023,0.0277 0.025,0.0192 0.033,0.0058 0.098,-0.0109 0.043,0 0.139,0.0255 0.138,-9e-4 0.184,-0.0195 0.087,-0.0343 0.052,-0.0424 0.1,-0.1225 0.165,0.1328 0.362,0.118 0.432,0.0652 0.196,0.0184 0.043,-0.0232 0.101,-0.0381 0.064,-0.0034 0.093,0.0148 0.076,-0.0166 0.06,-0.0297 0.041,-0.043 0.026,-0.034 0.041,-0.0856 -0.057,-0.1661 -0.034,-0.0072 -0.048,-8e-4 -0.06,0.0166 -0.069,0.0092 -0.117,-0.0115 -0.042,-0.0183 -0.001,-0.0286 0.019,-0.0144 0.02,-0.0051 0.024,0.0086 0.019,5e-4 0.028,-0.0114 0.035,-0.0292 0.043,-0.0218 0.068,-0.0171 0.064,-0.0092 0.091,-0.0037 0.032,-0.0086 0.055,-0.0352 0.052,-0.0161 0.055,-0.0114 0.157,-0.0034 0.103,0.111 0,0.0453 -0.005,0.0409 -0.036,0.0598 0.025,0.0524 0.248,0.2168 0.096,0.0538 0.072,0.0186 m 0.188,0.799 -0.245,-0.0023 -0.398,0.0452 -0.5,0.0688 -0.181,-0.0401 -0.079,-6e-4 -0.397,0.0407 -0.1,-0.0121 -0.038,0.0321 -0.057,0.0664 -0.108,0.1632 -0.084,0.1002 -0.138,0.0882 -0.017,0.022 0.144,0.1938 0.11,-0.0183 0.048,0 0.038,0.0178 0.014,0.0377 -0.048,0.0605 -0.038,0.038 -0.072,0.0521 -0.021,0.0444 -0.007,0.0701 0.078,0.2485 -0.129,0.1043 0.082,0.0667 0.047,0.0189 0.101,0.0203 0.552,0.0492 0.341,0.1283 0.115,0.0595 0.031,-0.0011 0.039,0.0017 0.186,-0.0335 0.146,0.0724 0.097,0.0264 0.077,0.0337 0.098,0.0138 0.07,0.0023 0.313,-0.0813 0.217,-0.0759 0.16,-0.0787 0.153,-0.1168 0.216,-0.276 0.189,-0.631 -0.075,-0.1672 0.058,-0.2785 0.3,-0.0793 0.141,-0.0149 0.156,0.0541 0.473,-0.1995 -0.019,-0.1014 0.019,-0.0816 0.024,-0.0266 0.256,-0.1729 -0.452,-0.0527 -0.172,-0.0464 -0.035,-0.016 -0.075,-0.0447 -0.033,-0.0114 -0.093,-0.0155 -0.024,-0.0074 -0.025,-0.0118 -0.045,0.0026 -0.06,0.0223 -0.233,0.1426 -0.555,0.1689 -0.093,0.0246 -0.13,0.0201 -0.059,0.0681 -0.036,0.0676 -0.019,0.0584 -0.067,0.0509 -0.132,0.0281"},{"id":"51","nom":"AI1","clSc01":"0","clSc02":"0","clSc03":"4","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"4","clSc11":"4","clSc12":"0","clSc13":"3","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"3","clSc18":"3","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 157.241,73.4176 -0.313,0.0813 -0.07,-0.0023 -0.098,-0.0138 -0.077,-0.0337 -0.097,-0.0264 -0.146,-0.0724 -0.057,-0.1157 -0.017,-0.0466 -0.043,-0.0876 -0.024,-0.0344 -0.031,-0.0349 -0.086,-0.0767 -0.039,-0.0676 -0.021,-0.0953 0.031,-0.2597 0.038,-0.0653 0.161,-0.0899 0.092,-0.0727 0.062,-0.0773 0.058,-0.1053 0.01,-0.138 -0.001,-0.0813 0.07,-0.0464 1.178,0.3762 0.355,0.0074 -0.189,0.631 -0.216,0.276 -0.153,0.1168 -0.16,0.0787 -0.217,0.0759"},{"id":"52","nom":"AI2","clSc01":"0","clSc02":"0","clSc03":"4","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"4","clSc11":"4","clSc12":"0","clSc13":"3","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"3","clSc18":"3","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 159.509,71.1714 -0.256,0.1729 -0.024,0.0266 -0.019,0.0816 -0.349,-0.1185 -0.018,-0.0229 0,-0.0452 0.209,0.0085 0.168,-0.0226 0.289,-0.0804"},{"id":"53","nom":"AI3","clSc01":"0","clSc02":"0","clSc03":"4","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"4","clSc11":"4","clSc12":"0","clSc13":"3","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"3","clSc18":"3","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 158.732,71.5979 0.024,0.1555 -0.156,-0.0541 -0.141,0.0149 -0.3,0.0793 0.033,-0.1246 0.115,-0.0429 0.131,-0.0429 0.024,-0.0229 -0.014,-0.0235 -0.032,-0.0183 -0.016,-0.0112 0.002,-0.01 0.012,-0.0183 0.005,-0.0189 0.012,-0.0258 0.029,-0.0155 0.045,-0.02 0.031,-0.0229 0.036,-0.0201 0.043,-0.0068 0.07,0.0395 0.052,0.0361 0.045,0.0435 0.01,0.0392 -0.002,0.0495 -0.058,0.0412"},{"id":"54","nom":"AR","clSc01":"0","clSc02":"0","clSc03":"4","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"4","clSc11":"4","clSc12":"0","clSc13":"3","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"3","clSc18":"3","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 159.509,71.1714 -0.289,0.0804 -0.168,0.0226 -0.209,-0.0085 0,0.0452 0.018,0.0229 0.349,0.1185 0.019,0.1014 -0.473,0.1995 -0.024,-0.1555 0.058,-0.0412 0.002,-0.0495 -0.01,-0.0392 -0.045,-0.0435 -0.052,-0.0361 -0.07,-0.0395 -0.043,0.0068 -0.036,0.0201 -0.031,0.0229 -0.045,0.02 -0.029,0.0155 -0.012,0.0258 -0.005,0.0189 -0.012,0.0183 -0.002,0.01 0.016,0.0112 0.032,0.0183 0.014,0.0235 -0.024,0.0229 -0.131,0.0429 -0.115,0.0429 -0.033,0.1246 -0.058,0.2785 0.075,0.1672 -0.355,-0.0074 -1.178,-0.3762 -0.07,0.0464 0.001,0.0813 -0.01,0.138 -0.058,0.1053 -0.062,0.0773 -0.092,0.0727 -0.161,0.0899 -0.038,0.0653 -0.031,0.2597 0.021,0.0953 0.039,0.0676 0.086,0.0767 0.031,0.0349 0.024,0.0344 0.043,0.0876 0.017,0.0466 0.057,0.1157 -0.186,0.0335 -0.039,-0.0017 -0.031,0.0011 -0.115,-0.0595 -0.341,-0.1283 -0.552,-0.0492 -0.101,-0.0203 -0.047,-0.0189 -0.082,-0.0667 0.129,-0.1043 -0.078,-0.2485 0.007,-0.0701 0.021,-0.0444 0.072,-0.0521 0.038,-0.038 0.048,-0.0605 -0.014,-0.0377 -0.038,-0.0178 -0.048,0 -0.11,0.0183 -0.144,-0.1938 0.017,-0.022 0.138,-0.0882 0.084,-0.1002 0.108,-0.1632 0.057,-0.0664 0.038,-0.0321 0.1,0.0121 0.397,-0.0407 0.079,6e-4 0.181,0.0401 0.5,-0.0688 0.398,-0.0452 0.245,0.0023 0.132,-0.0281 0.067,-0.0509 0.019,-0.0584 0.036,-0.0676 0.059,-0.0681 0.13,-0.0201 0.093,-0.0246 0.555,-0.1689 0.233,-0.1426 0.06,-0.0223 0.045,-0.0026 0.025,0.0118 0.024,0.0074 0.093,0.0155 0.033,0.0114 0.075,0.0447 0.035,0.016 0.172,0.0464 0.452,0.0527"},{"id":"55","nom":"TH","clSc01":"0","clSc02":"0","clSc03":"3","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"3","clSc11":"3","clSc12":"0","clSc13":"3","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"4","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 151.127,68.717 0.008,0.0055 0.322,0.1623 0.271,0.0481 0.434,-0.0278 0.403,-0.087 0.177,-0.1294 0.209,-0.0561 1.236,0.0939 0.612,0 0.15,0.1583 0.415,-3e-4 0.43,0.0673 3.039,1.2802 0.062,0.1956 -0.002,6e-4 -0.88,0.1944 -0.099,0.0255 -0.054,0.0068 -0.041,-0.0028 -0.11,-0.039 -0.01,-0.0166 -0.012,-0.0143 0.05,-0.1025 -0.113,-0.0504 -0.565,0.2886 -0.076,0.1028 -0.072,-0.0186 -0.096,-0.0538 -0.248,-0.2168 -0.025,-0.0524 0.036,-0.0598 0.005,-0.0409 0,-0.0453 -0.103,-0.111 -0.157,0.0034 -0.055,0.0114 -0.052,0.0161 -0.055,0.0352 -0.032,0.0086 -0.091,0.0037 -0.064,0.0092 -0.068,0.0171 -0.043,0.0218 -0.035,0.0292 -0.028,0.0114 -0.019,-5e-4 -0.024,-0.0086 -0.02,0.0051 -0.019,0.0144 0.001,0.0286 0.042,0.0183 0.117,0.0115 0.069,-0.0092 0.06,-0.0166 0.048,8e-4 0.034,0.0072 0.057,0.1661 -0.041,0.0856 -0.026,0.034 -0.041,0.043 -0.06,0.0297 -0.076,0.0166 -0.093,-0.0148 -0.064,0.0034 -0.101,0.0381 -0.043,0.0232 -0.196,-0.0184 -0.432,-0.0652 -0.362,-0.118 -0.165,-0.1328 -0.1,0.1225 -0.052,0.0424 -0.087,0.0343 -0.184,0.0195 -0.138,9e-4 -0.139,-0.0255 -0.043,0 -0.098,0.0109 -0.033,-0.0058 -0.025,-0.0192 -0.023,-0.0277 -0.029,-0.0206 -0.036,-0.0046 -0.191,0.0206 -0.067,-0.0017 -0.088,-0.0218 -0.039,0.0075 -0.093,0.067 -0.047,0.0114 -0.06,0.0086 -0.067,0.0177 -0.036,0.0487 0.011,0.0561 0.024,0.0361 0.307,0.1489 0,0.0395 0.016,0.1128 -0.006,0.0372 -0.02,0.0278 -0.04,0.0174 -0.077,0.0052 -0.06,0.0106 -0.055,0.0157 -0.052,0.0206 -0.043,0.0075 -0.037,-6e-4 -0.042,-0.0109 -0.05,0.012 -0.041,0.0401 -0.124,0.1907 -0.108,0.0864 -0.153,0.1881 -0.091,0.0828 -0.112,0.0051 -0.442,-0.3172 0.085,-0.0773 0.024,-0.0363 0.02,-0.0496 0.016,-0.0778 0.065,-0.0521 0,-0.0155 -0.089,-0.0338 -0.11,-0.0733 -0.054,-0.2267 -0.108,-0.0472 -0.024,-0.0318 -0.026,-0.0644 0.003,-0.0358 0.009,-0.0201 0.019,-0.0131 0.05,-0.0235 0.022,-0.0183 0.021,-0.0287 0,-0.0211 0,-0.0144 -0.007,-0.0143 -0.005,-0.0206 0.005,-0.0266 0.064,-0.2333 0.005,-0.0332 -0.029,-0.0367 -0.078,-0.0424 -0.328,-0.0904 -0.112,-0.0435 -0.065,-0.0516 -0.043,-0.0999 0.051,-0.0741 0.021,-0.0195 -0.06,-0.0584 -0.062,-0.0458 -0.705,-0.2348 -0.134,-0.0297 -0.1,-0.0828 -0.038,-0.0398 -0.003,-0.024 0.024,-0.0241 0.067,-0.0375 0.079,-0.0189 0.079,0.0083 0.16,0.0553 0.06,0.0429 0.05,0.0261 0.047,0.0057 0.036,0 0.068,-0.0864 0.096,-0.0728 0.085,-0.1105 0.046,-0.0475 0.019,-0.0549 -0.017,-0.0459 -0.126,-0.0984 -0.043,-0.1472 -0.182,0.0533 0.131,-0.2125 0.008,0 0.098,0.0327 0.129,-0.0378 0.337,0.1216"},{"id":"56","nom":"ZH","clSc01":"0","clSc02":"0","clSc03":"3","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"3","clSc11":"3","clSc12":"0","clSc13":"3","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 149.982,68.9956 0.067,-0.0175 0.052,-0.0243 0.046,-0.0326 0.033,-0.0158 0.027,-0.0051 0.047,0.0014 0.05,-0.0097 0.045,-0.0218 0.05,-0.0401 0.025,-0.0171 0.182,-0.0533 0.043,0.1472 0.126,0.0984 0.017,0.0459 -0.019,0.0549 -0.046,0.0475 -0.085,0.1105 -0.096,0.0728 -0.068,0.0864 -0.036,0 -0.047,-0.0057 -0.05,-0.0261 -0.06,-0.0429 -0.16,-0.0553 -0.079,-0.0083 -0.079,0.0189 -0.067,0.0375 -0.024,0.0241 0.003,0.024 0.038,0.0398 0.1,0.0828 0.134,0.0297 0.705,0.2348 0.062,0.0458 0.06,0.0584 -0.021,0.0195 -0.051,0.0741 0.043,0.0999 0.065,0.0516 0.112,0.0435 0.328,0.0904 0.078,0.0424 0.029,0.0367 -0.005,0.0332 -0.064,0.2333 -0.005,0.0266 0.005,0.0206 0.007,0.0143 0,0.0144 0,0.0211 -0.021,0.0287 -0.022,0.0183 -0.05,0.0235 -0.019,0.0131 -0.009,0.0201 -0.003,0.0358 0.026,0.0644 0.024,0.0318 0.108,0.0472 0.054,0.2267 0.11,0.0733 0.089,0.0338 0,0.0155 -0.065,0.0521 -0.016,0.0778 -0.02,0.0496 -0.024,0.0363 -0.085,0.0773 0.442,0.3172 0.048,0.0481 0.263,0.3227 0.064,0.2367 0.032,0.0871 -0.034,0.0429 -0.069,0.0555 -0.142,0.0842 -0.083,0.075 -0.062,0.0687 0.009,0.0913 -0.052,0.0524 -0.103,0.0636 -0.653,0.2064 -0.145,0.0086 -0.455,-0.0432 -0.205,0.1093 -0.153,0.2565 -0.479,0.0667 -0.432,0.1884 -0.11,0.0673 -0.065,0.053 -0.018,0.0346 -0.008,0.0292 0.002,0.0295 0.012,0.0226 0.063,0.0604 0.017,0.0601 -0.247,0.0221 -0.327,-0.0977 -0.082,-0.0432 -0.045,-0.0464 -0.028,-0.0412 -0.127,-0.1056 -0.187,-0.1108 -0.205,-0.1529 -0.435,-0.0492 -0.314,0.042 -0.207,0.0496 -0.115,5e-4 -0.131,-0.0148 -0.44,-0.0988 -0.074,-0.0324 -0.029,-0.0446 -0.014,-0.047 -0.051,-0.1176 -0.249,-0.3602 -0.028,-0.0896 0.031,-0.0046 0.034,-5e-4 0.03,-0.0023 0.073,-0.0206 0.191,-0.0802 0.207,-0.1815 0.101,-0.1208 0.033,-0.1065 -0.329,0.0704 -0.13,-0.0962 -0.024,-0.0424 -0.011,-0.036 0.004,-0.0361 0.022,-0.1197 0.002,-0.0695 -0.05,-0.0398 -0.217,-0.075 -0.064,-0.0355 -0.032,-0.0247 0.022,-0.0601 0.294,-0.2044 0.047,-0.0916 -0.028,-0.0412 -0.151,-0.1357 -0.082,-0.1712 -0.245,-0.3536 -0.058,-0.1537 0.005,-0.1134 0.055,-0.2101 0.185,-0.2016 0.24,-0.1643 0.254,-0.2788 0.019,-0.0674 0.308,-0.0351 0.014,-0.0527 0.129,-0.1895 0.339,-0.1518 0.332,-0.0229 0.171,0.1083 0.131,0.15 0.023,0.0191 -0.237,0.1549 -0.01,0.0825 0.046,0.0197 0.076,0.0499 0.034,0.0277 0.028,0.0312 0.033,0.0272 0.039,0.0098 0.038,-0.0026 0.086,-0.0862 0.143,-0.2548 -0.003,-0.0389 0.048,-0.057 0.012,-0.083 -0.005,-0.0787 0.013,-0.0756 -0.004,-0.0381 -0.026,-0.0432 -0.019,-0.0504 0.025,-0.0613 0.041,-0.0235 0.058,-0.0148 0.048,-0.0012 0.01,0.0178 0.007,0.0681 0.072,0.0246 0.063,-0.2625 -0.1,-0.0066 -0.052,-0.0142 0.002,-0.0018 0.154,-0.1377 0.189,-0.1205 0.077,-0.0991 0.093,-0.0636 0.478,0.0086 -0.036,0.1695 0.019,0.1764 0.046,0.0618 0.069,0.0721 0.077,0.0333 0.098,0.0223 0.452,0.012"},{"id":"57","nom":"SH","clSc01":"0","clSc02":"0","clSc03":"3","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"3","clSc11":"3","clSc12":"0","clSc13":"3","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"2","clSc18":"2","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 148.381,67.5745 0.039,0.1345 0.109,0.0547 0.137,-0.0607 0.057,-0.2416 0.101,-0.071 0.143,0.0321 0.107,0.109 0.087,0.1283 0.082,0.0882 0.115,0.0174 0.122,-0.0171 0.109,0.0143 0.073,0.1119 -0.03,0.0418 -0.147,0.1497 -0.037,0.0725 0.047,0.0904 0.088,0.0736 0.028,0.0845 0.021,0.0721 0.586,-0.0057 -0.091,-0.0684 0.1,-0.2173 0.298,0.0091 0.361,0.1423 0.287,0.1829 -0.204,0.0321 0.001,0.077 0.157,0.1059 -0.337,-0.1216 -0.129,0.0378 -0.098,-0.0327 -0.008,0 -0.131,0.2125 -0.025,0.0171 -0.05,0.0401 -0.045,0.0218 -0.05,0.0097 -0.047,-0.0014 -0.027,0.0051 -0.033,0.0158 -0.046,0.0326 -0.052,0.0243 -0.067,0.0175 -0.452,-0.012 -0.098,-0.0223 -0.077,-0.0333 -0.069,-0.0721 -0.046,-0.0618 -0.019,-0.1764 0.036,-0.1695 -0.478,-0.0086 -0.093,0.0636 -0.077,0.0991 -0.189,0.1205 -0.154,0.1377 -0.002,0.0018 -0.126,-0.035 -0.155,-0.0178 -0.538,0.0619 -0.166,0.0564 -0.153,0.0741 -0.164,0.0573 -0.197,0.0057 -0.229,-0.0882 -0.284,-0.1463 -0.055,-0.0057 -0.174,-0.0432 0.071,-0.12 -0.028,-0.0945 -0.046,-0.081 0.012,-0.0819 0.109,-0.0838 0.28,-0.104 0.118,-0.0744 0.084,-0.2216 0.052,-0.0807 0.15,-0.1489 0.087,-0.0349 0.123,0.0023 0.597,-0.0802 0.167,-0.0572 -0.103,-0.1747 0.176,-0.0681 0.276,0.0103 0.205,0.0624 0.018,0.0807 0.01,0.1432"},{"id":"58","nom":"GL","clSc01":"0","clSc02":"0","clSc03":"4","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"4","clSc11":"4","clSc12":"0","clSc13":"3","clSc14":"2","clSc15":"2","clSc16":"2","clSc17":"3","clSc18":"3","clSc19":"3","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 154.516,75.8086 0.207,-0.0154 0.123,-0.0424 0.083,-0.0177 0.08,-0.0052 0.09,0.0458 0.091,0.0847 0.146,0.205 0.049,0.0979 0.017,0.0785 -0.052,0.3186 -0.01,0.0284 -0.022,0.0343 0.005,0.0407 0.037,0.0973 0.086,0.1325 0.012,0.0421 -0.022,0.1037 -0.308,0.1889 -0.189,0.1789 -0.058,0.0258 -0.091,0.0275 -0.21,0.002 -0.16,0.0238 -0.378,0.1777 -0.111,0.0212 -0.091,-0.0229 -0.05,-0.0481 -0.08,-0.0401 -0.107,-0.0257 -0.184,-0.0115 -0.108,0.0161 -0.074,0.0246 -0.026,0.0263 -0.009,0.0407 0.002,0.085 -0.014,0.0381 -0.03,0.034 -0.031,0.045 -0.033,0.055 -0.055,0.079 -0.081,0.073 -0.158,0.1016 -0.251,0.0813 -0.612,0.13 -0.105,0.0017 -0.043,-0.0206 -0.026,-0.0736 -0.02,-0.0295 -0.054,-0.0066 -0.115,-0.0289 -0.23,-0.0074 -0.007,-0.2124 -0.011,-0.0544 0.019,-0.0707 0.288,-0.1475 0.051,-0.0366 0.033,-0.0181 0.029,-0.0037 0.038,3e-4 0.05,-0.0069 0.237,-0.0672 0.074,-0.0441 0.047,-0.0593 0.005,-0.1116 -0.007,-0.0645 -0.028,-0.0698 -0.019,-0.0315 -0.15,-0.1849 0.236,-0.0819 0.054,-0.1329 0.043,-0.1483 -0.019,-0.0698 -0.043,-0.0504 -0.177,-0.0824 -0.054,-0.0384 -0.048,-0.0601 -0.004,-0.0321 0.031,-0.0378 -0.001,-0.0174 -0.311,-0.3067 -0.155,-0.0973 0.053,-0.1231 0.126,-0.0636 0.275,-0.0893 0.096,-0.0747 0.088,-0.0907 0.11,-0.1544 0.01,-0.0798 -0.026,-0.1449 0.052,-0.059 0.026,-0.0452 0.032,-0.1237 0,-0.0627 0.213,-0.4672 0.178,-0.0655 0.065,0.0017 0.581,0.3601 0.169,0.0656 1.165,0.1554 -0.055,0.5271 -0.061,0.1554 -0.384,0.1833 -0.027,0.0269 0.006,0.0209 0.205,0.0807 0.072,0.014"},{"id":"59","nom":"BL3","clSc01":"0","clSc02":"0","clSc03":"3","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"3","clSc11":"3","clSc12":"0","clSc13":"11","clSc14":"0","clSc15":"10","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"3","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 135.57,70.7692 0.005,-0.0055 0.211,-0.2339 0.244,-0.3513 0.137,0.071 0.038,-5e-4 0.003,0.1108 -0.048,0.0632 -0.089,0.0201 -0.115,-0.0166 -0.064,0.0234 -0.015,0.035 0.024,0.0446 0.079,0.0753 0.01,0.0236 0.002,0.0042 -0.002,0.0289 -0.014,0.0315 -0.02,0.0186 -0.169,0.1036 -0.144,-0.0143 -0.073,-0.0317"},{"id":"60","nom":"JU2","clSc01":"0","clSc02":"0","clSc03":"3","clSc04":"3","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"3","clSc11":"3","clSc12":"0","clSc13":"11","clSc14":"0","clSc15":"10","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"4","clSc24":"3","clSc25":"3","clSc26":"0","clSc27":"0","clSc28":"3","chemin":"m 136.895,72.5968 -0.094,0.0051 -0.208,-0.018 -0.04,-0.0177 -0.009,-0.0353 0.026,-0.0735 0.181,-0.1145 0.084,0.0157 0.029,0.0226 0.031,0.0312 0.019,0.045 0.009,0.0492 -0.012,0.0584 -0.016,0.0318"},{"id":"61","nom":"Sardaigne","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"0","clSc05":"0","clSc08":"0","clSc06":"7","clSc07":"8","clSc09":"0","clSc10":"0","clSc11":"0","clSc12":"0","clSc13":"0","clSc14":"0","clSc15":"0","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"0","clSc24":"0","clSc25":"0","clSc26":"0","clSc27":"0","clSc28":"0","chemin":"m 159.928,158.71 -0.198,0.524 0.182,0.198 -0.065,0.349 -0.275,0.588 -0.134,0.484 -0.018,0.163 0.034,0.163 0.09,0.108 0.255,0.148 0,0.069 -0.303,0.088 -0.282,0.252 -0.158,0.312 0.063,0.269 -0.085,0.097 0.036,0.064 0.08,0.06 0.043,0.075 -0.023,0.086 -0.103,0.221 -0.024,0.113 -0.095,0.105 -0.202,0.063 -0.187,0.101 -0.046,0.226 -0.087,-0.038 -0.04,-0.038 0.005,-0.055 0.048,-0.089 -0.172,-0.102 -0.173,-0.022 -0.171,0.041 -0.166,0.083 -0.083,0 -0.054,-0.1 -0.1,-0.058 -0.224,-0.083 -0.28,-0.256 -0.064,-0.039 -0.108,-0.049 -0.253,-0.213 -0.093,-0.048 -0.117,-0.023 -0.154,-0.057 -0.14,-0.073 -0.083,-0.074 -0.075,0.082 -0.156,-0.074 -0.209,-0.052 -0.4,-0.031 -0.209,0.076 -0.183,0.155 -0.125,0.153 -0.04,0.069 -0.323,-0.08 -0.259,-0.19 -0.449,-0.41 -0.103,0.06 -0.091,-0.05 -0.088,-0.093 -0.097,-0.069 -0.159,-0.029 -0.116,0.01 -0.016,0.037 0.146,0.051 0,0.083 -0.052,0.089 0.065,0.052 0.092,0.04 0.03,0.056 0.01,-0.01 0.125,0.026 0.276,-0.047 0.054,0.059 0,0.089 -0.01,0.046 -0.447,0.37 -0.137,0.152 -0.088,0.212 -0.026,0.247 0.031,0.22 0.065,0.198 0.082,0.181 0.064,0.068 0.067,0.058 0.012,0.079 -0.173,0.233 -0.122,0.387 0.082,0 -0.117,0.063 -0.034,-0.011 -0.082,-0.052 -0.092,0.139 -1.126,0.892 -0.075,0.027 -0.117,0.008 -0.055,0.034 -0.123,0.155 -0.089,0.045 -0.131,-0.028 -0.151,-0.092 -0.249,-0.19 0,0.227 -0.159,-0.21 -0.271,-0.177 -0.3,-0.113 -0.254,-0.022 -0.244,0.081 -0.285,0.163 -0.191,0.211 0.039,0.226 -0.157,0.075 -0.068,-0.075 0.089,-0.209 -0.107,-0.062 -0.195,-0.004 -0.174,-0.035 0,-0.076 0.168,-0.189 0.005,-0.272 -0.057,-0.081 0.032,-0.027 -0.032,0.027 -0.078,-0.111 -0.257,0.049 -0.087,-0.589 -0.141,-0.477 -0.082,0 -0.087,0.06 -0.26,-0.106 -0.182,-0.023 0.052,-0.056 0.1,-0.171 -0.152,-0.083 -0.24,0.116 -0.007,-0.042 -0.05,-0.069 -0.047,-0.187 -0.091,-0.134 -0.12,-0.061 -0.134,0.075 -0.047,-0.114 0.008,-0.274 -0.036,-0.142 -0.078,-0.08 -0.106,-0.045 -0.069,0.017 0.034,0.108 -0.068,-0.037 -0.05,-0.056 -0.03,-0.077 -0.01,-0.098 -0.03,-0.122 -0.068,-0.032 -0.078,-0.004 -0.06,-0.035 -0.081,-0.16 -0.012,-0.095 0.055,-0.08 0.551,-0.503 0.063,-0.206 -0.182,-0.242 0.017,-0.17 -0.389,-0.229 -0.089,-0.213 0.046,-0.1 0.194,-0.181 0.063,-0.09 0.04,-0.164 -0.013,-0.096 -0.064,-0.118 0.083,-0.065 0.045,-0.065 -0.045,0.065 -0.083,0.065 -0.095,-0.176 -0.039,-0.035 0.01,-0.047 0.085,-0.128 0.303,-0.302 0.149,-0.184 0.181,-0.367 0.13,-0.205 -0.083,-0.084 0.088,-0.149 -0.019,-0.214 -0.138,-0.462 -0.032,-0.501 -0.051,-0.117 0,-0.076 0.047,-0.104 -0.027,-0.29 0.023,-0.061 0.151,0.023 0.098,0.061 0.346,0.43 0.19,0.156 0.236,0.067 0.114,-0.021 0.191,-0.035 -0.568,-0.14 -0.112,-0.086 0.027,-0.188 0.144,-0.188 0.174,-0.17 0.108,-0.135 -0.074,0 -0.038,0.076 -0.051,0.063 -0.063,0.051 -0.075,0.036 0.129,-0.11 0.122,-0.186 0.089,-0.199 0.037,-0.15 0.034,-0.354 -0.018,-0.124 -0.092,-0.162 -0.242,-0.225 -0.324,-0.15 -0.345,-0.019 -0.306,0.167 0.075,0.069 0.037,-0.059 0.049,-0.011 0.065,0.007 0.084,-0.006 -0.128,0.068 -0.08,0.103 -0.102,0.283 -0.074,-0.083 0.097,-0.124 -0.072,-0.094 -0.141,-0.078 -0.163,-0.118 -0.032,-0.007 -0.027,-0.02 -0.041,-0.081 -0.011,-0.087 0.031,-0.071 0.039,-0.069 0.017,-0.076 -0.087,-0.409 0.011,-0.128 0.132,-0.237 0.007,-0.137 -0.139,-0.155 -0.16,0.068 -0.032,-0.041 0.081,-0.09 0.187,-0.088 0.034,0.004 0.336,-0.017 0.195,-0.056 0.081,-0.014 0.098,-0.054 0.116,-0.133 0.092,-0.17 0.03,-0.165 -0.055,-0.151 -0.197,-0.295 -0.043,-0.205 -0.042,-0.585 0.186,-0.511 -0.004,-0.333 -0.146,-0.248 -0.24,-0.187 -0.283,-0.154 -0.083,0.083 -0.246,-0.155 -0.027,-0.221 0.095,-0.449 0.15,0.097 -0.15,-0.097 0.027,-0.128 -0.045,-0.205 -0.117,-0.292 -0.159,-0.26 -0.174,-0.113 -0.201,-0.092 -0.087,-0.223 -0.048,-0.275 -0.083,-0.249 -0.228,-0.191 -0.267,0.014 -0.566,0.26 -0.225,-0.083 0.103,-0.218 0.122,-0.16 -0.254,-0.059 -0.186,0.121 -0.115,0.224 -0.049,0.25 -0.096,-0.155 -0.064,-0.17 -0.074,-0.287 0,-0.068 0.189,-0.078 0.179,-0.104 0.127,-0.165 0.035,-0.266 0.029,0.001 0.049,-0.054 0.021,-0.066 -0.059,-0.032 -0.146,-0.007 -0.056,-0.024 -0.065,-0.052 -0.163,-0.2 -0.083,-0.07 -0.133,-0.032 0.84,-1.513 0.063,-0.177 0.011,-0.201 -0.073,-0.165 -0.195,-0.068 -0.147,-0.084 0.038,-0.19 0.119,-0.204 0.101,-0.128 0.083,0 0.033,0.131 0.082,0.013 0.1,-0.003 0.079,0.086 -0.007,0.092 -0.043,0.133 -0.026,0.143 0.043,0.127 0.495,0.495 0.359,0.164 1.237,0.132 0.62,0.139 0.256,0.019 0.217,-0.028 0.863,-0.288 0.221,-0.146 0.176,-0.171 0.074,-0.165 0.756,-0.267 0.274,-0.008 0.192,0.024 0.146,0.059 0.519,-0.299 0.125,-0.072 0.189,-0.158 0.396,-0.516 0.14,-0.09 -0.023,-0.042 0,-0.013 -0.007,-0.006 -0.046,-0.021 0.354,-0.1 0.107,-0.045 0.075,-0.076 0.118,-0.195 0.068,-0.038 0.138,-0.059 0.189,-0.141 0.166,-0.162 0.164,-0.272 0.213,-0.077 0.756,-0.071 0.163,-0.047 0.309,-0.231 0.069,0.084 0.174,-0.179 0.065,-0.169 -0.006,-0.457 0.091,-0.194 0.209,-0.091 0.249,-0.052 0.202,-0.076 0.022,0.101 0.063,0.052 0.095,0.012 0.121,-0.021 0.114,0.144 -0.008,0.384 0.121,0.078 -0.04,-0.051 -0.012,-0.062 0.014,-0.08 0.038,-0.104 0.078,0 0.044,0.145 -0.011,0.033 -0.033,0.05 0,0.069 0.158,-0.017 0.064,-0.016 0.079,-0.036 0.045,0.052 0.182,0.099 0.024,-0.267 0.187,0.049 0.4,0.294 0,-0.076 0.094,0.041 0.082,0.024 0.091,0.011 0.112,0 0,0.069 -0.059,0.034 -0.03,0.036 -0.024,0.04 -0.038,0.047 0.127,0.043 0.071,0.08 0.069,0.094 0.111,0.086 -0.065,0.083 -0.002,0.112 0.067,0.259 0.125,-0.221 0.07,-0.095 0.107,-0.062 -0.037,-0.051 -0.018,-0.041 -0.03,-0.035 -0.065,-0.031 0.139,-0.064 0.137,0.006 0.143,0.036 0.152,0.022 0.065,-0.035 0.049,-0.057 0.061,-0.012 0.092,0.104 -0.083,0.082 0.107,0.054 0.071,0.058 0.06,0.022 0.073,-0.058 0.075,0 0.018,0.048 0.007,0.008 0.013,-0.002 0.038,0.021 -0.014,0.135 -0.032,0.111 -0.065,0.103 -0.116,0.112 -0.024,-0.053 -0.033,-0.054 -0.019,-0.051 -0.197,0.668 -0.104,0.171 0.225,0 -0.083,-0.158 0.204,-0.071 0.123,0.026 0.038,0.106 -0.054,0.172 0.056,0.001 0.009,-0.018 -0.004,-0.029 0.014,-0.029 0.068,0.059 0.033,0.016 0.051,0 0.165,-0.124 0.306,0.012 0.316,0.088 0.203,0.1 -0.126,0.128 -0.169,-0.014 -0.181,-0.071 -0.171,-0.043 -0.184,0.076 -0.056,0.176 -0.041,0.199 -0.138,0.147 0.052,0.153 -0.151,0.04 -0.505,-0.034 -0.007,0.055 0.014,0.015 -0.092,0.012 0.086,0.13 0.089,0.002 0.099,-0.047 0.112,-0.015 0.114,0.037 0.198,0.098 0.067,0.022 0.216,-0.038 0.165,-0.089 0.165,-0.065 0.217,0.035 -0.054,0.1 -0.063,0.075 -0.085,0.045 -0.108,0.013 0,0.069 0.398,0.154 0.063,0.038 0.022,0.134 0.061,0.063 0.094,-0.005 0.126,-0.075 0.074,0.106 0.107,0.065 0.128,0.035 0.144,0.022 -0.364,0.096 -0.112,0.071 0.097,0.141 0,0.07 -0.169,-0.035 -0.141,0.054 -0.043,0.102 0.12,0.105 0.011,-0.123 0.067,0.142 0.312,0.324 0.07,0.153 0.044,0.203 0.335,0.518 0.042,0.147 0.006,0.077 -0.106,-0.095 -0.119,-0.049 -0.276,-0.043 -0.107,0.015 -0.157,0.106 -0.089,0.001 -0.05,-0.035 0.05,0.035 0.089,-0.001 0.157,-0.106 0.107,-0.015 0.276,0.043 0.119,0.049 0.106,0.095 0.049,0.61 0.037,0.112 0.055,0.086 0.073,0.034 0.153,0.026 0.043,0.068 0.012,0.097 0.059,0.112 0.314,0.228 0.065,0.075 0.003,0.111 -0.127,0.189 -0.034,0.113 -0.038,0.239 -0.093,0.169 -0.247,0.314 -0.181,0.404 -0.137,0.149 -0.243,0.058 -0.166,0.063 -0.128,0.148 -0.197,0.319 -0.143,0.128 -0.273,0.184 -0.121,0.149 -0.094,0.216 -0.014,0.17 0.025,0.258 0.021,0.21 0.023,0.103 0.261,0.572 0.115,0.144 0.162,0.06 0.09,0.061 0.248,0.27 0.245,0.137 -0.022,0.171 -0.409,0.838 -0.068,0.351 0.104,0.304 0.065,-0.038 0.08,-0.035 0.066,0.003 0.023,0.07 -0.036,0.103 -0.07,0.025 -0.075,0.002 -0.053,0.028 -0.079,0.143 -0.057,0.137 -0.006,0.13 0.066,0.119 -0.074,0 0,0.069 0.052,0.022 0.046,0.039 0.052,0.022 0,0.068 -0.137,0.133 -0.097,0.233 -0.058,0.278 -0.017,0.272 0.013,0.14 0.057,0.272 0.013,0.155 -0.024,0.112 -0.103,0.184 -0.024,0.161 -0.024,0.068 -0.052,0.086 -0.051,0.116 -0.025,0.149 0.076,0.493 -0.03,0.307 -0.075,0.196 m -13.658,-9.427 0.189,0.042 0.234,-0.019 0.224,-0.081 0.233,-0.184 0.088,-0.032 0.103,0.017 0.107,0.062 -0.107,-0.062 -0.103,-0.017 -0.088,0.032 -0.233,0.184 -0.224,0.081 -0.234,0.019 -0.189,-0.042 m 1.511,0.076 0.226,0.209 0.092,0.161 -0.092,-0.161 -0.226,-0.209 m 0.442,0.57 0.031,0.039 0.118,0.074 -0.118,-0.074 -0.031,-0.039 m 0.288,0.208 0.049,0.045 0.051,0.019 0.062,0.041 -0.062,-0.041 -0.051,-0.019 -0.049,-0.045 m 0.282,0.165 0.058,0.018 0.136,-0.004 0.13,-0.039 0.441,-0.344 0.104,-0.038 -0.104,0.038 -0.441,0.344 -0.13,0.039 -0.136,0.004 -0.058,-0.018 m 1.397,-0.526 0.424,-0.08 0.071,-0.048 0.06,-0.091 0.007,-0.067 -0.007,0.067 -0.06,0.091 -0.071,0.048 -0.424,0.08 m 0.57,-0.353 0,0 -0.031,-0.112 0,0 0.031,0.112 m -0.031,-0.205 0.069,-0.048 -0.069,0.048 0,0 m 0.203,-0.091 0.03,0.002 0.054,0.021 0.049,0.041 0.06,0.12 0.024,0.031 0.025,0.013 -0.025,-0.013 -0.024,-0.031 -0.06,-0.12 -0.049,-0.041 -0.054,-0.021 -0.03,-0.002 m 0.723,0.319 0.462,0.138 0.455,0.431 -0.455,-0.431 -0.462,-0.138 m 1.184,0.798 0.142,0.085 0.096,0.002 0.163,-0.19 0.091,-0.056 -0.091,0.056 -0.163,0.19 -0.096,-0.002 -0.142,-0.085 m 2.045,-0.792 0.045,-0.095 0.06,-0.076 0.185,-0.079 -0.185,0.079 -0.06,0.076 -0.045,0.095 m 0.614,-0.842 0.038,-0.039 0.278,-0.14 0.046,-0.075 -0.046,0.075 -0.278,0.14 -0.038,0.039 m 0.378,-0.279 0,0 -0.025,-0.037 0.025,0.037 m -0.173,-0.182 -0.072,-0.032 -0.258,0.014 0.258,-0.014 0.072,0.032 m -0.77,-0.076 -0.041,-0.041 -0.033,-0.12 0,0 0.033,0.12 0.041,0.041 m -0.07,-0.233 0.004,-0.073 1.436,-0.149 0.265,-0.133 -0.265,0.133 -1.436,0.149 -0.004,0.073 m 2.069,-0.561 0.099,-0.073 0.068,-0.088 0.038,-0.127 -0.038,0.127 -0.068,0.088 -0.099,0.073 m 0.305,-0.532 0.039,-0.046 -0.039,0.046 0,0 m 0.439,-0.336 0.124,0.001 0.229,0.063 -0.229,-0.063 -0.124,-0.001 m 0.581,0.11 0.091,0.009 0.181,-0.058 0.302,-0.2 -0.302,0.2 -0.181,0.058 -0.091,-0.009 m 1.028,-0.499 0.153,-0.049 0.397,0.034 0.061,0.032 -0.061,-0.032 -0.397,-0.034 -0.153,0.049 m -11.514,13.677 0.046,0.06 0.143,0.079 -0.143,-0.079 -0.046,-0.06 m 0.679,0.434 0.059,0.055 0.096,0.13 -0.096,-0.13 -0.059,-0.055 m -2.146,-0.5 0.034,-0.019 0.049,-0.004 -0.049,0.004 -0.034,0.019 m 0.475,-0.013 0.067,-0.017 0.128,-0.067 -0.128,0.067 -0.067,0.017 m 2.736,1.198 -0.038,0.126 0.038,-0.126 0,0 m -10e-4,0.408 0.036,0.064 0.041,0.127 -0.041,-0.127 -0.036,-0.064 m 0.128,0.34 0.037,0.067 0.024,0.02 -0.024,-0.02 -0.037,-0.067 m 0.169,0.146 0.028,0.012 0.012,0.01 -0.012,-0.01 -0.028,-0.012 m 0.67,1.186 0.181,0.054 0.044,0.035 -0.044,-0.035 -0.181,-0.054 m 0.325,0.313 -0.018,0.084 -0.001,0.097 0.001,-0.097 0.018,-0.084 0,0 m -0.019,0.201 0,0 0.022,0.041 -0.022,-0.041 m 0.156,0.219 0.068,0.057 0.031,0.051 -0.031,-0.051 -0.068,-0.057 m 0.152,0.195 -0.054,0.179 0.054,-0.179 0,0 m -0.072,0.24 -0.137,0.146 -0.177,0.062 -0.482,-0.018 0.482,0.018 0.177,-0.062 0.137,-0.146 0,0 m -1.22,0.263 -0.034,0.027 -0.264,0.105 -0.11,0.017 -0.082,-0.032 -0.148,-0.125 -0.09,-0.005 -0.101,0.084 -0.127,0.405 -0.166,0.218 0.166,-0.218 0.127,-0.405 0.101,-0.084 0.09,0.005 0.148,0.125 0.082,0.032 0.11,-0.017 0.264,-0.105 0.034,-0.027"},{"id":"62","nom":"Autre Est","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"0","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"0","clSc11":"0","clSc12":"0","clSc13":"0","clSc14":"0","clSc15":"0","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"0","clSc22":"7","clSc23":"7","clSc24":"0","clSc25":"0","clSc26":"0","clSc27":"0","clSc28":"0","chemin":"m 296.057,171.408 -1.415,0.4 -0.97,0.132 -0.743,0.012 -0.913,0.226 -1.054,0.135 -0.913,-0.957 -0.384,-0.743 -0.271,-0.138 -0.014,0.697 -0.293,0.559 -1.337,0.314 -0.77,-0.433 -0.591,-1.314 -0.749,-1.67 -1.318,-1.349 -1.068,-0.352 -0.092,-0.741 0.097,-0.593 1.284,-0.146 2.006,0.62 0.414,-0.124 0.451,-0.285 -0.086,-0.633 -0.29,-0.563 -0.552,-0.025 -0.382,0.066 -1.234,-0.116 -1.585,0.312 -0.734,-0.294 -0.245,-0.359 -1.325,-0.888 -1.146,-1.192 -1.856,-0.796 -1.212,-2.423 -1.019,-1.058 -1.087,-0.755 0,0 -0.063,-1.015 -0.341,-0.79 -1.252,-1.897 -4.069,-1.844 -0.958,-0.83 -0.421,-0.696 -0.42,-0.658 0.403,-0.019 0.398,0.167 0.51,0.2 0.206,-0.329 -0.221,-0.719 -1.048,-1.682 -0.079,-0.463 0.514,-1.406 0.857,-1.58 -0.057,-1.914 0.266,-1.444 -0.296,-0.937 -0.141,-1.15 0.628,-1.528 0.537,-0.379 0.331,-0.483 0.021,-1.629 -1.211,-0.761 -1.395,-0.143 -1.728,-0.881 -0.711,-1.24 -2.526,-2.094 -2.896,-1.425 -0.153,-0.225 0.159,-0.274 0.138,-0.217 -0.601,-0.016 -0.422,0.173 -0.4,-0.048 -0.024,-0.029 0.024,0.029 -2.044,-1.053 -1.909,-1.176 -3.732,-1.81 -2.647,-0.44 -3.62,-1.455 -2.358,-0.515 0.898,-0.118 1.034,-0.003 5.582,1.941 -0.621,-0.515 -0.913,-0.457 -0.53,-0.264 -2.298,-1.692 -2.222,-1.066 -2.507,-2.009 -3.355,-0.793 -2.286,-0.879 -1.385,0.134 -1.528,0.277 -0.943,0.008 -0.669,-0.158 -0.476,-0.544 0.072,-0.422 -0.084,-0.55 -1.34,-0.879 -1.827,-0.834 -1.732,-1.081 -3.474,-2.918 -0.697,-0.938 0.684,-0.178 0.517,0.016 0.587,-0.193 0.946,-0.004 1.122,0.191 -0.993,-0.624 -1.236,-0.612 -3.196,-2.431 -0.954,-1.148 -0.111,-1.238 0.236,-1.6964 -0.575,-1.2145 -2.466,-1.5722 -0.904,-0.8289 -1.821,-0.4923 -0.813,0.0482 -0.49,0.6124 -0.357,1.3612 -1.614,1.7956 -0.539,0.7801 -0.844,1.0148 -0.731,0.069 -0.433,-0.089 -1.31,-1.7073 -1.254,-1.293 -0.176,-0.6119 -0.112,-0.7531 -0.955,-2.7743 0.673,-0.389 0.658,-0.211 0.915,-0.5723 0.622,0.0622 0.762,-0.1207 0.332,-0.2434 0,0 -0.332,0.2434 -0.762,0.1207 -0.622,-0.0622 0.703,-0.4393 -1.717,-1.5922 -0.777,0.0027 -1.031,0.673 -2.868,-0.6806 -0.549,0.2748 -0.406,0.5394 -0.996,0.6692 -1.409,0.296 -1.572,0.7368 -1.656,0.5216 -1.265,0.3938 -0.725,-0.0692 1.152,-0.8532 -0.491,-0.0151 -1.529,0.6016 -0.881,0.509 -0.282,0.8554 -0.256,1.4109 0.672,0.3744 1.176,1.8606 1.451,0.7958 -0.283,0.7596 -0.381,0.6009 -0.876,0.519 -0.725,-0.385 -0.445,0.01 -0.338,1.215 0.627,3.247 1.012,2.278 1.003,0.993 2.264,1.546 2.392,0.815 4.302,2.605 2.359,0.824 0.62,0.448 1.43,2.009 1.235,2.322 1.332,3.643 0.948,1.795 1.908,2.029 3.967,2.905 3.605,2.124 3.354,1.313 2.617,0.231 6.195,-0.291 1.079,0.126 1.143,0.354 0.272,0.91 -0.42,0.615 -1.303,0.64 -1.329,0.885 -0.147,1.206 1.242,0.849 5.975,2.253 6.112,1.883 1.903,0.96 2.205,1.495 5.327,2.054 0.899,1 3.236,2.15 1.468,1.66 0.279,1.288 -0.701,1.307 -0.323,0.922 -0.551,0.911 -1.378,-0.345 -1.567,-0.935 -2.359,-3.803 -4.308,-0.385 -0.891,-0.281 -1.53,-0.651 -0.092,-0.431 -0.377,-0.537 -0.392,-0.182 -1.648,-0.118 -1.142,0.614 -1.342,1.458 -1.523,2.097 -1.547,3.075 -0.09,1.242 0.841,1.204 2.51,0.671 1.938,1.072 1.278,1.119 0.093,2.704 0.572,1.534 -0.843,0.873 -1.629,-0.227 -2.172,0.555 -1.537,0.992 -0.64,0.946 0.169,2.451 -0.317,0.936 -2.916,1.768 -1.532,1.808 -0.381,0.75 -0.587,0.851 -3.682,0.031 -0.872,-1.054 -0.03,-1.564 0.633,-0.963 1.354,-0.451 0.913,-2 -0.287,-1.445 0.532,-0.641 0.504,-0.452 1.032,-0.264 1.454,-0.253 0.146,-2.015 -1.136,-0.917 -0.398,-1.281 -0.53,-2.373 -1.876,-3.024 -1.005,-2.698 -0.785,-1.331 -1.193,-0.694 -2.152,0.007 -1.068,-0.198 -3.807,-1.872 -0.266,-0.285 0.024,-0.497 0.632,-0.752 -0.426,-1.018 -0.451,-0.961 -0.747,-0.819 -0.818,-0.426 -1.712,0.262 -0.601,0.204 -1.081,-0.07 -0.85,0.364 -0.474,0.011 1.337,-1.439 -0.359,-0.339 -1.322,-0.591 -1.791,-0.089 -0.497,-0.072 -0.293,0.368 -0.35,-0.203 0.037,-0.643 -2.082,-2.877 -1.4,-1.171 -0.705,-0.208 -1.274,0.247 -2.137,-0.514 -1.275,-0.114 -0.703,0.124 -1.05,0.374 -0.528,-0.247 -0.186,-0.385 -1.939,-1.195 -2.419,-0.675 -4.711,-3.8 -1.445,-1.42 -2.972,-1.565 -1.881,-2.277 -1.538,-0.835 -2.24,-0.669 -0.516,0.084 -0.674,0.251 -0.528,0.035 -0.421,-0.296 0.427,-0.304 0.476,-0.139 -0.188,-0.87 -2.548,-2.256 -1.492,-0.726 -0.421,-0.448 -0.311,-0.612 -0.318,-0.403 -0.706,-0.231 -0.603,0.039 -0.835,-0.154 0.027,-1.081 0.166,-0.831 -0.127,-0.706 -0.812,-1.854 -1.408,-1.573 -0.827,-3.756 -0.64,-1.057 -1.556,-0.803 -3.51,-0.899 -4.892,-2.417 -1.034,-0.041 -2.943,-0.939 -1.823,-0.162 -2.37,0.844 -2.876,2.323 -2.335,2.411 -0.849,0.467 -3.011,0.822 -2.66,0.393 -0.011,-0.221 0.112,-0.057 -0.129,-0.317 -0.002,-0.024 -0.094,-0.465 0.399,-0.453 0.208,-0.166 0.056,-0.065 0.453,-0.368 0.287,-0.174 0.247,-0.199 0.086,-0.128 0.092,-0.248 0.016,-0.031 0.034,-0.037 0.044,-0.087 0.098,-0.079 0.16,-0.088 0.124,-0.12 0.022,-0.191 -0.044,-0.069 0,0 0.237,-0.008 0.318,-0.087 0.001,-0.021 -0.005,-0.023 -0.041,-0.021 -0.029,-0.028 -0.019,-0.038 -0.007,-0.04 0.007,-0.039 0.013,-0.037 0.019,-0.032 0.083,-0.101 0.033,-0.027 0.073,-0.049 0.042,-0.02 0.046,-0.016 0.08,-0.001 0.103,0.015 0.18,0.058 0.153,0.067 0.036,0.025 0.299,0.04 0.722,0.023 0.21,0.046 0.765,0.069 0.08,-0.012 0.061,-0.023 0.021,-0.026 0.012,-0.035 -0.009,-0.061 -0.022,-0.032 -0.026,-0.019 -0.087,-0.028 -0.045,-0.019 -0.032,-0.029 -0.017,-0.036 0.014,-0.056 0.039,-0.061 0.103,-0.088 0.053,-0.032 0.067,-0.015 0.112,0.015 0.152,0.042 0.109,0.017 0.055,-10e-4 0.036,-0.009 0.029,-0.012 0.071,-0.042 0.115,-0.118 0.106,-0.127 0.024,-0.05 0.018,-0.059 0,-0.105 -0.025,-0.054 -0.036,-0.039 -0.041,-0.022 -0.022,-0.045 -0.007,-0.068 0.031,-0.125 0,-0.074 -0.009,-0.059 -0.013,-0.04 -0.004,-0.043 0.014,-0.075 0.077,-0.269 -0.005,-0.079 -0.026,-0.054 -0.039,-0.024 -0.029,-0.028 0,-0.04 0.027,-0.04 0.081,-0.043 0.122,-0.04 0.075,-0.045 0.068,-0.058 0.077,-0.081 0.074,-0.056 0.21,-0.107 0.039,-0.033 0.028,-0.046 0.029,-0.117 0.041,-0.106 0.124,-0.177 0.057,-0.066 0.055,-0.046 0.045,-0.014 0.166,-0.036 0.04,-0.018 0.038,-0.023 0.037,-0.03 0.081,-0.088 0.04,-0.068 0.023,-0.07 -0.006,-0.12 -0.024,-0.059 -0.033,-0.045 -0.069,-0.052 -0.029,-0.029 -0.02,-0.036 -0.009,-0.043 0.014,-0.055 0.036,-0.074 0.089,-0.108 0.051,-0.122 0.075,-0.138 0.029,-0.041 0.169,-0.158 0.151,-0.025 0.116,0.083 0.058,0.06 0.019,0.019 0.082,0.046 0.177,0.071 0.108,0.072 0.085,0.045 0.054,0.021 0.207,0.05 0.094,0.033 0.037,0.024 0.031,0.026 0.029,0.031 0.05,0.017 0.07,-0.003 0.131,-0.061 0.058,-0.046 0.04,-0.047 0.014,-0.034 0.017,-0.033 0.017,-0.019 0.026,-0.023 0.033,-0.024 0.159,-0.087 0.05,-0.014 0.058,-0.002 0.097,0.035 0.08,0.013 0.089,-0.001 0.113,-0.038 0.311,-0.031 0.973,0.021 0.2,-0.095 0.082,-0.07 0.084,-0.093 0.024,-0.034 0.019,-0.037 0.003,-0.037 -0.013,-0.037 -0.019,-0.032 -0.017,-0.036 0.003,-0.037 0.015,-0.038 0.041,-0.074 0.015,-0.039 0.04,-0.076 0.025,-0.031 0.04,-0.024 0.089,-0.012 0.122,-0.001 0.873,0.068 0.09,0.019 0.062,0.024 0.031,0.03 0.024,0.032 0.043,0.072 0.051,0.068 0.093,0.084 0.064,0.104 0.053,0.067 0.086,0.086 0.021,0.035 0.006,0.041 -0.03,0.123 0,0.043 0.015,0.036 0.026,0.027 0.03,0.014 0.027,-0.004 0.031,-0.021 0.103,-0.105 0.058,-0.074 0.031,-0.027 0.165,-0.087 0.036,-0.025 0.031,-0.029 0.024,-0.033 0.019,-0.039 0.058,-0.165 0.025,-0.033 0.083,-0.024 0.127,-0.011 0.278,0.004 0.226,0.025 0.065,-0.011 0.087,-0.054 0.04,-0.048 0.019,-0.05 0.003,-0.046 -10e-4,-0.046 -0.011,-0.092 -0.002,-0.148 -0.005,-0.047 -0.013,-0.04 -0.023,-0.035 -0.027,-0.03 -0.115,-0.069 -0.135,-0.059 -0.034,-0.024 -0.016,-0.031 0.009,-0.034 0.024,-0.03 0.19,-0.119 0.122,-0.096 0.015,-0.018 0.017,-0.03 0.05,-0.143 0.015,-0.025 0.028,-0.024 0.062,-0.019 0.239,-0.022 0.093,0.005 0.069,0.019 0.099,0.116 0.064,0.034 0.089,0.04 0.188,0.062 0.153,0.073 0.158,0.142 0.154,0.092 0.533,0.143 0.116,0.052 0.066,0.053 0.01,0.095 0.008,0.043 0.019,0.035 0.033,0.027 0.044,0.026 0.057,0.023 0.151,0.043 0.155,0.026 0.065,-0.002 0.171,-0.027 0.104,-0.036 0.14,-0.063 0.082,-0.074 0.043,-0.16 -0.019,-0.757 0.05,-0.429 -0.041,-0.126 -0.038,-0.024 -0.048,-0.05 -0.057,-0.081 -0.199,-0.437 -0.114,-0.177 -0.048,-0.057 -0.045,-0.042 -0.039,-0.022 -0.043,-0.018 -0.052,-0.016 -0.252,-0.029 -0.267,0 -0.089,-0.023 -0.109,-0.049 -0.18,-0.138 -0.077,-0.07 -0.049,-0.0593 -0.009,-0.0415 0.006,-0.0423 0.012,-0.0436 0.05,-0.0733 0.019,-0.0411 0,-0.0682 -0.022,-0.0415 -0.033,-0.0313 -0.597,-0.3829 -0.21,-0.1701 -0.056,-0.0658 -0.026,-0.0579 0.026,-0.0916 0.003,-0.0602 -0.029,-0.1036 -0.033,-0.0558 -0.036,-0.0409 -0.055,-0.0436 -0.021,-0.0132 -0.078,-0.0363 -0.095,-0.0243 -0.327,-0.0184 -0.072,-0.0165 -0.077,-0.0269 -0.155,-0.0756 -0.022,-0.0146 -0.023,-0.0341 -0.017,-0.0326 -0.014,-0.0364 -0.012,-0.0421 -0.005,-0.0441 0.002,-0.0481 0.054,-0.2776 -0.003,-0.0614 -0.033,-0.0142 -0.305,-0.051 -0.186,0.0561 -0.658,0.2852 -0.257,0.0314 -0.42,0 -0.211,-0.064 -0.13,-0.0084 -0.147,0.0724 -0.26,-0.182 -0.149,-0.2196 -0.271,-0.5202 -0.381,-0.3224 -0.092,-0.1923 -0.021,-0.0178 -0.072,-0.0968 -0.024,-0.055 -0.033,-0.0996 0.084,-0.1592 -0.015,-0.032 -0.026,-0.0366 -0.061,-0.0361 -0.072,-0.0527 -0.103,-0.1137 -0.02,-0.0787 0.005,-0.0653 0.027,-0.0787 -0.018,-0.0403 -0.043,-0.0315 -0.055,-0.0263 -0.059,-0.0653 -0.015,-0.209 -0.026,-0.0633 -0.048,-0.0421 -0.06,-0.0275 -0.064,-0.0492 -0.019,-0.0466 0.002,-0.0393 0.016,-0.0269 0.067,-0.075 0.055,-0.0819 0.018,-0.0153 0,-2e-4 0.124,-0.1013 0.084,-0.1597 0.069,-0.1732 0.048,-0.0777 0.05,-0.0504 0.047,-0.0159 0.063,-0.0095 0.176,-0.0019 0.488,0.0798 0.103,0.0278 0.043,0.0205 0.038,0.0258 0.058,0.0608 0.052,0.0649 0.176,0.2774 0.056,0.0419 0.083,0.0406 0.201,0.0455 0.087,0.0086 0.06,-0.0077 0.024,-0.0281 0.016,-0.0378 0.026,-0.1357 0.015,-0.0413 0.021,-0.0383 0.029,-0.0337 0.033,-0.0292 0.074,-0.0485 0.306,-0.1277 0.044,-0.0271 0.017,-0.032 -0.005,-0.0356 -0.025,-0.0292 -0.04,-0.0235 -0.139,-0.0557 -0.041,-0.0216 0.003,-0.0386 0.333,-0.1689 0.742,-0.1932 -0.202,-0.1736 -0.031,-0.0411 -0.278,-0.536 -0.082,-0.1214 -0.067,-0.075 -0.047,-0.0186 -0.222,-0.0552 -0.235,-0.1328 -0.071,-0.0657 -0.039,-0.0529 -0.012,-0.1059 -0.022,-0.0745 -0.066,-0.1185 -0.031,-0.0753 -0.011,-0.0547 0.018,-0.1088 -0.107,-0.0961 0.029,-0.2016 -0.015,-0.0513 -0.024,-0.0426 -0.297,-0.2479 -0.043,-0.0716 0.005,-0.0407 0.043,-0.0034 0.053,0.0017 0.052,-0.0057 0.044,-0.0481 -0.007,-0.0475 -0.039,-0.067 -0.016,-0.0602 -0.003,-0.0618 0.005,-0.079 -0.022,-0.039 -0.047,-0.0119 -0.111,0.0132 -0.061,-0.0089 -0.07,-0.0421 -0.028,-0.0418 -0.003,-0.0453 0.036,-0.0896 0.013,-0.0638 0.006,-0.1068 -0.024,-0.0547 -0.035,-0.0389 -0.087,-0.0355 -0.227,-0.0423 -0.093,-0.0751 -0.119,-0.1299 -0.246,-0.3304 -0.084,-0.1495 -0.034,-0.101 0.019,-0.0347 0.027,-0.0337 0.03,-0.0275 0.231,-0.1432 0.031,-0.0298 0.028,-0.0343 0.02,-0.0337 0.02,-0.039 0.007,-0.0693 -0.052,-0.3281 -0.076,-0.2078 -0.027,-0.1721 -0.002,-0.0839 0.022,-0.0486 0.029,-0.0315 1.414,-1.0472 0.043,-0.0456 0.04,-0.065 0.051,-0.1345 0.014,-0.0756 0.002,-0.063 -0.059,-0.6824 0,1e-4 0.036,0.009 0.081,0.1036 0.085,0.0401 0.177,0.0172 0.34,-0.0058 0.167,0.0407 0.282,0.2588 -0.164,0.2599 -0.317,0.2686 -0.194,0.3115 -0.043,0.0532 -0.018,0.0298 0.19,0.0086 0.169,0.0418 0.636,0.2376 0.074,0.0406 0.073,0.0705 0.108,0.1769 0.193,0.2387 0.093,0.1449 0.061,0.1449 0.019,0.1918 -0.045,0.1374 -0.066,0.1317 -0.042,0.1706 0.099,-0.0209 0.34,-0.0724 0.363,0.1128 0.333,0.0435 0.354,-0.3035 0.276,-0.375 0.042,-0.1884 -0.126,-0.1838 -0.104,-0.0464 -0.224,-0.0313 -0.033,-0.0617 -0.221,-0.603 0.182,-0.117 -0.131,-0.2564 0.196,-0.3707 0.07,-0.0377 0.243,-0.0532 0.105,-0.0429 0.088,-0.1037 0.036,-0.1363 -0.018,-0.1841 0.025,-0.0264 0.712,-0.6283 0.31,-0.1454 0.006,-0.0079 0.081,-0.1066 0.052,-0.1277 0.008,-0.0154 0.18,-0.1584 0.127,-0.0415 0.128,-0.083 0.101,-0.1122 0,-10e-5 0.3,-0.0498 0.851,0.0071 0.497,0.2549 0.529,-0.0867 0.216,0.0592 -0.112,0.2167 -0.068,0.387 -0.01,0.053 -0.106,0.204 0.005,0.3583 0.064,0.1285 0.163,0.0928 0.643,0.1542 0.179,0.0867 -0.059,0.151 0.078,0.1198 0.118,0.1267 0.058,0.1715 0.125,-0.0039 0.455,-0.1135 0.089,-0.0569 0.188,-0.1816 0.24,-0.0884 1.371,-0.1212 1.354,0.2044 0.187,-0.009 0.15,-0.0503 0.277,-0.1463 1.88,-0.3141 0.021,0.0946 -0.05,0.1906 0.032,0.0891 0.14,0.0395 0.662,-0.0378 0.094,-0.2153 -0.074,-0.2105 -0.128,-0.213 -0.067,-0.2231 0.08,-0.2617 0.194,-0.1619 1.246,-0.5349 0.128,-0.1582 0.17,-0.4635 0.143,-0.1121 0.402,-0.0613 0.874,-0.6099 0.28,-0.0724 0.272,0.1552 0.154,0.0453 0.202,-0.0677 0.072,-0.118 0.194,-0.1225 0.071,-0.0261 0.056,-0.0072 0.259,0.0104 0.127,-0.0104 0.103,-0.0271 0.046,-0.0186 0.081,-0.043 0.112,-0.0847 0.036,-0.0367 0.04,-0.0498 0.022,-0.0446 0.015,-0.0464 -0.006,-0.1334 -0.095,-0.3221 -0.027,-0.0833 -0.033,-0.0753 -0.088,-0.0621 -0.526,-0.2308 -0.31,-0.0951 -0.526,-0.0555 -0.06,-0.032 -0.067,-0.0459 -0.11,-0.1241 -0.05,-0.0668 -0.115,-0.2648 -0.063,-0.045 0,0 0.067,-0.0776 0.088,-0.2745 0.008,-0.286 -0.083,-0.2136 -0.231,-0.1339 -0.173,-0.0129 -0.274,-0.3127 0,0 0.274,0.3127 -0.299,-0.0221 -0.201,-0.1603 -0.092,-0.2118 0.052,-0.1054 0.12,-0.0787 0.107,-0.1309 0.024,-0.1571 -0.01,-0.1263 0.044,-0.1013 0.088,-0.0386 -0.017,0.0461 -0.074,0.6405 0.074,-0.6405 0.017,-0.0461 0.1,-0.0442 0.134,-0.14 -0.027,-0.1525 -0.05,-0.1009 0.104,-0.2879 -0.104,0.2879 -0.029,-0.0603 -0.021,-0.1649 0.242,-0.1999 0.065,-0.0704 0.04,-0.0996 0.058,-0.3567 -0.026,-0.2365 0.138,-0.3765 -0.06,-0.1869 -0.099,-0.0807 -0.376,-0.205 -0.232,-0.2548 -0.114,-0.0842 0,-0.0017 -0.001,0 -0.059,-0.026 -0.061,-0.0083 -0.061,0.0083 -0.322,0.1262 -0.279,0.2193 -0.194,0.2542 -0.006,0.207 -0.276,0.0089 -0.215,-0.0387 -0.18,0.0229 -0.168,0.1944 -0.053,0.1403 -0.009,0.0933 -0.03,0.0848 -0.113,0.1131 -0.483,0.1686 -0.287,0.0558 -0.075,-0.002 -0.154,-0.004 -0.478,-0.1054 -0.25,-0.099 -0.428,-0.2791 -1.185,-0.262 -0.275,-0.1443 -0.141,-0.1368 -0.018,-0.1039 0.035,-0.1194 0.028,-0.26 0.045,-0.1059 0,-0.0653 -0.042,-0.0343 -0.069,0.0037 -0.047,-0.0275 0.019,-0.1262 -2.094,-0.4512 -0.185,-0.0192 -0.581,0.0492 -0.207,-0.0375 -0.228,0.0496 -0.305,-0.0347 -0.372,-0.0424 -0.249,-0.0503 -0.013,-0.1034 0.129,-0.1188 0.17,-0.1191 0.105,-0.1477 -0.005,-0.2365 -0.093,-0.1775 -0.088,-0.117 -0.032,-0.0427 -0.085,-0.1833 0.016,-0.2279 0.01,-0.1451 0.108,-0.2096 0.083,-0.164 0.184,-0.2113 0.356,-0.4105 0.378,-0.3098 0.042,-0.0761 0.057,-0.1953 0.052,-0.0993 0.429,-0.3685 0.108,-0.1683 0.009,-0.4695 -0.317,-0.1895 -0.412,-0.1277 -0.328,-0.3344 -0.021,-0.0664 -0.062,-0.1956 -3.039,-1.2802 -0.43,-0.0673 -0.196,2e-4 -0.375,-0.1613 -0.613,0 -0.019,0.0011 -1.21,-0.0919 -0.209,0.0561 -0.175,0.1284 -1.116,0.0648 -0.001,-5e-4 -0.079,-0.0693 -0.254,-0.2433 0.254,0.2433 0.079,0.0693 -0.315,-0.1589 -0.008,-0.0055 0,0 -0.157,-0.1059 -0.001,-0.077 0.204,-0.0321 -0.287,-0.1829 -0.361,-0.1423 -0.298,-0.0091 -0.1,0.2173 0.091,0.0684 -0.586,0.0057 -0.021,-0.0721 -0.028,-0.0845 -0.035,-0.0292 0.209,0.125 0.281,0.0212 -0.281,-0.0212 -0.209,-0.125 -0.053,-0.0444 -0.047,-0.0904 0.037,-0.0725 0.147,-0.1497 0.03,-0.0418 -0.073,-0.1119 -0.109,-0.0143 -0.122,0.0171 -0.115,-0.0174 -0.082,-0.0882 -0.087,-0.1283 -0.107,-0.109 -0.143,-0.0321 -0.101,0.071 -0.057,0.2416 -0.137,0.0607 -0.109,-0.0547 -0.039,-0.1345 -0.01,-0.1432 -0.018,-0.0807 -0.205,-0.0624 -0.276,-0.0103 -0.176,0.0681 0.103,0.1747 -0.167,0.0572 -0.597,0.0802 -0.123,-0.0023 -0.087,0.0349 -0.15,0.1489 -0.052,0.0807 -0.037,0.0971 -0.071,0.0341 -0.133,0.1794 -0.241,0.0894 -0.109,0.0838 -0.012,0.0819 0.046,0.081 0.028,0.0945 -0.071,0.12 0.174,0.0432 0.055,0.0057 0.284,0.1463 0.229,0.0882 0.197,-0.0057 0.164,-0.0573 0.153,-0.0741 0.141,-0.048 0.387,-0.0282 0,0 -0.387,0.0282 0.025,-0.0084 0.538,-0.0619 0.155,0.0178 0.126,0.035 0.002,-0.0018 0.154,-0.1377 0.095,-0.0603 -0.095,0.0603 -0.154,0.1377 -0.002,0.0018 0.052,0.0142 0.1,0.0066 -0.063,0.2625 -0.072,-0.0246 -0.007,-0.0681 -0.01,-0.0178 -0.048,0.0012 -0.058,0.0148 -0.041,0.0235 -0.025,0.0613 0.019,0.0504 0.026,0.0432 0.004,0.0381 -0.013,0.0756 0.005,0.0787 -0.012,0.083 -0.048,0.057 0,0 -0.024,0.0286 -0.149,0.0338 -0.1,-0.0828 -0.05,0.033 0.05,-0.033 -0.023,-0.0191 -0.131,-0.15 -0.128,-0.0808 0.368,-0.051 0,0 -0.368,0.051 -0.043,-0.0275 -0.332,0.0229 -0.339,0.1518 -0.065,0.0955 -0.021,0.0147 -0.265,0.0449 -0.17,0.0281 -0.963,-0.192 0,0 0.963,0.192 0.17,-0.0281 0.265,-0.0449 0.021,-0.0147 -0.064,0.094 -0.014,0.0527 -0.308,0.0351 -0.033,0.0038 -0.709,-0.0029 -0.421,-0.0755 -0.108,-0.0481 -0.078,-0.1068 -0.06,-0.1068 -0.059,-0.0481 -0.129,-0.0092 -0.287,-0.0595 -0.2,6e-4 -0.598,0.0681 -0.057,0.0252 -0.055,0.0541 -0.076,0.0541 -0.203,0.0409 -0.24,0.0879 -0.091,0.0476 -0.093,0.073 -0.019,0.0238 -0.111,0.0325 -1.847,0.1363 -0.191,-0.005 -0.004,-0.0053 -0.021,-0.1039 -0.036,-0.1039 -0.067,-0.0475 -0.715,-0.0292 -0.156,-0.0539 -0.201,0.2133 -0.119,0.0958 -0.53,-0.0139 0.53,0.0139 -0.058,0.0471 -0.208,0.0801 -0.437,0.0614 0,0 -0.486,0.0683 -0.244,-0.022 -0.161,-0.0576 0,0.0462 0,-0.0462 -0.412,-0.1474 0.029,2e-4 0.261,0.0015 0.118,-0.077 0.064,-0.122 0.352,0.0975 -0.352,-0.0975 0.082,-0.1554 -0.251,0.0177 -0.189,0.0384 -0.048,-0.0134 -0.557,-0.1531 -0.399,-0.7461 0.102,-1.1052 0.606,-1.4629 0.169,-1.0739 -0.27,-0.6839 0.359,-1.0247 0.987,-1.3655 0.659,-1.4402 0.329,-1.5159 0.478,-0.9884 0.94,-0.6925 2.23,-1.9363 0.18,-0.1455 -0.06,-0.9657 -0.601,-0.1363 -0.88,-0.2776 -2.238,-0.343 -2.086,-0.2202 -0.947,-0.2726 -0.83,-0.7293 -0.514,-0.0098 -1.006,0.2608 -1.258,0.1764 -0.914,-0.1542 -0.572,0.0297 -0.322,0.1347 -0.161,-0.119 -0.229,-0.6254 -0.479,-0.1634 -0.743,-0.1428 -0.462,0.0617 -0.319,0.3105 -0.492,0.2191 -0.453,-0.0714 -1.416,-1.4434 -0.365,-0.3192 -0.093,-0.2938 -0.355,-0.5372 -0.844,-0.534 -0.84,-0.1693 -0.42,0.06 -0.743,-0.2748 -0.102,-0.0491 -0.287,-0.137 -0.28,-0.021 -0.397,-0.0299 -0.336,0.0753 -0.342,0.0768 -0.507,0.3386 -0.695,0.1018 -0.575,-0.1018 -0.204,-0.1522 -0.135,-0.1015 -0.305,-0.1352 -0.864,-0.1699 -0.373,-0.3679 -0.879,-0.0103 -1.112,0.1217 -0.75,0.1905 -0.388,0.0016 -0.805,-0.4831 -0.899,-0.7239 -0.572,-0.3452 -0.256,-0.2986 -0.707,-0.1255 -1.007,-0.3571 -0.699,-0.3884 -0.6,-0.2419 -0.846,-0.1206 -0.698,0.0124 -0.204,-0.6535 -0.085,-0.7466 -0.57,-0.4994 0.781,-1.9536 -0.464,-0.1915 -0.507,0.1564 -0.734,0.4652 -0.349,0.5562 -0.21,0.4923 -1.232,0.4675 -1.953,0.1693 -2.1344,-0.1693 -0.2965,-0.1256 -0.1363,-0.1428 -0.0022,-0.172 0.1493,-0.2646 0.3722,-0.3208 0.092,-0.4577 -0.3819,-0.396 -0.2489,-0.1542 0.0985,-0.3836 0.2824,-0.4804 0.0552,-0.2737 -1.4456,-0.8294 -1.0463,-0.1618 -1.015,-0.0292 -0.7704,-0.093 -0.449,0.0384 -0.3235,0.2418 -0.3268,0.1731 -0.2446,-0.2077 -0.449,-1.4683 -0.3473,-0.2219 -1.3125,-0.245 -1.781,-0.0877 -0.475,-0.2678 -0.2608,-0.6605 -0.1645,-0.7953 -0.5864,-0.7618 -0.3008,-0.191 -0.5324,-0.3381 -0.9305,0.139 -1.1178,0.4415 -0.66,0.1223 -0.251,0.0471 -0.8905,-0.4307 -0.9998,-0.6736 -0.8018,-0.7146 -0.1937,-0.3971 0.2456,-0.4821 -0.2954,-0.3689 -0.4295,-0.6752 -0.1234,-0.5275 4.8226,-1.8649 2.9366,-0.9549 1.3839,-0.2889 0.8386,-0.1753 1.8135,-0.0654 1.4077,0.3354 1.8492,0.1623 1.4142,-0.4593 1.1134,0.3911 1.2703,-0.2861 -0.9674,-0.1667 -1.4661,-0.462 -2.0461,0.3749 -1.4218,-0.449 -1.1816,-0.0444 -0.7357,-0.3576 -0.7932,-0.6048 0.2061,0.1571 5.6259,-0.0689 -0.9888,-0.4588 2.8284,1.3125 0.7141,-0.0103 0.7575,-0.1656 -0.385,-0.3576 -0.7079,-0.1704 -0.5096,-0.1707 195.7865,-2.3974 1.173,118.2057 -0.871,0.912 1.134,-1.187 -0.263,0.275 0.295,29.689 m -17.714,-15.415 0.337,0.029 0.204,-0.121 -0.204,0.121 -0.337,-0.029 m 0.541,-0.092 -0.009,-0.434 -0.414,-0.541 -0.365,-0.666 -0.002,-0.318 0,0 0.002,0.318 0.365,0.666 0.414,0.541 0.009,0.434 m -0.379,-2.15 0.393,-0.227 0.269,-0.358 0.532,-0.178 -0.532,0.178 -0.269,0.358 -0.393,0.227 m 1.194,-0.763 0.787,-0.033 0.547,-0.098 -0.547,0.098 -0.787,0.033 m 5.705,-5.057 0.344,-0.459 0.32,-0.655 0.002,-0.401 -0.478,-0.655 -0.356,-0.637 0.356,0.637 0.478,0.655 -0.002,0.401 -0.32,0.655 -0.344,0.459 m -0.168,-2.807 0.094,-0.827 0.262,-0.012 -0.262,0.012 -0.094,0.827 m -103.211,-68.9043 0.652,0.1049 0.845,-0.0157 -0.845,0.0157 -0.652,-0.1049 m 1.497,0.0892 2.147,-0.594 2.034,-0.4317 -2.034,0.4317 -2.147,0.594 m 8.187,33.6071 0,0 -0.121,-0.408 0.121,0.408 m -0.121,-0.408 -0.693,0.081 0,0 0.693,-0.081 m 74.677,6.105 0.606,0.275 1.29,0.788 1.517,1.447 0.697,0.43 0.626,0.105 -0.626,-0.105 -0.697,-0.43 -1.517,-1.447 -1.29,-0.788 -0.606,-0.275 m 4.736,3.045 1.221,0.6 0.851,0.147 0.953,0.165 2.48,1.253 0.89,0.293 -0.89,-0.293 -2.48,-1.253 -0.953,-0.165 -0.851,-0.147 -1.221,-0.6 m 21.456,5.189 0.61,0.156 0.679,-0.005 0.323,0.135 -0.009,0.203 -0.238,0.621 -1.237,1.908 -0.101,0.396 -0.885,0.415 0.885,-0.415 0.101,-0.396 1.237,-1.908 0.238,-0.621 0.009,-0.203 -0.323,-0.135 -0.679,0.005 -0.61,-0.156 m -0.858,3.829 -0.123,0.24 0.197,0.414 -0.197,-0.414 0.123,-0.24 m -173.263,-93.0993 0,0 1.124,0.0235 -1.124,-0.0235 m 173.784,94.2503 0.457,0.044 1.34,-0.283 0.836,-0.392 0.425,-0.059 0.419,-0.112 -0.419,0.112 -0.425,0.059 -0.836,0.392 -1.34,0.283 -0.457,-0.044 m -17.28,28.096 0.056,-0.003 0,0 -0.056,0.003 m 1.837,0.602 0.261,0.028 0.459,-0.275 0.135,-0.129 -0.135,0.129 -0.459,0.275 -0.261,-0.028 m 1.039,-0.633 0.117,-0.281 0.069,-0.484 0.104,-0.121 -0.104,0.121 -0.069,0.484 -0.117,0.281 m 3.731,-4.151 0.484,-0.327 0.06,-0.278 -0.06,0.278 -0.484,0.327 m 0.68,-1.041 0.242,-0.716 0.231,-0.513 0.262,-0.327 -0.262,0.327 -0.231,0.513 -0.242,0.716 m 1.364,-2.792 0.086,-0.129 0,0 -0.086,0.129 m 4.758,-4.777 1.064,-0.025 0.534,-0.266 -0.534,0.266 -1.064,0.025 m 2.984,-0.305 0.873,0.26 0.337,-0.178 -0.337,0.178 -0.873,-0.26 m -101.667,-65.1305 0.098,0.1205 0.645,0.6335 1.008,0.3338 0.525,0.0811 -0.525,-0.0811 -1.008,-0.3338 -0.645,-0.6335 -0.098,-0.1205 m 4.847,1.4985 0.52,0.106 4.024,0.5897 2.025,0.1634 0.303,0.0051 -0.303,-0.0051 -2.025,-0.1634 -4.024,-0.5897 -0.52,-0.106 m 10.43,1.2762 -0.029,0.0831 0.029,-0.0831 0,0 m -1.348,1.0896 -0.167,0.0757 -0.427,0.2313 0.427,-0.2313 0.167,-0.0757 m -1.221,0.6594 -0.76,0.4973 -0.236,0.6194 0,0 0.236,-0.6194 0.76,-0.4973 m -0.522,1.6631 0.319,-0.1244 0,0 -0.319,0.1244 m 1.046,0.0515 0.325,0.1228 0.318,0.0707 -0.318,-0.0707 -0.325,-0.1228 m 1.311,0.4492 0.013,0.1037 -0.109,0.1471 0.109,-0.1471 -0.013,-0.1037 m -0.19,0.3769 -0.76,0.4874 -0.067,0.0538 0.067,-0.0538 0.76,-0.4874 0,0 m -1.505,1.3464 -0.006,0.0261 0,0 0.006,-0.0261 m 0.315,0.4189 0,0 1.012,-0.0666 0.047,0.0634 -0.047,-0.0634 -1.012,0.0666 m 0.669,1.5473 0,0 0.032,0.0499 -0.032,-0.0499 m -51.903,-0.937 0.069,0.2045 -0.069,-0.2045 0,0 m 19.079,-10.3396 0.91,0.0609 0.781,0.588 0.254,0.0664 -0.254,-0.0664 -0.781,-0.588 -0.91,-0.0609 m 4.454,0.7197 0.177,-0.1113 0.425,-0.6887 0.48,-0.5247 -0.48,0.5247 -0.425,0.6887 -0.177,0.1113 m 2.545,-2.0691 0.062,-0.0223 0,0 -0.062,0.0223 m 1.589,-0.0819 0.565,-0.0221 1.045,-0.1591 1.062,0.009 -1.062,-0.009 -1.045,0.1591 -0.565,0.0221 m 9.075,-0.8845 -0.396,0.3625 0,5e-4 0,-5e-4 0.396,-0.3625 0,0 m 2.167,34.6389 0.066,0.09 -0.066,-0.09 0.472,-0.51 -0.472,0.51 m 0.327,0.449 0,0 0.326,-0.041 -0.326,0.041 m 0.653,-0.081 0,0 0.254,-0.446 -0.254,0.446 m 74.336,4.079 -0.139,-0.01 0.139,0.01 0,0 m -0.015,0.067 -0.016,0.068 0.055,0.4 0.178,0.281 -0.178,-0.281 -0.055,-0.4 0.016,-0.068 m 12.052,6.638 0.656,0.39 0.085,0.445 -0.036,0.275 0.727,-0.175 -0.727,0.175 0.036,-0.275 -0.085,-0.445 -0.656,-0.39 m 2.056,0.179 -0.088,-0.14 0,0 0.088,0.14 m 1.261,-1.089 0.487,-0.265 0,0 -0.487,0.265 m 0.622,-0.469 0.136,-0.204 0,0 -0.136,0.204 m 0.237,-0.524 0,0 -0.222,-0.338 -0.206,-0.355 0.206,0.355 0.222,0.338 m -0.531,-0.87 0.149,-0.224 0.436,-0.157 -0.436,0.157 -0.149,0.224 0,0 m 1.763,-0.893 0.352,-0.023 0.257,0.256 0,0.266 0.229,0.449 0.368,0.173 -0.368,-0.173 -0.229,-0.449 0,-0.266 -0.257,-0.256 -0.352,0.023 m 2.079,1.526 0.124,0.058 0.99,0.269 0.776,0.54 1.059,0.962 0.161,0.476 0,0 -0.161,-0.476 -1.059,-0.962 -0.776,-0.54 -0.99,-0.269 -0.124,-0.058 m 3.288,2.385 0.775,0.347 0.885,0.478 0,0 -0.885,-0.478 -0.775,-0.347 m 1.651,0.883 -0.129,0.83 0,0 0.129,-0.83 m -32.573,2.848 0.196,-0.11 0.608,-0.453 0,0 -0.608,0.453 -0.196,0.11 m 0.913,-4.979 0.873,-0.1 0,0 -0.873,0.1 m 0.973,-1.541 0.268,-0.401 0.07,-0.148 -0.07,0.148 -0.268,0.401 m 2.104,-1.895 0.316,-0.195 0.494,-0.021 0.433,0.097 0.488,0.599 0.212,-0.031 -0.212,0.031 -0.488,-0.599 -0.433,-0.097 -0.494,0.021 -0.316,0.195 m 1.392,-1.719 -0.088,-0.142 0.109,-0.312 -0.109,0.312 0.088,0.142 m 0.589,-0.593 0.299,0.054 0.574,0.164 0.362,-0.111 0.47,-0.07 -0.47,0.07 -0.362,0.111 -0.574,-0.164 -0.299,-0.054 m -103.846,-44.2113 0.241,0.0193 0,0 -0.241,-0.0193 m 0.793,-0.1935 0.163,-0.0631 0,0 -0.163,0.0631 m 0.406,-0.2415 0.131,-0.0959 0.167,0.043 -0.167,-0.043 -0.131,0.0959 m 3.061,0.9172 0.23,0.1166 0.286,0.2716 0.159,0.2277 -0.076,0.3359 0.076,-0.3359 -0.159,-0.2277 -0.286,-0.2716 -0.23,-0.1166 m 0.587,1.0055 0,0 0.14,0.0637 -0.14,-0.0637 m 0.725,0.1859 0.3,0.0256 0.459,0.1201 -0.115,0.3655 0.115,-0.3655 -0.459,-0.1201 -0.3,-0.0256 m 0.596,0.6839 -0.028,0.3994 0.225,-0.0208 -0.225,0.0208 0.028,-0.3994 m 1.819,-0.3659 0.215,-0.2015 0.152,-0.2218 -0.152,0.2218 -0.215,0.2015 m 3.105,-2.1989 0.318,-0.0098 0.919,0.2559 1.457,0.0433 0,0 -1.457,-0.0433 -0.919,-0.2559 -0.318,0.0098 m 2.678,0.4136 -0.012,0.0911 0.259,0.336 0.323,0.2429 -0.323,-0.2429 -0.259,-0.336 0.012,-0.0911 m 1.21,1.2283 0,0 0.179,0.0147 -0.179,-0.0147 m 1.857,-0.1596 0.474,-0.1401 0.127,0.0712 -0.127,-0.0712 -0.474,0.1401 m 1.206,-0.0778 0.45,-0.059 0.326,-0.1512 -0.326,0.1512 -0.45,0.059 m 1.399,-0.5998 0.104,-0.149 0.389,-0.0957 -0.389,0.0957 -0.104,0.149 m 2.78,-1.0011 0.912,-0.2153 4.503,-0.3461 -4.503,0.3461 -0.912,0.2153 m 6.258,-0.8405 0.05,-0.0755 0,0 -0.05,0.0755 m -0.027,-0.7663 0.071,-0.0524 -0.071,0.0524 0,0 m 0.138,-0.1017 0.439,0.1153 -0.439,-0.1153 0,0 m 0.963,0.2193 0.742,0.1139 0.593,0.1804 -0.593,-0.1804 -0.742,-0.1139 m 1.655,0.4248 0.414,0.2529 0.483,0.0129 0,0 -0.483,-0.0129 -0.414,-0.2529 m 1.063,0.2164 0.584,-0.174 1.015,-0.1444 0.948,0.3316 0.134,0.1745 -0.134,-0.1745 -0.948,-0.3316 -1.015,0.1444 -0.584,0.174 m 2.72,0.4847 -0.065,0.0711 0.019,0.2911 0.052,0.0436 -0.052,-0.0436 -0.019,-0.2911 0.065,-0.0711 m 0.554,0.7629 0.464,0.2388 0.988,0.3408 0.513,-0.0265 0.001,-9e-4 -0.001,9e-4 -0.513,0.0265 -0.988,-0.3408 -0.464,-0.2388 m 1.29,-2.0314 -0.28,-0.0167 -0.338,-0.1001 0,0 0.338,0.1001 0.28,0.0167 m -0.711,-2.6341 -0.436,-0.396 -0.996,-1.0101 0,0 0.996,1.0101 0.436,0.396 m 3.612,-3.9094 1.192,-0.3251 0.574,-0.3338 0,0 -0.574,0.3338 -1.192,0.3251 m 1.802,-0.6928 0.349,-0.3291 0,0 -0.349,0.3291 m 0.614,-1.2237 0.294,-0.9936 0.131,-0.0806 0.02,-0.0132 -0.02,0.0132 -0.131,0.0806 -0.294,0.9936 m 0.591,-1.1851 2.089,0.6514 0.094,-0.0538 -0.094,0.0538 -2.089,-0.6514 0,0 m 2.733,0.3612 0.577,-0.4234 0.149,-0.3792 -0.005,-0.2315 0.005,0.2315 -0.149,0.3792 -0.577,0.4234 m 0.77,-2.182 0.001,-0.0148 0.053,-0.0862 -0.053,0.0862 -0.001,0.0148 m 10.217,-32.304 0.009,0.0233 -0.009,-0.0233 0,0 m -0.155,1.2941 0,0 0.06,0.0912 -0.06,-0.0912 m 0.153,0.2331 0,0 2.008,0.6709 0.056,0.0529 -0.056,-0.0529 -2.008,-0.6709 m 3.046,2.6353 0.188,0.369 0,0 -0.188,-0.369 m -1.49,3.8415 -0.564,0.7501 -0.029,0.0735 0.029,-0.0735 0.564,-0.7501"},{"id":"63","nom":"Sicile","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"0","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"7","clSc09":"0","clSc10":"0","clSc11":"0","clSc12":"0","clSc13":"0","clSc14":"0","clSc15":"0","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"0","clSc24":"0","clSc25":"0","clSc26":"0","clSc27":"0","clSc28":"0","chemin":"m 225.635,173.433 -0.75,1.259 -0.368,0.485 -2.672,3.081 -0.306,0.712 -0.189,0.774 -0.277,0.678 -0.374,0.639 -0.35,0.812 0.069,0.921 0.125,0.451 0.321,0.296 0.528,0.279 0.406,0.427 -0.622,0.389 0.686,0.781 0.583,0.463 0.078,0.463 -0.013,0.464 -1.212,0.869 -0.474,0.479 -0.294,0.58 -0.128,0.598 0.134,0.541 -0.042,0.539 0.012,-0.154 -1.512,0.013 0.28,0.074 -1.25,-0.329 -1.259,0.146 -1.791,-0.623 -0.653,-0.113 -0.594,-0.242 -1.491,-1.93 -1.198,-0.816 -1.287,-0.634 -1.315,-0.038 -1.316,0.072 -1.163,-0.391 -2.365,-1.31 -2.506,-1.048 -1.063,-0.683 -0.486,-0.459 -0.567,-0.305 -1.436,-0.301 -1.288,-0.709 -0.586,-0.052 -1.262,0.086 -0.646,-0.049 -0.651,-0.249 -1.257,-0.833 -0.802,-1.155 -0.209,-0.51 0.568,-1.318 0.674,-1.265 0.598,-0.355 0.695,-0.255 0.421,-0.374 0.355,-0.458 1.289,1.322 0.576,0.32 0.585,-0.072 1.036,-0.474 0.087,-0.518 1.142,-0.659 1.454,-0.012 0.67,0.121 0.353,0.595 0.554,0.183 0.641,0.079 2.107,1.135 0.591,0.185 0.599,0.031 1.637,-0.476 1.256,-0.181 2.634,0.262 1.424,-0.285 0.994,-0.032 1.449,-0.438 1.113,-0.729 0.581,-0.179 0.623,-0.052 1.508,0.045 1.516,0.165 0.635,-0.17 0.531,-0.476 0.616,-0.214 0.677,0.144 1.751,-0.815 0.771,-0.055 0.735,0.313 -0.644,0.524"},{"id":"64","nom":"Espagne","clSc01":"0","clSc02":"0","clSc03":"0","clSc04":"0","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"9","clSc09":"0","clSc10":"0","clSc11":"0","clSc12":"0","clSc13":"0","clSc14":"0","clSc15":"0","clSc16":"0","clSc17":"0","clSc18":"0","clSc19":"0","clSc20":"0","clSc21":"0","clSc22":"0","clSc23":"0","clSc24":"0","clSc25":"0","clSc26":"0","clSc27":"0","clSc28":"0","chemin":"m -5.84978,114.345 2.33176,0.569 6.45102,0.954 2.3296,0.011 3.29585,-0.536 1.39581,-0.402 1.27784,0.239 1.8768,-0.461 0.8975,0.093 1.1719,0.658 4.1246,0.887 1.0848,-0.754 0.805,-0.164 2.9691,0.462 2.9912,0.939 1.556,0.068 2.2755,-0.257 1.8037,-0.618 0.382,-0.072 0.0146,0.386 0.4371,0.53 0.448,0.196 0.9494,0.272 0.7277,0.036 0.9944,0.128 0.6762,0.305 0.0374,0.476 -0.1694,0.532 -0.4079,0.489 -0.2332,0.375 0.2175,0.215 0.3555,0.166 0.3846,0.046 0.2608,-0.055 0.1969,-0.296 0.3755,-0.362 0.2083,-0.044 -0.0168,0.205 0.1785,0.253 1.2189,0.426 2.677,0.794 1.0484,0.014 0.8483,0.094 0.2489,0.335 1.7037,1.225 0.4057,-0.034 0.7607,0.03 0.9165,-0.097 0.6632,-0.23 0.435,0.039 0.4793,0.237 0.5622,0.206 0.7233,0.403 0.6487,0.5 0.4468,0.163 2.6872,-0.335 0.5995,0.293 0.6362,-0.004 0.7131,-0.076 1.5559,0.153 1.2627,-0.036 0.1147,-0.123 0.1082,-1.105 0.2002,-0.392 0.2997,-0.103 0.7488,0.078 2.7213,0.655 1.1199,0.409 1.0766,0.32 0.9413,0.035 0.6222,0.214 0.8743,1.05 -0.0438,0.154 0.0438,-0.154 0.0653,-0.055 0.2734,-0.231 0.2003,-0.099 0.2703,-0.134 0.7401,0.085 0.994,0.215 0.5761,0.124 0.1172,0.113 0.2106,0.203 0.0087,0.213 -0.2911,0.344 -0.0292,0.083 -0.0584,0.165 1.7031,0.512 0.7552,0.341 0.2608,0.371 0.3884,0.38 0.5118,0.055 0.7272,-0.36 1.1307,-0.387 1.9281,0.34 2.1446,0.493 0.9273,0.059 0.0346,-0.24 0.1688,-0.342 0.3528,-0.172 0.5269,-0.05 0.7336,-0.18 0.8397,-0.297 0.871,-0.124 0.9154,0.222 1.1026,0.18 0.6568,-0.002 0.3148,0.701 0.5324,0.268 0.2088,0.607 -0.976,0.317 -0.5789,0.042 -0.1774,1.042 0.2748,0.294 0.5475,0.275 0.1494,0.32 0.1103,1.529 -1.121,0.922 -1.5732,1.037 -7.6889,3.334 -1.8318,1.615 -0.698,0.37 -5.7174,1.017 -3.997,1.086 -1.9162,0.394 -2.3935,1.888 -1.1328,0.762 0.9024,0.211 1.0528,0.902 -0.3538,0.401 -1.5354,0.618 -0.6709,0.19 -0.3646,-0.099 -0.3441,0.086 -2.5752,3.273 -2.2744,2.354 -1.2779,1.026 -1.3098,1.53 -2.7905,3.945 -0.0217,1.139 1.3742,3.928 0.7882,1.031 1.1042,0.867 2.0943,0.738 0.5172,0.725 -0.7228,0.692 -2.0948,1.231 -3.6399,1.662 -1.5462,1.312 -0.3311,1.264 -1.0647,0.568 -0.4036,1.771 -0.6465,1.174 -0.1239,0.397 -0.686,0.89 -0.0936,0.646 1.1247,0.893 -0.5572,0.386 -0.5572,0.171 -1.2844,0.105 -4.3151,0.113 -3.4728,1.929 -1.7355,1.708 -1.5701,3.18 -1.9081,1.875 -0.844,0.345 -1.306,-0.824 -1.6317,-0.125 -1.583,0.273 -0.8299,0.653 -1.2957,0.364 -1.2665,-0.315 -2.7402,-0.17 -1.2184,0.03 -1.9071,0.53 -1.6349,-0.354 -2.7586,-0.179 -5.9728,0.42 -0.75363,0.198 -0.74659,0.788 -1.40684,1.004 -4.78297,0.04 -2.52489,-77.689 -0.29856,-0.073 m 74.72258,12.076 -0.0013,0.022 0,0 0.0013,-0.022 m 0.4796,0.306 0.1629,0.013 0.3488,-0.052 -0.3488,0.052 -0.1629,-0.013 m 0.9641,-0.14 0.309,-0.085 0.7219,-0.319 -0.7219,0.319 -0.309,0.085"},{"id":"65","nom":"Lac Neuchatel","clSc01":"0","clSc02":"1","clSc03":"1","clSc04":"1","clSc05":"0","clSc08":"0","clSc06":"0","clSc07":"0","clSc09":"0","clSc10":"1","clSc11":"1","clSc12":"1","clSc13":"1","clSc14":"1","clSc15":"1","clSc16":"1","clSc17":"1","clSc18":"1","clSc19":"1","clSc20":"0","clSc21":"0","clSc22":"1","clSc23":"1","clSc24":"1","clSc25":"1","clSc26":"0","clSc27":"1","clSc28":"1","chemin":"m 126.9411,78.284983 0.003,-0.0047 0.004,-0.0089 0.0107,-0.0075 0.0145,-0.0031 0.004,-0.01604 -5.8e-4,-0.0086 0.006,-0.0032 0.005,-0.0015 0.006,-0.008 0.0225,-0.0023 0.0129,-0.0075 0.0156,-9.33e-4 0.0124,-0.0045 0.01,-0.01 0.008,-0.0051 0.0268,-0.01239 0.023,-0.01239 0.0139,-0.0023 0.009,-0.0044 0.0151,-0.0029 0.008,-0.0047 0.0273,-0.01562 0.0198,-0.0071 0.0124,-0.01078 0.005,-0.01121 0.0102,-0.01298 0.0493,-0.03756 0.007,-0.0092 0.004,-0.01304 0.0118,-0.008 0.0107,-0.0038 0.006,-0.0076 0.0102,-0.0033 0.006,-0.0026 0.007,-0.0013 0.004,0.0023 0.004,8.75e-4 0.002,-0.0012 0.006,-0.0034 0.0102,-0.0082 0,-0.0023 0.0204,-0.01046 0.0107,-0.0023 0.009,-0.0042 0.0118,-0.0029 0.005,-0.0022 0.0107,5.3e-4 0.009,-0.0033 0.006,0.0013 0.0231,-0.003 0.0182,-0.01003 0.0129,-0.0076 0.008,-0.0091 0.004,-0.01159 0.006,-0.0073 0.0151,-0.0037 0.0338,-0.0081 0.006,-0.0067 0.001,-0.0071 0.004,-0.0069 0.006,-0.0057 0.0145,-0.0024 0.0118,-0.0051 0.0456,-0.01379 0.0236,-0.01234 0.008,-0.0068 0.01,-0.005 0.0118,-0.0035 0.0113,-0.0084 0.009,-0.0029 0.002,-0.0043 0.009,-0.01095 0.008,-0.0097 -5.8e-4,-0.02028 -5.8e-4,-0.006 -5.9e-4,-8.75e-4 5.9e-4,-0.0022 0.001,-0.0026 5.9e-4,-0.0022 0.002,-0.0032 0.002,-0.0023 0.002,-0.002 0.004,-0.0028 0.004,-0.005 0.002,-0.0054 0.001,-0.0019 5.8e-4,-0.0017 -5.8e-4,-0.0022 0.002,-0.0026 0.003,-0.01052 0.001,-7e-4 0,-8.75e-4 -5.8e-4,-6.41e-4 -5.8e-4,-7.59e-4 5.8e-4,-0.0017 5.8e-4,-8.75e-4 5.9e-4,-0.0015 5.8e-4,-0.0039 0.003,-0.0048 0.004,-0.0052 5.8e-4,-0.0013 -5.8e-4,-0.0014 0.004,-6.41e-4 0.002,6.41e-4 0.001,-0.0012 5.9e-4,5.4e-5 10e-4,-4.24e-4 0.002,-0.0022 0.0118,-0.0079 0.003,-0.0022 0.001,-0.0019 0.005,-0.0026 5.8e-4,-0.0022 0.004,-0.0016 0.005,-0.0044 0.0145,-0.01427 0.004,-0.0073 -0.001,-0.0089 0.004,-0.0086 0.0113,-0.01277 0.0188,-0.02366 0.0124,-0.03102 0.0209,-0.0155 0.0124,-0.01067 0.007,-0.01234 0.0129,-0.0018 0.009,-0.0075 0.008,-0.0057 -0.004,-0.0057 0.008,-0.0036 0.003,0.0012 0.0107,-7e-4 0.001,0.0016 5.8e-4,2.73e-4 0.009,-0.0031 0.006,0.0012 0.002,0.0013 -5.8e-4,0.0038 0,0.0019 0.005,0.0057 0.004,5.4e-5 0.005,-0.0034 0.002,-0.0097 0.002,-0.0015 0.003,-7.59e-4 0,-5.3e-4 -0.003,7.58e-4 -0.002,0.0016 -0.002,0.0098 -0.004,0.0025 -0.002,4.85e-4 -0.001,-5.3e-5 -0.002,-8.17e-4 -0.004,-0.0044 0,-6.42e-4 0.001,-0.0047 5.8e-4,-0.0053 -0.001,-1.07e-4 -0.001,0.0014 -0.002,5.83e-4 -0.004,-2.12e-4 -5.8e-4,-2.12e-4 -0.002,-0.0023 0.008,-0.0034 0.003,0.0029 5.8e-4,5.83e-4 5.8e-4,0 0,-0.0027 0.001,-0.0024 0.001,2.73e-4 0,-2.12e-4 4.5e-4,-3.18e-4 5.8e-4,2.12e-4 0.01,-0.0036 10e-4,5.3e-5 5.8e-4,2.73e-4 0.004,0.0047 0,5.3e-4 0,4.85e-4 -0.005,0.0019 5.9e-4,7e-4 0.006,-0.0025 0.004,3.18e-4 0.002,-2.73e-4 0,-5.83e-4 5.9e-4,-1.67e-4 5.8e-4,-2.72e-4 0.002,-6.42e-4 0.002,-8.75e-4 -0.001,-8.17e-4 -0.001,-7.58e-4 -0.001,-0.0011 5.8e-4,-9.92e-4 5.8e-4,-9.91e-4 0.002,-7.59e-4 5.9e-4,0.0011 5.8e-4,-5.3e-5 0.001,4.24e-4 0.002,0.0024 0.002,2.73e-4 0.002,-7e-4 0.001,8.75e-4 4.6e-4,-2.12e-4 -10e-4,-0.0012 5.9e-4,-3.18e-4 0.001,0.0011 0.002,-4.85e-4 0.002,0.0023 0,0.0018 -0.001,0.0011 0.002,1.67e-4 0,-0.0015 0.003,-0.0012 0.001,-0.002 5.9e-4,-0.003 0.001,-0.0026 0.004,-9.92e-4 0.004,-0.0034 0.01,-0.0034 0.0183,-0.02227 0.004,-0.0084 -0.003,-0.002 0.005,-0.0087 0.003,-0.0047 0,-0.0025 5.8e-4,-1.66e-4 0.001,-2.73e-4 0.003,-0.0027 -0.002,-0.0012 0.003,-0.0015 0.003,0.002 0,-0.0043 0.004,-5.4e-5 0.001,7.58e-4 0.004,-0.0019 -0.001,-0.0013 0.001,-5.3e-4 0.002,0.0011 0.004,-0.0026 0.006,-0.0019 -0.002,-0.0022 10e-4,-5.83e-4 0.003,0.0024 0,-9.91e-4 0.003,-0.0037 0.005,-3.18e-4 0.003,-0.0025 0.001,-1.67e-4 -5.8e-4,-0.0029 0.003,-5.3e-4 0.003,-0.0031 -5.8e-4,-3.78e-4 0.001,-0.0026 0.003,-0.0022 0.004,-9.33e-4 0.003,-5.4e-5 0.003,0.0019 0,-1.67e-4 0.005,-0.0049 5.8e-4,-0.0021 -5.8e-4,-0.0011 -0.001,-0.0014 0.001,-0.0022 0,-5.3e-4 -0.002,-0.0014 0,-3.78e-4 0.003,9.91e-4 10e-4,0 5.8e-4,-8.16e-4 -5.8e-4,-0.0019 -5.9e-4,-7.58e-4 0.001,-0.0027 5.8e-4,-1.07e-4 0.003,10e-4 5.8e-4,-5.3e-4 -0.002,-9.92e-4 0,-0.0025 0.004,-0.005 -0.001,-0.0014 5.9e-4,-0.0027 0.002,-0.0014 0.001,-0.0013 0.002,7e-4 5.9e-4,-0.0016 0.004,-0.0038 0.002,-0.0019 0.004,-0.0029 0.0113,-5.3e-4 0.004,-0.0023 0.01,-0.005 0.005,-0.0039 0.008,-0.0036 0.004,-1.07e-4 0.006,-0.0028 0.007,-0.0043 0.004,-0.003 5.8e-4,-0.0015 0.005,-0.0039 0.009,-0.0079 0.001,-0.0019 0.002,-5.31e-4 5.8e-4,-0.0012 0.002,-0.002 0.002,-0.002 0.001,0 5.8e-4,-0.002 0.004,-0.0032 0.002,-0.0013 0.002,-5.4e-5 0.001,-0.0017 0.002,-4.85e-4 0.008,-0.0044 5.8e-4,3.18e-4 0.0129,-0.0095 0.003,-0.0033 0.004,-0.0022 0.004,-0.0045 0.037,-0.03745 0.007,-0.0085 0.009,-0.011 0.005,-0.004 0.003,-0.0018 0.005,-0.0031 0.008,-0.0033 0.0139,-0.0054 0.001,5.83e-4 10e-4,-5.29e-4 0.006,-2.73e-4 0.008,-0.0032 0.0107,-5.3e-5 0.005,-0.0023 0.009,-0.0047 0.002,-1.07e-4 0.0113,0.0025 0.007,-0.0017 0.008,-0.0021 5.8e-4,-0.0026 0.006,-0.01122 0.0161,-0.01073 0.005,0.0012 0.007,-0.0041 5.8e-4,-0.0051 0.002,-0.0016 0.001,-8.75e-4 0.002,-3.18e-4 0.002,-0.0049 0.0166,-0.01121 -0.001,-8.75e-4 0.002,-0.0014 0.001,-1.66e-4 0.008,-0.0057 0.007,-10e-4 0.002,-0.0017 0,-2.12e-4 0.003,-6.42e-4 0.002,4.85e-4 0.002,0.0015 0.004,0.0086 5.9e-4,1.66e-4 4.5e-4,-2.12e-4 0.002,0.0013 0.001,0.0011 0.002,9.91e-4 0.002,4.24e-4 0.001,1.08e-4 0.002,1.66e-4 5.8e-4,0.0018 5.8e-4,5.31e-4 5.9e-4,-4.24e-4 -0.001,-0.002 5.8e-4,0 0,-2.12e-4 -0.001,0 -0.002,-1.66e-4 -0.001,-1.67e-4 -0.002,-4.24e-4 -0.002,-9.33e-4 -0.002,-10e-4 -10e-4,-0.0012 -5.9e-4,-4.85e-4 -0.003,-0.0065 0.003,-0.0011 0.005,-0.0015 0.003,-0.0012 5.9e-4,-1.07e-4 0.008,0.01315 -0.001,7e-4 -0.001,4.24e-4 0,-4.24e-4 -5.8e-4,1.08e-4 5.8e-4,6.41e-4 0.001,7e-4 5.8e-4,-2.72e-4 0,-8.17e-4 10e-4,-9.91e-4 0.002,3.17e-4 0,-2.12e-4 -0.001,-3.18e-4 -0.005,-0.0094 -0.002,-0.0057 0.005,-0.0017 0.004,-0.0021 0.0113,-0.003 0.004,3.18e-4 0.0112,-0.0012 4.6e-4,-7.58e-4 0.004,-5.84e-4 0.002,7.59e-4 0.004,-0.0016 0.004,0 0.003,6.41e-4 5.9e-4,-8.75e-4 -0.002,-0.0016 5.9e-4,-0.0012 0.006,-0.0037 -0.001,-8.75e-4 0.003,-0.0017 0.001,2.11e-4 0.008,-8.75e-4 0.004,-0.0019 0.003,-5.4e-5 0.003,-0.0011 0,-0.0013 0.005,-0.0041 0.002,-9.92e-4 0.0198,-0.01014 0.0252,-7.58e-4 0.002,5.3e-5 0.0145,0.0034 0.0124,0.0036 0.0118,0.003 0.01,0.0045 0.01,-0.0103 0.001,-0.0038 0.004,-0.0052 0.002,-0.0091 0,-0.0032 0.002,-0.0023 0.003,-0.0083 -0.002,-0.0018 0.004,-0.0183 0.008,-0.02404 0.0215,-0.02103 0.029,-0.02039 0.029,-0.0198 0.004,-0.0025 5.8e-4,-0.0015 0.006,-0.003 0.005,-0.0026 0.002,-1.67e-4 0.004,0.0065 0.0171,-0.0024 0.005,-0.0021 5.9e-4,-0.0021 -0.002,-0.0011 -0.001,-9.92e-4 0,-0.0011 0.001,-0.0013 0.002,-5.83e-4 0.002,-1.07e-4 10e-4,3.78e-4 0,0.0015 0.001,0.0017 0.002,5.3e-4 -5.8e-4,8.16e-4 0.004,7e-4 0.003,9.92e-4 0.002,9.92e-4 0.002,7e-4 5.8e-4,0.0011 -0.002,0.0021 -5.8e-4,8.75e-4 0.001,0.0019 0.004,8.75e-4 0.005,5.3e-5 -0.004,-0.0034 -5.8e-4,-0.0041 0,-0.0035 0.001,-0.0034 0.005,-8.16e-4 0.005,-5.84e-4 0.003,4.24e-4 0.009,0.0071 0,0.0014 10e-4,2.11e-4 0.002,-5.3e-4 -5.9e-4,-0.0013 -0.002,-3.79e-4 -0.008,-0.0072 0.003,-0.0019 0.0124,-0.0067 -0.002,-0.0021 10e-4,-0.0011 0.005,-5.29e-4 0.005,0.0031 0.004,6.42e-4 0.0107,-0.0016 10e-4,-0.0029 0.008,-0.0026 0.006,-5.4e-5 0.0113,8.17e-4 0.006,0.0011 0.002,-7.58e-4 0.003,-2.73e-4 0.004,-0.0018 0.003,-4.84e-4 0,-0.0033 0.004,-0.0034 0,-0.0012 0.0134,-0.0039 0.022,-0.0094 0.009,-0.0043 -0.004,-0.0034 0.003,-0.0012 0.004,0.0038 0.0107,-0.0055 0.005,-0.0012 0.002,4.85e-4 0.003,-0.0015 0.002,-0.0026 0.002,-0.0012 0.003,-9.34e-4 0.003,-2.11e-4 0.003,-0.0013 0.006,-6.99e-4 0.005,-0.0019 0.0107,-0.0024 -5.9e-4,-0.0013 0.002,-3.78e-4 0.007,5.83e-4 0.009,-4.24e-4 0,-0.0032 0,-0.0031 0,-0.0028 -0.001,-0.0064 0.002,-0.002 -0.001,-0.0032 -0.003,-0.0046 -0.002,-0.0041 0,-0.0055 10e-4,-0.0044 -10e-4,-2.12e-4 0.002,-0.003 5.8e-4,-2.13e-4 0.001,-0.0029 -5.9e-4,-1.67e-4 5.9e-4,-0.0012 0.002,-1.08e-4 -0.002,-0.0072 0,-0.0024 0.002,-5.3e-4 0,-0.0033 0.001,-0.0029 5.8e-4,-0.0027 0.004,-0.0077 0.002,-0.0024 0.004,-0.0038 -5.8e-4,-7.58e-4 -0.002,-1.08e-4 0,-0.0024 -5.9e-4,-2.12e-4 0,-4.85e-4 0.001,-1.66e-4 0,-0.0015 -5.8e-4,-2.12e-4 5.8e-4,-0.0011 0.001,-8.17e-4 0.004,-0.002 5.8e-4,-0.003 0.002,-0.003 0.004,-0.0053 5.8e-4,-0.005 0.002,-0.0029 0.007,-0.0034 0.002,3.79e-4 0,-5.3e-4 -0.002,-8.17e-4 0,-8.16e-4 0.004,0.0012 0,7.59e-4 5.9e-4,2.12e-4 0,-0.0013 -0.001,-7.58e-4 -5.8e-4,-0.0026 0,-0.0036 5.8e-4,-0.0035 5.8e-4,-4.85e-4 0.002,-0.0026 0.002,-4.24e-4 0,-0.0047 4.5e-4,-0.0047 0.002,-0.0029 0,-0.0031 -0.003,-0.0024 0,-0.0037 0.001,-0.0016 10e-4,-2.11e-4 5.9e-4,5.29e-4 0.002,-6.41e-4 -5.9e-4,-0.0011 5.9e-4,-0.0013 -5.9e-4,-0.0043 -0.002,-0.0074 -0.002,-0.0095 -5.8e-4,-0.0016 -0.001,-0.0035 -0.004,-0.0086 -0.003,-0.0077 -0.001,-0.0053 -5.9e-4,-0.0047 5.9e-4,-6.41e-4 0.001,-1.08e-4 0,-5.3e-4 0,-0.0013 5.9e-4,-4.24e-4 0.001,-0.0018 -0.003,-0.0018 0.004,-0.0027 0,1.66e-4 10e-4,0.0013 0,0.0019 0.001,8.75e-4 0,-5.4e-5 0.002,-0.0054 0.003,-0.01342 0.001,-2.12e-4 -5.9e-4,-3.18e-4 -0.001,-0.0024 0.001,-0.0013 5.9e-4,-9.91e-4 0.001,-2.12e-4 5.9e-4,-7.58e-4 0,-0.0022 -5.9e-4,-1.67e-4 -5.8e-4,2.13e-4 5.8e-4,7e-4 -5.8e-4,10e-4 0,4.84e-4 -0.004,1.08e-4 0,-0.0017 0.002,5.4e-5 0.001,-0.0012 -0.002,-0.0037 -0.003,-0.0043 -0.002,-0.0012 -0.002,-0.0017 -0.001,-3.79e-4 -10e-4,-0.0011 -0.001,-7e-4 -0.002,-0.0065 -5.8e-4,-0.0013 5.8e-4,-9.34e-4 0.002,-5.3e-5 -5.8e-4,-4.85e-4 -5.9e-4,-0.0016 0,-8.17e-4 0.003,-1.66e-4 0,-2.12e-4 -0.001,-1.67e-4 0,-0.0013 0,-6.41e-4 4.6e-4,-4.24e-4 0.001,6.41e-4 0,-4.24e-4 0,-5.3e-4 -0.001,-0.001 0.002,1.66e-4 5.8e-4,-2.11e-4 0,-0.0011 -5.8e-4,-0.0012 0.002,-0.0012 5.8e-4,-7.58e-4 0.001,-1.07e-4 5.8e-4,-2.73e-4 -5.8e-4,-4.85e-4 -5.8e-4,-4.24e-4 -5.9e-4,-0.0012 5.9e-4,-6.42e-4 5.8e-4,-0.0012 0.001,-1.67e-4 5.8e-4,-3.18e-4 0,-4.85e-4 -5.8e-4,-3.78e-4 -5.9e-4,-0.0013 0.001,-1.07e-4 0.001,-0.0011 0.001,-4.24e-4 0,-4.85e-4 -5.8e-4,-2.12e-4 -5.8e-4,-8.16e-4 0,-0.0015 0.001,-0.001 -5.8e-4,-7e-4 5.8e-4,-0.0015 0,-6.42e-4 -5.8e-4,-0.0022 -0.007,-0.0065 0.004,-0.0019 0.003,-0.0016 0.0124,-0.004 0.005,0.0068 0.002,-4.25e-4 -0.005,-0.0069 0.006,-0.0017 4.5e-4,0.0014 0.002,-5.3e-4 -0.006,-0.0092 -0.001,4.85e-4 -5.9e-4,-3.18e-4 0.002,-5.84e-4 0.004,-0.0016 5.9e-4,0 0.007,-0.0028 0.005,-0.0018 0.003,-0.0011 0.0134,-0.0043 0.007,-0.0019 5.8e-4,0 5.9e-4,1.07e-4 5.8e-4,2.12e-4 0.001,6.42e-4 0.004,0.0029 0.002,0.0023 0,8.16e-4 0,0.0013 -0.002,0.0011 -0.008,0.0043 -0.008,0.0037 -0.004,0.0019 -0.005,0.0022 -0.005,0.0023 -0.01,0.0036 0,4.25e-4 0,4.84e-4 5.8e-4,2.73e-4 5.8e-4,5.4e-5 0.009,-0.003 0.0118,-0.0051 0.0107,-0.0051 0.008,-0.0047 0,-1.66e-4 -5.8e-4,-5.83e-4 5.8e-4,-2.12e-4 4.6e-4,4.24e-4 0.001,-5.3e-5 0.002,-8.17e-4 0.003,-0.0019 0.004,-0.0038 0.004,-0.0089 0.002,-0.0043 0,-7e-4 5.9e-4,-1.07e-4 0.005,0.0022 0.001,5.31e-4 0.003,-2.12e-4 0.002,-0.0016 0.007,-0.0052 0.005,-0.0036 0.004,-0.0011 0.002,-5.3e-4 0.001,-3.79e-4 0,-7.58e-4 0,-7.59e-4 -0.001,-4.84e-4 -0.009,-0.0038 -0.003,-0.0016 4.5e-4,-0.002 5.9e-4,-0.0017 0.002,5.3e-4 0,-4.84e-4 -5.9e-4,-5.84e-4 0,-5.3e-4 5.9e-4,-4.24e-4 0.001,4.24e-4 0,-3.18e-4 -5.8e-4,-4.85e-4 5.8e-4,-2.11e-4 0.001,5.83e-4 5.8e-4,-4.84e-4 0.001,4.84e-4 5.8e-4,-5.4e-5 -10e-4,-9.33e-4 0.002,-0.0012 5.8e-4,-8.75e-4 0.001,-5.3e-5 0.002,9.33e-4 0,-4.24e-4 -0.001,-0.001 0.002,-0.0013 0,-7e-4 5.8e-4,-4.24e-4 5.9e-4,3.18e-4 0.002,0.0011 5.8e-4,-5.84e-4 -0.002,-0.0012 10e-4,-5.84e-4 4.5e-4,5.4e-5 0,-7.58e-4 0.001,-3.19e-4 0.001,4.85e-4 0.001,7.58e-4 5.8e-4,-2.12e-4 -5.8e-4,-8.17e-4 0.002,-9.91e-4 5.8e-4,-2.12e-4 0.002,0 0.001,0.0014 5.8e-4,-2.12e-4 -5.8e-4,-0.0012 10e-4,-7.58e-4 5.8e-4,0 5.8e-4,4.84e-4 5.9e-4,-2.72e-4 -0.001,-9.92e-4 0.001,-4.84e-4 5.8e-4,4.24e-4 0.001,0 5.8e-4,-6.42e-4 0,2.72e-4 0.001,-1.07e-4 0,-9.91e-4 5.8e-4,-3.79e-4 0.004,-6.42e-4 0.004,0 5.9e-4,4.24e-4 0.001,6.42e-4 0.002,0.0013 10e-4,2.13e-4 0.002,-5.4e-5 0.002,-6.42e-4 0.004,-0.0015 0.005,-0.0018 0.003,-0.0013 0.004,-0.0023 0.002,5.83e-4 0.001,-0.0019 0.008,-0.0016 0.0107,0.0026 0.009,-0.0022 0.009,-0.0029 0.007,-0.0024 0.0118,-0.0028 0.004,-8.16e-4 0.004,0.0085 0.0145,-0.004 0.006,-0.0017 0.004,3.18e-4 0.0542,-0.01105 0,-0.0039 10e-4,-9.34e-4 0,-0.0051 4.6e-4,-7.59e-4 0.001,-4.24e-4 0.0102,-0.0017 0.004,-8.16e-4 0,-2.73e-4 0.008,-0.0015 0.002,5.4e-5 0.008,-0.0012 0.003,3.18e-4 5.8e-4,-5.3e-5 0,-4.85e-4 0,-2.12e-4 -5.8e-4,0 -0.003,-4.85e-4 -0.005,8.75e-4 -5.9e-4,-9.91e-4 0,0 0,-9.92e-4 -5.8e-4,0 0,-3.79e-4 5.8e-4,-8.75e-4 0.001,-7.58e-4 0.001,-5.31e-4 5.8e-4,-2.72e-4 0.001,-2.12e-4 0.002,-1.07e-4 0.004,0 0.002,4.24e-4 10e-4,0.0011 4.5e-4,0.0013 -0.003,4.85e-4 0,-1.08e-4 -5.8e-4,2.12e-4 5.8e-4,4.85e-4 0.004,-5.3e-4 5.9e-4,4.84e-4 5.8e-4,8.17e-4 5.8e-4,0.0011 0,10e-4 0,9.33e-4 0,9.92e-4 5.9e-4,0.0014 0,0.001 0,1.07e-4 5.8e-4,5.4e-5 5.8e-4,-0.0013 0.002,-8.17e-4 0.002,-0.0015 0.005,-0.0014 0.006,-8.75e-4 0.01,-7.58e-4 0.0124,-0.0018 0.006,-0.0015 0.005,-0.002 0.005,-0.0018 0.007,-0.0035 0.008,-0.004 0.004,-0.0028 0.008,-0.0063 0.0177,-0.01476 0.002,-8.75e-4 0.002,-0.0013 0.004,-0.0013 0.002,-5.3e-4 0.002,-1.07e-4 0.002,0 0.002,2.72e-4 0.001,4.24e-4 10e-4,5.4e-5 0.001,-3.18e-4 0.001,-5.83e-4 0,-0.0011 -5.8e-4,-8.17e-4 0,-6.42e-4 -5.8e-4,-3.78e-4 -5.9e-4,-9.34e-4 -0.001,-4.24e-4 -5.9e-4,-7e-4 -5.8e-4,-0.0016 0,-7e-4 5.8e-4,-8.17e-4 0.004,-0.0036 0.001,-6.41e-4 0,-7e-4 5.8e-4,-0.0015 5.9e-4,-9.34e-4 0.002,-0.0016 0.003,-0.0013 0.004,-0.0019 0.004,-0.0015 0.003,-9.34e-4 0.002,1.08e-4 0.002,1.07e-4 0.001,-3.79e-4 0.001,-6.41e-4 5.8e-4,-6.42e-4 0,-8.16e-4 0.005,-0.0018 0.009,-0.0034 0.0113,-0.004 0.009,-0.0042 0.002,4.24e-4 0.002,-3.18e-4 10e-4,-6.42e-4 5.8e-4,-9.92e-4 0,-0.0012 0.006,-0.0029 0.006,-0.0021 0.003,-0.0011 0.001,1.67e-4 0.002,-6.42e-4 5.8e-4,-5.83e-4 0.001,-3.18e-4 0.001,-0.0016 0.003,-9.34e-4 0.006,-5.3e-4 0.003,6.42e-4 5.8e-4,-0.0012 5.8e-4,-5.4e-5 5.9e-4,-5.4e-5 0.005,0.0051 0.002,7e-4 0.0139,-0.0064 0,-0.002 -5.8e-4,-0.0011 0,-0.0023 0,-0.0015 5.8e-4,-0.0021 0.001,-0.0013 0.001,-8.17e-4 0.002,-7.58e-4 0.004,-7.58e-4 0.004,-4.24e-4 0.008,-6.42e-4 0.004,-1.67e-4 0.004,2.12e-4 0.003,4.85e-4 0.004,8.16e-4 0.004,0.0012 0.005,0.0024 0.004,0.0015 5.8e-4,3.19e-4 0,7e-4 0,0.0014 -5.8e-4,5.84e-4 -5.8e-4,0.0025 5.8e-4,9.33e-4 0,7.59e-4 5.8e-4,5.83e-4 5.9e-4,4.85e-4 0.001,4.24e-4 0.001,3.18e-4 0.002,5.3e-5 0.0225,-6.41e-4 0.002,-5.4e-5 5.8e-4,0 0.015,-0.0074 0.0113,-0.0051 0.006,-3.79e-4 5.8e-4,-2.72e-4 0.002,0.0017 0.003,5.4e-5 0.005,-0.0015 0.001,3.79e-4 0.004,9.92e-4 4.5e-4,3.18e-4 0,2.12e-4 5.9e-4,5.4e-5 0,-4.25e-4 -5.9e-4,-5.3e-4 -0.003,-5.3e-4 -0.002,-5.3e-4 5.8e-4,-2.12e-4 5.8e-4,-6.42e-4 -5.8e-4,-3.17e-4 -0.001,-5.4e-5 0,5.3e-4 -0.006,0.0013 -0.002,-5.5e-5 -5.8e-4,-5.83e-4 5.8e-4,-4.24e-4 -0.008,-0.0086 0.01,-0.0045 0.006,-0.0033 0,-3.18e-4 0.002,-0.0011 0.001,0 0.009,0.0083 -5.9e-4,1.07e-4 0,7e-4 -0.004,0.0023 -5.8e-4,1.08e-4 0,2.11e-4 0,3.19e-4 0,3.18e-4 5.8e-4,1.07e-4 0.001,-8.17e-4 5.8e-4,5.31e-4 -5.8e-4,0.0046 0.001,0.0013 0.006,8.17e-4 0.0102,4.84e-4 5.8e-4,-4.84e-4 0,-7e-4 -5.8e-4,-4.24e-4 -5.9e-4,-1.67e-4 -0.001,0 -0.005,0 -0.005,-3.79e-4 -10e-4,-1.67e-4 -0.001,-2.11e-4 -5.9e-4,-3.18e-4 -5.8e-4,-2.73e-4 0,-3.18e-4 0,-0.0037 0,-9.92e-4 0,-5.3e-4 0.002,-0.0016 0.008,-0.0035 5.8e-4,-6.42e-4 0.004,-0.0015 5.9e-4,-0.0015 0.003,-0.0014 0.001,5.4e-5 0.0102,0.0081 0,4.24e-4 0,3.18e-4 -0.002,0.0013 -0.002,9.33e-4 -0.002,8.17e-4 -0.002,2.73e-4 -0.002,2.11e-4 -0.002,0 -0.001,-1.06e-4 -5.8e-4,-3.79e-4 -5.8e-4,-5.4e-5 -0.001,1.67e-4 0,4.84e-4 0,3.79e-4 0,3.18e-4 0.001,1.07e-4 0.005,4.85e-4 0.005,-5.3e-4 0.006,-0.0015 0.007,-0.0027 0,3.18e-4 0,-4.24e-4 0.0107,-0.006 0.002,9.92e-4 0,-3.19e-4 -0.002,-0.0013 10e-4,-9.92e-4 0.001,-0.0012 0.002,0.0012 5.9e-4,-2.73e-4 -0.002,-0.0013 0.002,-0.0017 0.002,0.0015 4.5e-4,-2.73e-4 -0.002,-0.0013 0.002,-0.0013 0.001,-4.84e-4 0.002,0.0014 5.9e-4,-2.72e-4 -0.002,-0.0014 0.003,-0.0019 0.002,0.0017 5.9e-4,-3.17e-4 -0.003,-0.0018 0.002,-0.0014 0.003,9.34e-4 0.003,-5.84e-4 0.005,-0.0029 0.0107,-0.0044 0.002,-4.24e-4 0.001,0.0016 4.5e-4,-2.12e-4 -0.002,-0.0017 0.003,-0.0011 0.002,0.0017 5.8e-4,-1.66e-4 -0.001,-0.0013 0.002,-8.75e-4 0.009,-0.003 0.0311,-0.0079 0.022,-0.0042 0.002,-6.42e-4 0.003,5.4e-5 0.005,0.002 0.002,-5.4e-5 0.001,-0.0015 -0.01,-0.0068 -0.006,-0.0039 -5.8e-4,-0.0082 0.009,-0.0021 0.002,0.0047 0.004,-0.0015 -0.004,-0.0058 0.0177,-0.0037 0.01,-0.0012 0.004,0.0089 5.8e-4,-5.3e-4 5.8e-4,-5.83e-4 -0.002,-0.005 0.004,-0.0017 0.004,0 0.004,0.0015 0.003,0.0012 0.003,9.33e-4 0.008,-0.0013 0.005,-3.18e-4 0.009,0.0011 0.003,-4.24e-4 0.003,0.0016 0.004,-6.42e-4 0.002,-0.002 0.001,1.07e-4 0.001,0.0011 0.002,-5.83e-4 0,-5.4e-5 0.005,-0.0021 0.004,-0.0027 0.005,-0.0086 0.002,-0.0017 0.002,-0.0017 0.0177,-0.01067 -0.001,-0.0016 -0.005,-0.0011 -0.001,-0.0025 -5.9e-4,-0.003 0,-5.3e-5 0.004,-0.0024 0,-0.0033 -0.001,-0.0027 -0.002,-9.91e-4 -10e-4,8.16e-4 -5.8e-4,-2.72e-4 0.001,-9.33e-4 5.9e-4,-0.001 -0.004,-0.0025 0.001,-0.0011 -5.8e-4,-8.75e-4 -5.8e-4,-7.58e-4 0.0156,-0.0097 0.004,-0.0018 0.002,0 5.8e-4,0 0.01,-0.005 0.002,-2.72e-4 -0.001,-7e-4 0.005,-0.002 5.8e-4,-0.001 0.005,-0.0029 -0.002,-6.41e-4 0.002,-7e-4 -5.8e-4,-2.73e-4 5.8e-4,-3.78e-4 0.002,0.001 0.006,-0.0033 -0.001,-0.0025 0.005,-0.0018 0.002,9.92e-4 0,2.12e-4 0.003,-7.58e-4 -5.8e-4,-3.79e-4 0.002,-7e-4 0.001,5.4e-5 0.004,-0.0018 0.004,-0.0016 0.002,3.18e-4 0.002,0.0018 0.001,1.07e-4 -0.001,-4.24e-4 -0.002,-0.0022 5.8e-4,-2.72e-4 0.002,0.0015 -0.001,-0.0019 0.002,-0.0016 0.005,3.79e-4 0.0263,-0.01357 0.006,-0.0012 0.005,0.001 0.006,-0.0047 0.005,-0.0018 0.0177,2.73e-4 0.008,3.79e-4 0.002,-0.0032 0.003,-0.002 -5.9e-4,-5.84e-4 -0.007,0.0039 -0.001,-5.83e-4 0.005,-0.0024 5.9e-4,-0.0023 0.0129,-0.0079 0.002,6.42e-4 0.005,-0.0018 0.004,-0.0017 0.009,0.0021 0.001,-5.84e-4 4.5e-4,-7.58e-4 -4.5e-4,-7e-4 -0.008,-0.0017 -0.002,-0.0017 0.006,-0.003 0.004,0.0024 -5.9e-4,0.0011 0.001,7.58e-4 0.005,-7e-4 0.009,-0.0039 0.005,-3.19e-4 10e-4,-9.91e-4 0,-8.17e-4 -0.002,-5.83e-4 -0.005,6.41e-4 -0.005,0.0027 -0.004,0.0017 -0.004,-5.3e-5 -0.009,-0.0081 0.0166,-0.0088 0.004,0.0029 0.001,-6.42e-4 0.006,0.005 -0.003,0.0017 5.8e-4,9.34e-4 0.001,-5.4e-5 0.005,-0.0027 0.003,1.67e-4 0.002,-9.92e-4 4.6e-4,-0.0016 0.002,-9.33e-4 0.004,8.75e-4 0.002,-5.83e-4 0,-0.0016 -0.007,-0.0012 0.004,-0.0057 0.006,-0.0023 0.005,-5.3e-5 0,-0.0028 0.004,-9.92e-4 0.002,7.59e-4 0.001,-9.92e-4 0.0113,5.4e-5 0.001,-6.41e-4 -0.003,-4.24e-4 -0.006,-0.004 0.004,-0.0026 0.005,-3.79e-4 0.002,0.0023 -0.002,0.0014 0.004,1.07e-4 4.5e-4,-7.58e-4 -0.001,-0.0016 0.001,-8.17e-4 0.003,8.17e-4 -0.002,0.0016 0.002,1.67e-4 0.003,-0.0015 0.003,9.92e-4 0.002,-0.0023 -0.002,-0.0019 0.003,-8.16e-4 0.003,4.84e-4 -0.002,0.0022 0.006,-3.19e-4 5.8e-4,-4.24e-4 -0.002,-0.0018 0,-0.0016 0,-2.73e-4 0.003,9.33e-4 0,0.0011 -0.001,3.79e-4 5.8e-4,0.0015 0.002,0.0032 10e-4,-3.17e-4 0,-0.0023 5.8e-4,-1.06e-4 0.001,-8.17e-4 0.002,2.73e-4 0.002,8.75e-4 5.9e-4,9.92e-4 -0.001,-1.08e-4 -5.8e-4,4.24e-4 0.0112,0.0038 0.001,-6.41e-4 -0.004,-0.0018 -0.004,-3.79e-4 0,-7.58e-4 0.001,-4.85e-4 0.002,6.42e-4 0.004,1.66e-4 0.002,6.42e-4 0.001,0.0017 10e-4,-1.66e-4 0.001,3.18e-4 0.001,1.67e-4 0.002,-6.42e-4 0.002,-3.78e-4 0.001,1.67e-4 0.002,5.29e-4 5.8e-4,-1.66e-4 0,-5.3e-4 -10e-4,-5.84e-4 -0.002,-4.84e-4 -0.003,-8.17e-4 0.007,-0.0086 0.0118,2.73e-4 0.0102,0.0036 0.002,6.41e-4 -0.002,0.002 0.002,4.24e-4 -0.002,0.0034 5.9e-4,2.72e-4 -0.005,0.0061 -0.004,-0.0013 0,6.42e-4 0.005,0.0026 0.001,0.0021 0.002,2.12e-4 0.004,-2.73e-4 0.004,5.83e-4 0.01,0.0039 0.001,-3.18e-4 5.8e-4,-6.42e-4 -5.8e-4,-7e-4 -0.009,-0.0033 0,-6.42e-4 10e-4,-0.0015 0.002,-3.78e-4 0.002,-2.13e-4 0.004,-0.0018 0.001,-0.0013 5.8e-4,-0.0012 0,-2.73e-4 0.002,-9.92e-4 0.001,1.67e-4 0.001,0 4.6e-4,-3.18e-4 5.8e-4,-6.42e-4 0,-3.79e-4 -0.002,-3.18e-4 -5.9e-4,2.73e-4 -5.8e-4,4.84e-4 -0.006,-0.0021 0.001,-0.0016 -0.002,-5.3e-4 5.8e-4,-4.85e-4 0.002,5.31e-4 5.9e-4,-7e-4 0.006,0.002 -5.8e-4,9.92e-4 0.004,-2.73e-4 0,-8.75e-4 -0.002,-4.24e-4 0.001,-9.33e-4 0.002,-7e-4 0.003,-3.78e-4 0.004,-5.4e-5 0.003,3.78e-4 -5.8e-4,0.0012 0.001,8.17e-4 0.004,-0.003 0.001,-7e-4 0.002,-5.3e-4 0.002,-2.13e-4 0.002,1.67e-4 0.002,2.73e-4 0.002,4.84e-4 0.003,0.0013 0.002,2.73e-4 0.003,6.41e-4 10e-4,-1.66e-4 0.002,-4.24e-4 5.8e-4,2.12e-4 0.004,0.0019 0.001,-4.85e-4 0.008,0.0053 -5.8e-4,5.3e-4 -0.002,0.003 0.003,0.0017 0.004,0.0011 0.002,8.17e-4 0.002,0.0011 5.8e-4,9.92e-4 5.8e-4,-8.17e-4 -5.8e-4,-5.3e-4 0.002,-5.83e-4 10e-4,-5.4e-5 0.001,4.24e-4 0.001,4.25e-4 0,7e-4 -0.005,0.0036 0.001,1.67e-4 -5.8e-4,8.16e-4 0.002,5.84e-4 0.003,-3.79e-4 0.002,0 -0.002,0.0016 -0.002,0.0015 0,8.75e-4 4.6e-4,9.92e-4 0.003,8.75e-4 0.002,-9.92e-4 0.002,-1.67e-4 0.003,-5.4e-5 0.002,9.92e-4 5.8e-4,9.33e-4 0,9.92e-4 -0.009,0.0034 0.004,0.01057 0.008,0.004 0.002,8.75e-4 0.002,0.0022 -5.8e-4,0.0023 0.002,0.0024 0.003,0.0019 0.003,0.0012 5.9e-4,8.17e-4 -0.004,9.91e-4 -0.003,-7e-4 -0.003,6.42e-4 -0.003,0.0024 0.005,0.0011 0.006,-3.78e-4 0.004,0.0028 0.005,0.0033 0.007,-0.0095 0.004,2.73e-4 -0.005,0.0081 0.0252,-9.33e-4 0.01,0.0031 0.002,1.67e-4 0.008,6.42e-4 0.0322,0.006 0.0177,0.01529 0.0515,0.009 0.0107,-0.0047 0.008,-0.0036 0.009,4.24e-4 0.005,0.0075 0.003,-0.0048 -0.004,-0.0051 0.003,-0.0018 0.006,0.0032 0.005,-0.0019 5.8e-4,-0.0037 -0.005,-0.002 0.003,-0.0018 5.8e-4,-0.0023 0.002,-5.4e-5 0.002,0.0022 0.001,0 0.004,-0.0032 0.003,6.41e-4 0.001,0.0027 0.001,0.001 0.004,-0.0011 0.005,-0.0034 0.002,0.002 0.003,-3.78e-4 0.003,-0.0036 -5.9e-4,-0.0019 0.004,-0.0036 -0.002,-7e-4 5.9e-4,-0.0014 -5.9e-4,-0.0019 0.003,-1.07e-4 0.002,0.0062 0.002,-2.13e-4 0.002,-0.0062 0.004,-3.19e-4 0.005,-2.11e-4 0,4.84e-4 -5.8e-4,5.31e-4 -0.001,9.91e-4 -0.003,0.0021 0,0.0023 0.006,9.92e-4 0.004,-0.0021 0,-0.0019 -0.002,-2.73e-4 -0.001,-8.74e-4 0.001,-1.08e-4 0.001,2.12e-4 0.001,1.08e-4 10e-4,-4.85e-4 0.001,-5.4e-5 0.001,8.75e-4 0.001,-1.07e-4 5.8e-4,-9.92e-4 0.002,-2.11e-4 5.8e-4,2.72e-4 10e-4,-1.07e-4 0.001,-5.84e-4 0.001,-5.83e-4 0.001,5.4e-5 0.002,-0.0018 0.0118,0.0015 0.004,0.0017 0.002,0.002 -5.8e-4,2.73e-4 -0.001,4.24e-4 0.002,0.02238 0,3.79e-4 0,0 -5.8e-4,2.72e-4 -5.9e-4,-5.3e-5 0,3.78e-4 -0.002,0.0016 -0.0596,0.05001 -0.001,8.17e-4 0,5.83e-4 4.6e-4,1.67e-4 0,-5.4e-5 0.001,-9.33e-4 0.0467,-0.03944 0.0156,-0.01277 -5.8e-4,-1.67e-4 5.8e-4,-3.18e-4 5.9e-4,-1.07e-4 0.002,-0.0015 0.002,-0.0016 0.005,0.0031 0.004,0.0023 -0.0649,0.05505 -0.002,8.17e-4 -5.8e-4,2.72e-4 5.8e-4,7.58e-4 10e-4,5.4e-5 0.001,-8.17e-4 5.8e-4,-7.58e-4 0.0247,-0.02082 0.0113,-0.0094 0.0317,-0.01792 0.0209,-0.01255 0.002,-0.0031 0.002,1.67e-4 0,-2.73e-4 -5.8e-4,-0.0012 0,-5.31e-4 5.8e-4,-5.83e-4 10e-4,-5.3e-4 0.001,-5.4e-5 0.002,7.59e-4 5.8e-4,5.83e-4 0.004,-0.0043 0.003,-0.0019 -0.001,-8.75e-4 5.9e-4,-0.0015 0.002,-7.58e-4 0.002,-1.07e-4 0.004,-0.0037 0.007,7.59e-4 0.002,-9.92e-4 0.003,7e-4 0.002,-0.0015 0.002,-0.0018 -0.003,-0.0043 -5.9e-4,-0.005 0.001,-9.92e-4 0.004,5.4e-5 0.002,2.12e-4 0.001,4.24e-4 10e-4,6.42e-4 -4.6e-4,2.12e-4 -5.8e-4,1.08e-4 -0.002,-2.12e-4 -0.003,-2.73e-4 -0.001,4.85e-4 5.9e-4,10e-4 0.001,0.0033 0.001,0.0026 5.8e-4,0.0019 5.9e-4,5.31e-4 5.8e-4,-5.4e-5 10e-4,-1.07e-4 0.001,-3.18e-4 5.9e-4,0 5.8e-4,3.78e-4 -5.8e-4,7.59e-4 5.8e-4,6.41e-4 0.001,2.12e-4 0.004,-8.17e-4 0.002,-0.0019 0.002,-5.31e-4 4.6e-4,-7.58e-4 -0.001,-3.18e-4 0,-6.41e-4 0.001,-2.73e-4 5.8e-4,-2.72e-4 0.001,-0.0012 -5.8e-4,-0.003 0.002,6.42e-4 -4.6e-4,9.33e-4 0.002,0.0013 -5.8e-4,8.75e-4 0,0.0013 5.8e-4,4.25e-4 5.8e-4,4.24e-4 5.9e-4,-1.08e-4 0.001,6.42e-4 5.9e-4,7.58e-4 0.001,4.24e-4 0.002,1.08e-4 0.002,9.33e-4 0.003,4.85e-4 0.002,7.58e-4 0.0209,0.0067 0.0172,0.0099 0.0156,0.0015 0.0171,0.0096 0.006,-0.0015 0.0124,0.01438 0.0193,0.0053 0.004,0.0062 0.009,-0.0012 -0.007,0.0071 0.003,0.0057 0.006,0.0041 0.005,9.92e-4 0.006,0.01228 0.0113,0.0066 0.015,0.01132 10e-4,0.0096 0.0107,0.0049 -5.8e-4,0.01255 0.007,0.0071 0.003,0.0057 0.0166,2.12e-4 0.006,0.01916 0.0113,0.0118 0.005,0.0027 -0.005,0.0059 0.002,0.0044 0.0118,0.0024 -0.0102,0.003 5.8e-4,0.0041 0.008,0.0012 0.005,0.0043 0.004,0.0052 0.008,0.0015 -0.004,0.0052 -0.008,0.004 -0.0118,-0.0017 -0.003,0.003 5.9e-4,0.0054 -0.004,0.0023 -0.004,0.006 -0.0161,-0.0023 -0.006,0.0065 -0.0161,0.0022 -0.0198,0.0033 -0.0102,0.005 -0.002,0.01427 -0.007,0.0032 -0.0145,0.0051 -0.006,0.0065 -0.0118,9.34e-4 -0.006,-5.4e-5 -0.002,-7e-4 -10e-4,0.0015 10e-4,0.0026 -0.002,5.5e-5 -0.002,9.33e-4 -0.0832,-0.01604 -4.6e-4,4.85e-4 0.10678,0.02092 -0.002,0.0056 -0.0456,-0.009 -0.005,-5.4e-5 -0.0553,-0.01121 -5.8e-4,9.33e-4 0.0552,0.01154 0.005,0 0.0263,0.0051 0.0102,0.0048 0.005,0.003 0.004,0.0018 0.002,0.0065 -0.005,0.0057 -0.0113,0.0096 0.008,0.01588 -0.008,0.0086 -0.003,0.0086 -0.0102,0.0078 -0.002,0.01148 -0.004,0.0097 -0.0102,0.0039 -0.009,0.01111 -0.0182,0.0078 -0.004,0.0061 -10e-4,0.0075 -0.029,0.01357 -0.01,0.0082 -0.002,0.01143 -0.004,0.01041 -0.0102,0.0075 -0.009,0.01143 -0.0209,0.01389 -0.004,0.0024 -0.004,-0.0017 -0.0112,0.0013 -0.003,0.0074 -0.0102,0.0045 -0.0145,0.0035 -0.003,0.003 -0.002,0.0069 -0.009,0.0067 -0.0129,0.0059 -0.0124,5.3e-4 -0.008,7.59e-4 -0.0118,-0.0034 -0.006,0.0043 -0.0145,-0.0079 0.0129,-0.01111 -0.001,-9.33e-4 -0.0139,0.01127 -0.002,7.59e-4 0.0129,0.0093 0.002,0.0028 -5.8e-4,0.0019 0,0.002 0.005,0.0026 -0.002,0.0016 -0.004,0.0013 -0.007,-0.003 -0.39114,0.152806 -0.03,0.02973 -0.11643,0.114121 -0.0579,0.04228 -0.0349,0.02098 -0.0193,0.01138 -0.0354,0.0087 -0.0671,0.05929 -0.20013,0.103766 -0.074,0.0889 -0.0391,-0.01293 -0.0204,0.0078 -0.24681,0.09357 0.005,-0.01347 -5.8e-4,-7.59e-4 -0.0311,-0.03761 -0.003,-0.0019 -0.005,-2.12e-4 -0.005,9.91e-4 -0.002,5.84e-4 -5.8e-4,0.0012 5.8e-4,2.12e-4 4.6e-4,-9.92e-4 0.002,-4.84e-4 0.005,-9.92e-4 0.005,2.72e-4 0.003,0.0019 0.0311,0.03745 0.001,4.85e-4 -0.005,0.01363 -0.001,4.24e-4 -0.002,4.85e-4 -0.001,1.66e-4 -0.002,0.0015 -0.004,-0.0047 -0.003,-0.0042 -0.002,-3.18e-4 -0.0317,-0.03697 0,-5.4e-5 -0.003,-0.0037 5.8e-4,-10e-4 0.002,-7.58e-4 0,-3.79e-4 -5.8e-4,5.4e-5 -10e-4,6.42e-4 -0.001,0.0015 0.003,0.0042 0,7.58e-4 0.0306,0.03638 5.8e-4,0.0019 0.004,0.0048 0.001,-2.12e-4 0.004,0.0034 -0.11214,0.101673 -0.21408,0.193959 -0.13038,0.09363 -0.11052,0.04448 -0.002,0.0027 -0.004,0.0044 -0.003,0.003 -0.006,0.0056 -0.0113,0.0051 -0.002,4.85e-4 -0.002,3.18e-4 -0.004,9.33e-4 -0.005,-2.12e-4 -0.005,-7.59e-4 -0.004,-0.0027 0,-5.3e-5 -10e-4,-2.13e-4 -0.002,-3.18e-4 0,2.73e-4 -0.005,0.0042 -0.004,0.0012 -0.002,9.92e-4 -0.01,0.01 -0.009,0.0086 -0.01,0.008 -0.002,0.0016 -0.005,0.0019 -0.002,9.33e-4 -0.002,0.003 0,0.0015 0.002,0.0029 0.003,0.0023 0.0102,0.0085 -0.002,0.0013 -0.003,-0.003 -0.001,-1.66e-4 -0.002,-2.73e-4 -0.008,0.0042 -10e-4,-9.91e-4 -0.001,5.3e-4 -0.002,-0.0022 0.008,-0.0054 -0.004,-0.0041 -10e-4,-1.08e-4 -0.005,0.003 -0.006,-2.72e-4 -10e-4,0.0017 -0.004,0.0034 0,0.0011 -5.9e-4,4.24e-4 -0.001,0 -0.002,9.33e-4 -0.004,-0.0015 -0.001,-8.75e-4 -0.002,5.4e-5 -0.002,8.75e-4 -0.002,0.0017 -0.0188,-0.005 -5.9e-4,1.67e-4 -0.005,0.0073 -0.009,-0.0032 -0.004,-0.0033 -5.9e-4,4.85e-4 0.003,0.0036 0.004,0.0017 0.0268,0.0087 0.002,0.0083 -0.005,0.0056 -0.01,-0.0039 -0.006,0.0084 -0.0204,-0.0072 0,-6.41e-4 0.004,-0.01567 -5.9e-4,-1.07e-4 -0.005,0.01583 5.8e-4,8.16e-4 0.0215,0.0077 0.0102,5.84e-4 0.002,0.001 -0.004,0.0021 -0.001,-7.59e-4 5.8e-4,-5.83e-4 -0.001,-0.0011 -0.004,0.002 0.001,0.0023 -0.002,0.002 -0.0204,0.01282 -0.0171,0.0078 -0.007,0.0028 0.002,0.0031 -5.9e-4,0.0033 -0.002,0.0025 -0.004,0.0011 -0.0204,0.0095 -0.0118,-0.0017 -0.004,0.0086 -0.0198,0.0088 -0.0151,-0.0024 -0.0606,0.02227 -0.001,0.0099 -0.0124,0.0043 -0.0193,-1.67e-4 -0.005,0.0021 -0.006,0.0035 -0.005,0.0022 -0.006,0.002 -0.006,0.001 -0.004,0 -0.004,-5.83e-4 -0.005,-5.4e-5 -0.004,-2.12e-4 -0.005,-0.0015 -0.004,-0.0016 -0.004,-0.0023 -0.002,-3.78e-4 -0.001,3.78e-4 -0.003,0.0016 -0.0113,0.0044 -0.0129,0.0057 -0.0204,0.01438 -0.0107,0.01084 -0.0145,7.59e-4 -0.0547,0.03906 -0.0649,0.03214 -0.0139,0.02248 -0.0344,0.02044 -0.009,0.0062 -0.003,9.33e-4 -0.006,0.0021 -0.006,-0.0012 -0.002,2.73e-4 -0.006,0.0038 -0.005,0.0021 -0.004,0.0024 -0.006,0.003 -0.0113,0.008 -0.005,0.0036 -5.8e-4,0.0024 -0.005,0.0047 -0.002,0.0043 -0.005,0.0057 -10e-4,0.0024 -0.003,0.0023 -5.9e-4,0.0019 -0.004,0.004 -0.004,0.0024 -0.007,0.0053 -0.004,0.003 -0.002,0.002 -0.0215,0.01062 -0.0268,0.0206 -0.0268,0.02329 -0.004,0.0043 -0.002,0.0011 -0.006,0.0026 -0.0107,0.0062 0,0.0036 -10e-4,0.0024 -0.003,0.0031 -0.004,0.0035 -0.008,0.004 -0.004,0.0017 -0.004,4.84e-4 -0.0467,0.02892 -0.005,0.0026 -0.006,0.0048 -0.009,0.007 -0.002,0.0018 -0.003,9.92e-4 -0.004,0.0024 -0.004,0.0037 -0.003,0.003 -0.005,0.0036 -0.009,0.005 -0.009,0.004 -0.005,0.0037 -0.005,0.0026 -0.002,0.0019 -0.003,3.78e-4 -0.004,-8.75e-4 -0.044,0.02694 -0.0697,0.02704 -0.0944,-0.01653 -0.03,-5.3e-4 -0.004,-0.0011 -0.002,-0.0015 -5.8e-4,-0.0015 0.002,-0.0017 0,-0.0024 -0.001,-0.0022 -0.002,-0.0015 -0.001,8.16e-4 -0.003,-3.17e-4 -0.004,-0.0014 -5.8e-4,-6.42e-4 -0.005,-0.0022 -0.004,-0.0023 -0.003,-0.0019 -10e-4,-7.58e-4 0,-9.92e-4 0,-0.0034 0,-0.0016 -0.001,-0.0011 -0.003,-0.0019 -0.002,-0.0026 -0.002,-0.0054 -0.003,-0.0017 -0.002,-0.0011 -5.8e-4,-0.0013 -0.002,-8.17e-4 -0.004,5.3e-4 -0.004,0.0025 -0.004,9.92e-4 -0.002,0.0021 -0.002,0.0056 -0.003,0.0021 -0.005,0.0038 -0.007,0.0069 -0.002,0.003 -0.001,1.67e-4 -0.002,5.3e-4 -0.003,5.3e-4 -0.002,5.83e-4 -0.002,4.85e-4 -5.8e-4,0 -0.006,5.4e-5 -0.006,-5.3e-4 -0.01,-0.0014 -0.006,-0.0014 -0.0118,-0.0017 -0.004,-6.41e-4 -0.008,-0.0015 -5.8e-4,5.84e-4 -0.003,0 -0.001,5.83e-4 -0.008,-0.0013 -0.009,-0.0027 -0.004,-0.0015 -0.002,0.0012 -0.002,9.91e-4 -0.006,-0.0023 -0.004,-7e-4 -0.005,-0.0015 -0.006,-0.002 -0.004,-0.0071 -0.001,-0.0016 -10e-4,-0.0012 -0.003,-0.0018 -0.002,-0.0011 -0.003,-4.85e-4 -0.002,-1.07e-4 -0.002,5.3e-5 -0.001,5.4e-5 -5.8e-4,2.73e-4 -5.8e-4,5.3e-4 0.001,5.3e-4 0,5.3e-5 10e-4,-4.24e-4 0.002,-1.66e-4 0.002,2.12e-4 0.002,5.3e-4 0.002,7.58e-4 0.003,0.0016 10e-4,0.0011 0.001,0.0013 0.005,0.01003 -0.004,9.92e-4 -0.004,9.33e-4 -0.005,0.001 -0.004,0.0011 -0.005,-0.0011 -0.001,-0.002 -0.002,-0.0029 -0.001,-0.002 -5.8e-4,-0.0015 0,-0.0019 0,-0.0017 5.8e-4,-0.0017 0.002,-0.0016 0.001,-9.33e-4 5.8e-4,-3.19e-4 -5.8e-4,-3.18e-4 -0.001,2.73e-4 -10e-4,9.33e-4 -0.001,0.0018 -0.001,0.0017 0,0.0018 5.8e-4,0.002 5.9e-4,0.0015 0.001,0.0019 0.002,0.003 0.001,0.002 -5.8e-4,5.4e-5 -5.9e-4,0.0015 -0.002,0.001 0,1.07e-4 -0.002,0.0019 -0.004,0.0012 -0.003,8.75e-4 -0.002,0.0011 -0.002,3.78e-4 -0.002,-5.4e-5 -0.004,-5.3e-4 -0.0799,-0.0042 -0.0204,0.0039 -0.0183,0.0069 -0.003,0.002 -0.0198,0.008 -0.005,0.0015 -0.30905,0.104678 -0.0193,0.01513 -0.03,0.0083 -0.0156,8.17e-4 -0.009,0.0051 -0.0397,0.0117 -0.0177,0.01078 -0.0102,-1.67e-4 -0.0113,0.0022 -0.004,0.0051 -0.0268,0.0089 -5.8e-4,0.0048 -0.004,0.0036 -0.009,0.0011 -0.0177,5.3e-5 -5.9e-4,0.0081 0.003,0.0013 -0.001,0.0042 -0.004,0.0034 -0.008,0.0013 -0.009,0.0044 -5.9e-4,-0.0027 0.005,-0.0012 0.006,-0.0058 -0.022,4.24e-4 -0.007,0.0072 -0.009,0.0012 -0.009,0.0033 -0.004,2.12e-4 -0.007,-1.67e-4 -0.0215,0.0051 -0.003,0.0015 -0.004,-7e-4 -0.006,0.002 -0.004,0.0017 -0.0113,0.0054 -0.01,0.0034 -0.008,-0.0012 -0.007,-0.0019 -0.004,-0.0044 -10e-4,1.08e-4 -0.0268,0.01014 -0.001,2.11e-4 -0.002,2.73e-4 -0.002,5.4e-5 -0.002,-1.67e-4 -0.005,-0.0022 -5.9e-4,-4.85e-4 -5.8e-4,-8.75e-4 -0.003,-0.0015 -0.004,-0.0016 -0.001,-1.67e-4 -0.001,-4.24e-4 -10e-4,-0.0011 -0.001,-0.0021 -5.9e-4,-0.0021 0,-0.0011 5.9e-4,-6.42e-4 0,-2.72e-4 0,-4.24e-4 -5.9e-4,-4.85e-4 -5.8e-4,-3.18e-4 -0.001,-2.12e-4 -10e-4,5.3e-5 -0.001,7e-4 -5.8e-4,1.07e-4 -0.002,-0.0012 -0.003,-5.83e-4 -0.007,-1.08e-4 -0.009,9.33e-4 -0.001,5.4e-5 -0.002,-1.07e-4 -0.002,-6.42e-4 -5.8e-4,-6.42e-4 -5.9e-4,-1.07e-4 -5.8e-4,-1.07e-4 -5.8e-4,1.67e-4 -5.9e-4,1.66e-4 0,3.18e-4 0,0.0026 0,0.0026 -0.002,0.002 -0.004,0.0038 -0.005,-0.0023 5.8e-4,-4.24e-4 -5.8e-4,-4.24e-4 0,-4.85e-4 -5.9e-4,-0.0012 -0.001,-0.0012 -10e-4,-6.42e-4 0.004,-0.0048 0.008,-0.0023 10e-4,-2.73e-4 0.001,-5.4e-5 5.8e-4,1.08e-4 0.001,3.18e-4 0,2.72e-4 5.8e-4,1.67e-4 5.8e-4,-1.07e-4 5.9e-4,-2.12e-4 0,-5.31e-4 -5.9e-4,-2.72e-4 -5.8e-4,-1.07e-4 -5.8e-4,-1.67e-4 -0.001,-2.73e-4 -0.002,1.08e-4 -0.002,2.72e-4 -0.003,8.75e-4 -10e-4,2.12e-4 -0.004,9.92e-4 -0.001,2.12e-4 -0.002,0.0013 -5.8e-4,8.17e-4 -0.001,2.12e-4 -5.8e-4,5.3e-5 -5.9e-4,-4.24e-4 0,-8.16e-4 0.001,-0.0011 0,-5.3e-4 0,-4.84e-4 -5.8e-4,-3.79e-4 -5.9e-4,-2.12e-4 -10e-4,0 -5.9e-4,2.12e-4 -0.001,4.85e-4 -0.001,9.91e-4 -0.002,-8.16e-4 -5.8e-4,-2.73e-4 -0.004,-0.0016 -0.0354,-0.0213 -0.002,-0.0033 -0.002,-0.0031 0.0124,-0.0069 0.008,-0.0041 -5.8e-4,-3.19e-4 -0.002,-0.0026 -0.002,-0.0018 -5.9e-4,-3.18e-4 -0.002,0.0012 -0.002,-7.58e-4 -0.002,-0.0012 -5.8e-4,-9.92e-4 0,-9.92e-4 -5.8e-4,-0.002 -0.001,-0.0017 -10e-4,-0.0013 -0.002,-0.0012 -0.002,-5.31e-4 -0.002,-1.07e-4 -0.002,-4.24e-4 0,-7.58e-4 5.8e-4,-5.83e-4 -0.001,-9.92e-4 -5.9e-4,-0.001 0,-0.0019 -5.8e-4,-0.0019 -0.002,-0.0013 -0.003,-0.0014 -0.002,-0.0014 -10e-4,1.67e-4 -0.001,-5.3e-4 0,-6.42e-4 5.8e-4,-4.24e-4 0,-9.91e-4 -5.8e-4,-0.0012 -0.001,-0.0016 -0.003,-3.78e-4 -0.002,-1.67e-4 -0.003,1.67e-4 -0.002,5.3e-4 -0.002,0 -0.002,7e-4 -0.004,7.58e-4 -0.004,9.92e-4 -0.004,0.0012 -0.003,0.0018 -0.003,0.0018 -5.8e-4,-1.08e-4 -0.002,-0.0012 -0.003,-0.0037 -0.004,-6.42e-4 -0.006,-0.0049 -0.005,-0.0054 -0.003,-0.0023 0,-7e-4 10e-4,-8.16e-4 5.8e-4,-7e-4 0,-7.59e-4 -0.004,-0.003 -0.005,-0.0044 -0.002,-0.0027 -0.003,-0.0022 -0.002,-8.75e-4 -0.002,3.18e-4 -0.005,-0.0071 -0.003,1.67e-4 0.001,-0.0013 5.8e-4,-0.0037 0.002,-0.0025 -5.8e-4,-0.002 -0.003,-7e-4 -5.8e-4,-4.85e-4 -5.8e-4,-0.0017 -0.008,-0.01057 -0.004,-0.01137 0.002,-9.34e-4 0,-3.78e-4 -0.002,-5.3e-4 -10e-4,-0.0037 -0.003,-0.01028 0.002,-0.0019 0.002,-0.0017 -5.8e-4,-0.0016 5.8e-4,-0.0032 0.002,-9.33e-4 10e-4,-0.0035 0.002,-0.0015 0.003,-7.58e-4 10e-4,-0.0046 0.001,-0.0054 0.002,-0.0029 0.002,-0.002 0.002,-0.0013 0.004,-0.0055 -10e-4,-0.004 10e-4,-0.0038 0.002,-0.003 0.002,-8.75e-4 0.002,-6.42e-4 0,3.79e-4 0.001,-2.72e-4 0.008,-0.0036 0.0172,-0.0067 0.004,1.67e-4 0.0124,-0.0056 0.003,-5.83e-4 5.8e-4,0.0011 0.002,-0.002 0.0198,-0.0073 0.003,7.58e-4 -0.001,-0.0012 5.9e-4,-0.0011 0.022,-0.01272 0.003,-3.79e-4 0.002,0.002 0,-0.0025 0.008,-0.0048 0.004,-9.34e-4 0.01,-0.0054 10e-4,5.3e-4 0.0118,-0.0061 0.0166,-0.01078 0.005,-0.0053 0.007,-0.0023 0.029,-0.014 0.004,-0.0042 0.005,-0.0012 0.006,-0.0093 0.008,-0.0044 0.006,-0.0019 0.0113,-0.0068 0.0156,-0.0039 0.009,-0.0076 0.006,-0.0072 0.009,-0.003 -5.8e-4,-0.0018 10e-4,6.42e-4 0.002,-4.24e-4 -0.001,-0.001 0.001,-3.8e-4 0.002,0.0011 0.0102,-0.004 0.0107,-9.33e-4 0.004,-0.0019 0.008,0.0026 0.004,-0.002 0.0124,-0.001 10e-4,-0.0044 0.002,-0.0023 0.003,-7.58e-4 0.002,0.0032 0.001,-1.07e-4 0.002,-0.0035 0.006,6.41e-4 0.003,-0.0026 0.0139,-0.0066 0.005,-9.92e-4 0.0102,-2.72e-4 0.008,-0.0017 0.008,-0.0045 0.002,-0.0023 0.006,-0.0037 0.03,-0.01116 0.006,-4.84e-4 0.002,0.0034 0.002,3.78e-4 0.0134,-0.0051 0.006,-0.0044 0.003,-8.75e-4 0.0102,-3.79e-4 0.004,-0.0046 0.003,1.08e-4 0.002,-0.0015 0.003,-0.0051 0.006,-0.0016 -0.002,-0.0029 5.8e-4,-0.0016 -0.002,-0.0026 0.004,-1.08e-4 0.006,-0.0047 0.002,8.75e-4 0.004,-0.0026 0.004,5.3e-4 -0.001,0.0024 -0.003,5.4e-5 0.002,0.001 10e-4,-4.85e-4 0.002,-0.0033 -0.0118,-0.003 -0.006,-0.004 0.008,-0.0057 0.015,0.0083 0.004,-0.0026 0.0102,-0.007 0.005,-8.75e-4 0.004,-0.0052 0.01,1.07e-4 m 4.15764,-1.862633 0.009,-0.0026 0.003,0 0.001,-0.0036 -0.002,-0.0028 -0.005,7e-4 -0.009,0.0036 -0.004,0.003 0.001,0.0015 0.005,2.73e-4 m -0.0193,0.0093 0.004,-0.0023 0.006,-0.0024 0,-0.0031 -0.006,-9.91e-4 -0.005,0.0016 -0.004,0.002 -0.004,0.0028 -0.002,0.0025 0.003,0.0019 0.002,0.0024 0.004,1.67e-4 0.002,-0.002 0.001,-0.0025 m -0.6299,-0.315859 -0.001,-2.13e-4 -10e-4,2.73e-4 0,5.31e-4 0,6.41e-4 0.006,0.0019 0.004,0.0017 0.004,0.002 0.003,0.0023 0.004,0.0038 0.001,2.12e-4 5.8e-4,-1.66e-4 0.001,-5.3e-4 -5.9e-4,-7.58e-4 -0.007,-0.0064 -0.003,-0.0017 -0.004,-0.0015 -0.007,-0.0022"},{"id":"14","nom":"Lac Leman","clSc01":"1","clSc02":"1","clSc03":"1","clSc04":"1","clSc05":"1","clSc08":"1","clSc06":"1","clSc07":"1","clSc09":"1","clSc10":"1","clSc11":"1","clSc12":"1","clSc13":"1","clSc14":"1","clSc15":"1","clSc16":"1","clSc17":"1","clSc18":"1","clSc19":"1","clSc20":"1","clSc21":"1","clSc22":"1","clSc23":"1","clSc24":"1","clSc25":"1","clSc26":"1","clSc27":"1","clSc28":"1","chemin":"m 121.168,84.9421 0.061,-0.0437 -0.007,-0.0206 0.019,0.0094 -0.02,-0.0108 -0.013,-0.0492 0.022,-0.0458 -0.051,-0.058 0.024,-0.0753 -0.001,-0.0646 0.031,-0.0711 -0.025,-0.0254 0,-0.0362 0.055,-0.0402 0.017,-0.0473 0.043,-0.0409 0.037,-0.0081 0.011,0.0058 -0.005,0.0053 0.004,0.003 0.045,-0.1236 0.012,0.0071 -0.001,-0.0376 -0.046,-0.0579 0.033,-0.0818 0.018,-0.0014 -0.022,-0.0357 0.01,-0.0413 0.086,-0.0502 0.107,-0.1332 0.047,-0.0187 0.068,-0.0858 0.013,0.0036 -0.012,-0.0045 0.009,-0.0306 0.049,-0.0715 -0.005,-0.0533 0.052,-0.0441 -0.013,-0.0151 0.016,-0.0152 -0.011,-0.055 0.023,-4e-4 -0.008,-0.0123 0.053,-0.069 0.099,-0.0922 0.115,-0.0806 0.034,-0.0672 0.1,-0.0728 0.02,0.0069 0.001,-0.0238 0.113,-0.0774 0.072,-0.013 0.118,0.0329 0.104,-0.1144 -0.015,-0.0603 0.069,-0.0538 0.032,-0.0537 -0.013,-0.0416 0.018,-0.0376 0.147,-0.0667 0.049,-0.0714 0.093,-0.0465 0.011,-0.0367 0.155,-0.0721 0.079,-0.0958 0.103,-0.0404 0.149,-0.0066 0.112,-0.0364 0.116,0.0052 0.143,0.0734 0.103,-0.0105 0.178,-0.1009 0.137,-0.0183 0.177,-0.0509 0.058,-0.0442 0.074,-0.0042 0.004,-0.0659 0.095,-0.0653 0.128,-0.0126 0.018,-0.0647 0.032,-0.0428 0.018,0.0027 -0.01,-0.0122 0.025,-0.0014 -0.012,0.0151 0.003,0.0013 0.058,-0.0278 0.001,-0.015 0.054,-0.0137 -0.018,-0.0057 0.016,-0.0116 0.002,0.0141 0.03,-0.0428 -0.003,-0.0239 0.065,-0.0375 0.139,0.0036 0.212,0.0917 0.188,-0.0034 0.044,-0.0041 0.055,-0.0462 0.086,-0.0125 0.07,-0.049 0.091,0.0067 0.036,-0.0153 0.095,0.0442 0.014,0.0261 0.146,0.0143 0.077,0.052 0.009,-0.0115 0.044,0.0187 0.007,0.0099 0.035,-0.0072 -0.008,-0.0167 0.045,-0.0055 0.101,0.0273 0.199,-0.0143 0.107,0.0275 0.084,-0.0085 0.026,0.0229 0.097,0.0075 0.143,0.0389 0.234,0.1304 0.09,-0.003 0.069,-0.0319 0.088,7e-4 0.306,0.1541 0.138,0.0275 0.093,-0.0075 0.182,0.0348 -0.014,0.0081 0.014,0.0101 0.128,-0.0067 0.025,0.0195 0.094,-0.0038 0.037,0.0413 0.007,0.0412 0.181,0.0386 0.091,0.1119 0.06,-0.0158 0.088,0.0051 0.099,0.0764 0.039,-0.0105 -0.01,0.0134 0.06,0.0209 0.133,-0.0128 0.074,0.0534 0.005,0.0582 0.035,0.0161 0.068,-0.008 0.044,0.0386 0.009,0.0551 0.043,0.0291 0.004,0.0382 0.034,0.0467 -0.006,0.0384 -0.057,0.0501 -0.002,0.0432 -0.056,0.0295 -0.012,-0.0128 -0.009,0.0249 -0.142,-0.0204 -0.106,0.0251 -0.076,-0.0118 -0.027,-0.0475 0.012,0.0335 -0.013,0.0089 -0.14,0.0172 0.032,0.0351 -0.007,0.011 0.056,0.0181 -0.048,-0.0051 0.002,0.0208 -0.028,0.0231 0.01,0.0133 0.036,0.0038 0.007,0.0044 -0.04,-0.0054 -0.015,-0.009 0.003,-0.0113 0.025,-0.0266 -0.039,-0.0763 -0.085,0.0211 -0.084,-0.0198 0.021,0.0689 -0.027,0.0126 0.013,0.0203 -0.018,-0.0186 0.008,0.0126 -0.018,0.0083 -0.024,-0.013 0.023,-0.0106 -0.027,0.0096 -0.098,-0.0176 -0.159,0.0274 -0.218,-0.0549 -0.059,-0.0408 -0.123,0.0185 -0.364,-0.0837 -0.056,-0.0298 -0.226,-0.0231 -0.138,-0.0333 -0.486,0.0043 -0.176,0.0321 -0.298,-0.0139 -0.412,0.0471 -0.13,-0.0054 -0.473,0.0825 -0.254,-0.0988 -0.013,0.0107 0.009,-0.0134 -0.095,-0.0106 -0.071,0.025 0.005,0.022 -0.026,-0.012 0.007,-0.0121 -0.242,0.11 -0.013,0.116 -0.057,0.0797 -0.521,0.1697 -0.195,0.0035 -0.087,0.0895 -0.072,0.0168 -0.074,0.0981 -0.011,0.0028 -0.006,-0.0055 -0.027,6e-4 -0.004,9e-4 0.031,0.009 -0.207,-0.0443 -0.144,-0.0657 -0.018,-0.0485 -0.074,-0.0815 0.004,-0.0554 -0.066,-0.0308 -0.157,0.002 -0.073,-0.0202 -0.025,0.0277 -0.218,0.0345 0.013,0.0044 -0.009,0.015 -0.285,0.1553 0.008,0.0465 -0.051,0.0767 -0.121,0.128 -0.061,0.0365 0.023,0.0429 -0.072,0.1135 -0.038,0.0429 -0.086,0.0241 0.023,0.0608 -0.079,0.104 -0.082,0.0359 -0.199,0.223 -0.079,0.0055 -0.052,0.0135 -0.046,0.0729 -0.002,0.0758 -0.025,0.0456 0.004,0.0343 0.02,0.0061 -0.007,0.0512 -0.029,0.0564 -0.1,0.0959 0.011,-0.0035 -0.077,0.1047 -0.067,0.0185 0.008,0.026 -0.071,0.03 -0.018,-0.0085 0.003,0.0111 -0.093,0.0447 -0.049,-0.0078 -0.019,-0.0206 m 0.245,-0.7205 0,0.0034 0.007,0.0032 0,-0.0153 -0.007,0.0087 m 4.689,-1.4418 0.017,-0.005 0.011,0.0029 0.003,-4e-4 -0.016,-0.0033 -0.015,0.0058 m 0.341,-1.1439 0.009,0.0043 0.001,-5e-4 -0.003,-0.0026 -0.007,-0.0012 m -1.506,0.0512 0,6e-4 0.01,-8e-4 -0.006,-9e-4 -0.004,0.0011 m 0.52,-0.0661 0.009,0.0026 0.007,-0.0026 -0.012,-0.0072 -0.004,0.0072 m 4.091,1.1653 0.002,0.0013 0.003,-7e-4 0,-0.0026 -0.005,0.002"}]

},{}],3:[function(require,module,exports){
module.exports=[
	{"scene": 1, "scale": 90, "x": -120, "y": -80.8 },
	{"scene": 2, "scale": 50, "x": -114, "y": -76 },
	{"scene": 3, "scale": 20, "x": -110, "y": -66 },
	{"scene": 4, "scale": 17, "x": -115, "y": -63 },
	{"scene": 5, "scale": 35, "x": -120, "y": -77 },
	{"scene": 6, "scale": 35, "x": -110, "y": -79 },
	{"scene": 7, "scale": 4, "x": 15, "y": -80 },
	{"scene": 8, "scale": 200, "x": -118.5, "y": -83 },
	{"scene": 9, "scale": 150, "x": -117, "y": -82 },
	{"scene": 10, "scale": 70, "x": -118, "y": -79 },
	{"scene": 11, "scale": 30, "x": -104, "y": -81.5 },
	{"scene": 13, "scale": 55, "x": -116, "y": -76.5 },
	{"scene": 14, "scale": 32, "x": -117, "y": -76 },
	{"scene": 15, "scale": 17, "x": -115, "y": -63 },
	{"scene": 16, "scale": 35, "x": -107, "y": -75 },
	{"scene": 17, "scale": 17, "x": -115, "y": -63 },
	{"scene": 18, "scale": 17, "x": -115, "y": -63 },
	{"scene": 19, "scale": 50, "x": -115, "y": -76 },
	{"scene": 20, "scale": 17, "x": -115, "y": -63 },
	{"scene": 21, "scale": 35, "x": -120, "y": -77 },
	{"scene": 22, "scale": 26, "x": -113, "y": -75 },
	{"scene": 23, "scale": 28, "x": -114, "y": -78 },
	{"scene": 24, "scale": 170, "x": -117.8, "y": -83 },
	{"scene": 25, "scale": 20, "x": -102, "y": -67 },
	{"scene": 26, "scale": 17, "x": -115, "y": -63 },
	{"scene": 27, "scale": 20, "x": -100, "y": -76 },
	{"scene": 28, "scale": 25, "x": -98, "y": -79 },
	{"scene": 29, "scale": 70, "x": -117, "y": -79.5}
]

},{}],4:[function(require,module,exports){
module.exports=[
	{"s": 1,"t": "Frontières autour du Léman"},
	{"s": 2,"t": "Pays de Vaud"},
	{"s": 3,"t": "Confédération helvétique"},
	{"s": 4,"t": "Alliés de la confédération"},
	{"s": 5,"t": "République des sept dizains"},
	{"s": 6,"t": "Duché de Savoie"},
	{"s": 7,"t": "Royaume de Sardaigne"},
	{"s": 8,"t": "Genève"},
	{"s": 9,"t": "Royaume de France"},
	{"s": 10,"t": "Frontière de l'ancien régime"},
	{"s": 11,"t": "Invasion de la Savoie"},
	{"s": 12,"t": "Révolution vaudoise"},
	{"s": 13,"t": "République des dix dizains"},
	{"s": 14,"t": "République helvétique"},
	{"s": 15,"t": "Canton et département"},
	{"s": 16,"t": "L'Helvétique en guerre"},
	{"s": 17,"t": "Stecklikrieg"},
	{"s": 18,"t": "Fin de la République helvétique"},
	{"s": 19,"t": "L'acte de médiation"},
	{"s": 20,"t": "République rhôdanienne"},
	{"s": 21,"t": "Département du Simplon"},
	{"s": 22,"t": "Fin des guerres napoléoniennes"},
	{"s": 23,"t": "Extension de Genève"},
	{"s": 24,"t": "Trois cantons et une question"},
	{"s": 25,"t": "Frontières suisses"},
	{"s": 26,"t": "Le duché contre un royaume"},
	{"s": 27,"t": "L'annexion de la Savoie"},
	{"s": 28,"t": "Frontières actuelles"}
]

},{}],5:[function(require,module,exports){
module.exports = function () {
	var titles = document.getElementById('titles')
	var titleH = titles.offsetHeight

	var h = window.innerHeight - (titleH + 5)
	var w = window.innerWidth

	if(w/h > 2) {
		var width = h * 2
		var height = h
	} else {
		var height = w / 2
		var width = w
	}

	window.config.width = width
	window.config.height = height

	var margin = (w - width) / 2 
	window.config.svg.attr({
		id: 'map',
		width: width,
		height: height,
		style: 'margin-left:' + margin + 'px'
	})
	titles.style.width = width
	titles.style['margin-left'] = margin + 'px'
}

},{}],6:[function(require,module,exports){
var d3 = require('d3')
var scenes = require('../data/scenes.json')
var deco = require('../data/deco.json')
var titleData = require('../data/titles.json')

var colorScale=d3.scale.linear()
	.domain([0,1,2,3,4,5,6,7,8,9,10,11,12])
	.range([
			"white",
			"#808080",
			"#bfe3cb",
			"#b8d1d9",
			"#6e9eab",
			"#e7bd92",
			"#ffdfbe",
			"#d5b4ca",
			"#e992ca",
			"#e6e6e6",
			"#ffc7be",
			"#e79d92",
			"#82c997"
])


module.exports = function(scene) {
	document.getElementById('deco').innerHTML = ''

	var sceneIndex = scene - 1
	var s = scenes[sceneIndex]
	if(scene > 9) { var col = 'clSc' + scene } else { var col = 'clSc0' + scene } 

	var titles = document.getElementById('titles')
	var opt = ''
	for(i=0;i<titleData.length;i++) {
		var x = titleData[i]
		if(x.s === scene) { var sel = 'selected' } else { var sel = '' }
		opt = opt + '<option value="' + x.s + '" ' + sel + '>' + x.t + '</option>'
	}
	titles.innerHTML = opt
	titles.onchange = function() {
		window.location.hash = '#' + titles.value
	}

	var mapGroup = d3.select('g#map')
	mapGroup.transition().duration(1000)
		.attr('transform', 'scale(' + s.scale + ') translate(' + s.x + ',' + s.y + ')')

	var map = mapGroup.selectAll('path')
	map.transition().duration(500).delay(500)
		.attr('fill', function(d) { return colorScale(d[col])})
		.attr('stroke', function(d) { return colorScale(d[col])})
		.attr('stroke-width', '0.05')

	setTimeout(function() {
		var decoElements = addDeco(deco[sceneIndex].els)
		document.getElementById('deco').innerHTML = decoElements
	},900)
}

function addDeco(els) {
	var str = ''
	for(i=0;i<els.length;i++) {
		var e = els[i]
		var styleString = ''
		for(j=0;j<e.style.length;j++) {
			styleString = styleString + e.style[j].key + ':' + e.style[j].val + ';'
		}

		if(e.name === 'path') {
			str = str 
				+ '<path d="' + e.d 
				+ '" style="' + styleString 
				+ '"></path>' 
		} else if(e.name === 'text') {
			str = str 
				+ '<text x="' + e.x 
				+ '" y="' + e.y 
				+ '" style="' + styleString + '">' 
				+ e.text + '</text>'
		} else if(e.name === 'rect') {
			str = str + '<rect x="' 
				+ e.x + '" y="' 
				+ e.y + '" width="' + e.width 
				+ '" height="' + e.height 
				+ '" style="' + styleString 
				+ '"></rect>'
		}

	}
	return str
}

},{"../data/deco.json":1,"../data/scenes.json":3,"../data/titles.json":4,"d3":8}],7:[function(require,module,exports){
var d3 = require('d3')
var data = require('./data/map.json')
var scenes = require('./lib/scenes')
var resize = require('./lib/resize')

window.onload = function() {
	window.config = {}

	var body = d3.select('body')
	var svg = body.append('svg')
		.attr({
			viewBox: '0 0 1000 500',
		})
	window.config.svg = svg

	var mapGroup = svg.append('g').attr('id','map')
	var decoGroup = svg.append('g').attr('id','deco')

	var map = mapGroup.selectAll('path')
		.data(data)
		.enter()
		.append('path')
		.attr('d', function(d) { return d.chemin })
		.attr('fill', 'white')
		.attr('stroke-width', 0)
	if(window.location.hash === '#1') {
		window.location.hash = ''
	}

	setTimeout(function() { 
		window.location.hash = 1
		resize()
	},10)

	var hammertime = new Hammer(document.body, {})
	hammertime.on('swipeleft', function() { next() })
	hammertime.on('swiperight', function() { prev() })

	document.body.addEventListener('keyup', function(e) {
		if(e.keyCode === 39) { next() }
		else if(e.keyCode === 37) { prev() }
	})

}


window.onresize = function() { 
	resize()
}

window.onhashchange = function() {
	var scene = +window.location.hash.split('#')[1]
	scenes(scene)
}

function next() {
		var current = +window.location.hash.split('#')[1]
		var s = current + 1
		if(s > 28) { s = 1 }
		window.location.hash = s
}

function prev() {
		var current = +window.location.hash.split('#')[1]
		var s = current - 1
		if(s < 1) { s = 28 }
		window.location.hash = s
}








},{"./data/map.json":2,"./lib/resize":5,"./lib/scenes":6,"d3":8}],8:[function(require,module,exports){
!function() {
  var d3 = {
    version: "3.5.14"
  };
  var d3_arraySlice = [].slice, d3_array = function(list) {
    return d3_arraySlice.call(list);
  };
  var d3_document = this.document;
  function d3_documentElement(node) {
    return node && (node.ownerDocument || node.document || node).documentElement;
  }
  function d3_window(node) {
    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
  }
  if (d3_document) {
    try {
      d3_array(d3_document.documentElement.childNodes)[0].nodeType;
    } catch (e) {
      d3_array = function(list) {
        var i = list.length, array = new Array(i);
        while (i--) array[i] = list[i];
        return array;
      };
    }
  }
  if (!Date.now) Date.now = function() {
    return +new Date();
  };
  if (d3_document) {
    try {
      d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
    } catch (error) {
      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
      d3_element_prototype.setAttribute = function(name, value) {
        d3_element_setAttribute.call(this, name, value + "");
      };
      d3_element_prototype.setAttributeNS = function(space, local, value) {
        d3_element_setAttributeNS.call(this, space, local, value + "");
      };
      d3_style_prototype.setProperty = function(name, value, priority) {
        d3_style_setProperty.call(this, name, value + "", priority);
      };
    }
  }
  d3.ascending = d3_ascending;
  function d3_ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }
  d3.descending = function(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  };
  d3.min = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
    }
    return a;
  };
  d3.max = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
    }
    return a;
  };
  d3.extent = function(array, f) {
    var i = -1, n = array.length, a, b, c;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = c = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = c = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    }
    return [ a, c ];
  };
  function d3_number(x) {
    return x === null ? NaN : +x;
  }
  function d3_numeric(x) {
    return !isNaN(x);
  }
  d3.sum = function(array, f) {
    var s = 0, n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = +array[i])) s += a;
    } else {
      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
    }
    return s;
  };
  d3.mean = function(array, f) {
    var s = 0, n = array.length, a, i = -1, j = n;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;
    }
    if (j) return s / j;
  };
  d3.quantile = function(values, p) {
    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
    return e ? v + e * (values[h] - v) : v;
  };
  d3.median = function(array, f) {
    var numbers = [], n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
    }
    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
  };
  d3.variance = function(array, f) {
    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
    if (arguments.length === 1) {
      while (++i < n) {
        if (d3_numeric(a = d3_number(array[i]))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    } else {
      while (++i < n) {
        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    }
    if (j > 1) return s / (j - 1);
  };
  d3.deviation = function() {
    var v = d3.variance.apply(this, arguments);
    return v ? Math.sqrt(v) : v;
  };
  function d3_bisector(compare) {
    return {
      left: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
        }
        return lo;
      },
      right: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
        }
        return lo;
      }
    };
  }
  var d3_bisect = d3_bisector(d3_ascending);
  d3.bisectLeft = d3_bisect.left;
  d3.bisect = d3.bisectRight = d3_bisect.right;
  d3.bisector = function(f) {
    return d3_bisector(f.length === 1 ? function(d, x) {
      return d3_ascending(f(d), x);
    } : f);
  };
  d3.shuffle = function(array, i0, i1) {
    if ((m = arguments.length) < 3) {
      i1 = array.length;
      if (m < 2) i0 = 0;
    }
    var m = i1 - i0, t, i;
    while (m) {
      i = Math.random() * m-- | 0;
      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
    }
    return array;
  };
  d3.permute = function(array, indexes) {
    var i = indexes.length, permutes = new Array(i);
    while (i--) permutes[i] = array[indexes[i]];
    return permutes;
  };
  d3.pairs = function(array) {
    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
    return pairs;
  };
  d3.zip = function() {
    if (!(n = arguments.length)) return [];
    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m; ) {
      for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n; ) {
        zip[j] = arguments[j][i];
      }
    }
    return zips;
  };
  function d3_zipLength(d) {
    return d.length;
  }
  d3.transpose = function(matrix) {
    return d3.zip.apply(d3, matrix);
  };
  d3.keys = function(map) {
    var keys = [];
    for (var key in map) keys.push(key);
    return keys;
  };
  d3.values = function(map) {
    var values = [];
    for (var key in map) values.push(map[key]);
    return values;
  };
  d3.entries = function(map) {
    var entries = [];
    for (var key in map) entries.push({
      key: key,
      value: map[key]
    });
    return entries;
  };
  d3.merge = function(arrays) {
    var n = arrays.length, m, i = -1, j = 0, merged, array;
    while (++i < n) j += arrays[i].length;
    merged = new Array(j);
    while (--n >= 0) {
      array = arrays[n];
      m = array.length;
      while (--m >= 0) {
        merged[--j] = array[m];
      }
    }
    return merged;
  };
  var abs = Math.abs;
  d3.range = function(start, stop, step) {
    if (arguments.length < 3) {
      step = 1;
      if (arguments.length < 2) {
        stop = start;
        start = 0;
      }
    }
    if ((stop - start) / step === Infinity) throw new Error("infinite range");
    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
    start *= k, stop *= k, step *= k;
    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
    return range;
  };
  function d3_range_integerScale(x) {
    var k = 1;
    while (x * k % 1) k *= 10;
    return k;
  }
  function d3_class(ctor, properties) {
    for (var key in properties) {
      Object.defineProperty(ctor.prototype, key, {
        value: properties[key],
        enumerable: false
      });
    }
  }
  d3.map = function(object, f) {
    var map = new d3_Map();
    if (object instanceof d3_Map) {
      object.forEach(function(key, value) {
        map.set(key, value);
      });
    } else if (Array.isArray(object)) {
      var i = -1, n = object.length, o;
      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);
    } else {
      for (var key in object) map.set(key, object[key]);
    }
    return map;
  };
  function d3_Map() {
    this._ = Object.create(null);
  }
  var d3_map_proto = "__proto__", d3_map_zero = "\x00";
  d3_class(d3_Map, {
    has: d3_map_has,
    get: function(key) {
      return this._[d3_map_escape(key)];
    },
    set: function(key, value) {
      return this._[d3_map_escape(key)] = value;
    },
    remove: d3_map_remove,
    keys: d3_map_keys,
    values: function() {
      var values = [];
      for (var key in this._) values.push(this._[key]);
      return values;
    },
    entries: function() {
      var entries = [];
      for (var key in this._) entries.push({
        key: d3_map_unescape(key),
        value: this._[key]
      });
      return entries;
    },
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
    }
  });
  function d3_map_escape(key) {
    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
  }
  function d3_map_unescape(key) {
    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
  }
  function d3_map_has(key) {
    return d3_map_escape(key) in this._;
  }
  function d3_map_remove(key) {
    return (key = d3_map_escape(key)) in this._ && delete this._[key];
  }
  function d3_map_keys() {
    var keys = [];
    for (var key in this._) keys.push(d3_map_unescape(key));
    return keys;
  }
  function d3_map_size() {
    var size = 0;
    for (var key in this._) ++size;
    return size;
  }
  function d3_map_empty() {
    for (var key in this._) return false;
    return true;
  }
  d3.nest = function() {
    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
    function map(mapType, array, depth) {
      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
      while (++i < n) {
        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
          values.push(object);
        } else {
          valuesByKey.set(keyValue, [ object ]);
        }
      }
      if (mapType) {
        object = mapType();
        setter = function(keyValue, values) {
          object.set(keyValue, map(mapType, values, depth));
        };
      } else {
        object = {};
        setter = function(keyValue, values) {
          object[keyValue] = map(mapType, values, depth);
        };
      }
      valuesByKey.forEach(setter);
      return object;
    }
    function entries(map, depth) {
      if (depth >= keys.length) return map;
      var array = [], sortKey = sortKeys[depth++];
      map.forEach(function(key, keyMap) {
        array.push({
          key: key,
          values: entries(keyMap, depth)
        });
      });
      return sortKey ? array.sort(function(a, b) {
        return sortKey(a.key, b.key);
      }) : array;
    }
    nest.map = function(array, mapType) {
      return map(mapType, array, 0);
    };
    nest.entries = function(array) {
      return entries(map(d3.map, array, 0), 0);
    };
    nest.key = function(d) {
      keys.push(d);
      return nest;
    };
    nest.sortKeys = function(order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    };
    nest.sortValues = function(order) {
      sortValues = order;
      return nest;
    };
    nest.rollup = function(f) {
      rollup = f;
      return nest;
    };
    return nest;
  };
  d3.set = function(array) {
    var set = new d3_Set();
    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
    return set;
  };
  function d3_Set() {
    this._ = Object.create(null);
  }
  d3_class(d3_Set, {
    has: d3_map_has,
    add: function(key) {
      this._[d3_map_escape(key += "")] = true;
      return key;
    },
    remove: d3_map_remove,
    values: d3_map_keys,
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key));
    }
  });
  d3.behavior = {};
  function d3_identity(d) {
    return d;
  }
  d3.rebind = function(target, source) {
    var i = 1, n = arguments.length, method;
    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
    return target;
  };
  function d3_rebind(target, source, method) {
    return function() {
      var value = method.apply(source, arguments);
      return value === source ? target : value;
    };
  }
  function d3_vendorSymbol(object, name) {
    if (name in object) return name;
    name = name.charAt(0).toUpperCase() + name.slice(1);
    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
      var prefixName = d3_vendorPrefixes[i] + name;
      if (prefixName in object) return prefixName;
    }
  }
  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
  function d3_noop() {}
  d3.dispatch = function() {
    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    return dispatch;
  };
  function d3_dispatch() {}
  d3_dispatch.prototype.on = function(type, listener) {
    var i = type.indexOf("."), name = "";
    if (i >= 0) {
      name = type.slice(i + 1);
      type = type.slice(0, i);
    }
    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
    if (arguments.length === 2) {
      if (listener == null) for (type in this) {
        if (this.hasOwnProperty(type)) this[type].on(name, null);
      }
      return this;
    }
  };
  function d3_dispatch_event(dispatch) {
    var listeners = [], listenerByName = new d3_Map();
    function event() {
      var z = listeners, i = -1, n = z.length, l;
      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
      return dispatch;
    }
    event.on = function(name, listener) {
      var l = listenerByName.get(name), i;
      if (arguments.length < 2) return l && l.on;
      if (l) {
        l.on = null;
        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
        listenerByName.remove(name);
      }
      if (listener) listeners.push(listenerByName.set(name, {
        on: listener
      }));
      return dispatch;
    };
    return event;
  }
  d3.event = null;
  function d3_eventPreventDefault() {
    d3.event.preventDefault();
  }
  function d3_eventSource() {
    var e = d3.event, s;
    while (s = e.sourceEvent) e = s;
    return e;
  }
  function d3_eventDispatch(target) {
    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    dispatch.of = function(thiz, argumentz) {
      return function(e1) {
        try {
          var e0 = e1.sourceEvent = d3.event;
          e1.target = target;
          d3.event = e1;
          dispatch[e1.type].apply(thiz, argumentz);
        } finally {
          d3.event = e0;
        }
      };
    };
    return dispatch;
  }
  d3.requote = function(s) {
    return s.replace(d3_requote_re, "\\$&");
  };
  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
  var d3_subclass = {}.__proto__ ? function(object, prototype) {
    object.__proto__ = prototype;
  } : function(object, prototype) {
    for (var property in prototype) object[property] = prototype[property];
  };
  function d3_selection(groups) {
    d3_subclass(groups, d3_selectionPrototype);
    return groups;
  }
  var d3_select = function(s, n) {
    return n.querySelector(s);
  }, d3_selectAll = function(s, n) {
    return n.querySelectorAll(s);
  }, d3_selectMatches = function(n, s) {
    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];
    d3_selectMatches = function(n, s) {
      return d3_selectMatcher.call(n, s);
    };
    return d3_selectMatches(n, s);
  };
  if (typeof Sizzle === "function") {
    d3_select = function(s, n) {
      return Sizzle(s, n)[0] || null;
    };
    d3_selectAll = Sizzle;
    d3_selectMatches = Sizzle.matchesSelector;
  }
  d3.selection = function() {
    return d3.select(d3_document.documentElement);
  };
  var d3_selectionPrototype = d3.selection.prototype = [];
  d3_selectionPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, group, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selector(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_select(selector, this);
    };
  }
  d3_selectionPrototype.selectAll = function(selector) {
    var subgroups = [], subgroup, node;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
          subgroup.parentNode = node;
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selectorAll(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_selectAll(selector, this);
    };
  }
  var d3_nsPrefix = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: "http://www.w3.org/1999/xhtml",
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };
  d3.ns = {
    prefix: d3_nsPrefix,
    qualify: function(name) {
      var i = name.indexOf(":"), prefix = name;
      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
      return d3_nsPrefix.hasOwnProperty(prefix) ? {
        space: d3_nsPrefix[prefix],
        local: name
      } : name;
    }
  };
  d3_selectionPrototype.attr = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node();
        name = d3.ns.qualify(name);
        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
      }
      for (value in name) this.each(d3_selection_attr(value, name[value]));
      return this;
    }
    return this.each(d3_selection_attr(name, value));
  };
  function d3_selection_attr(name, value) {
    name = d3.ns.qualify(name);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrConstant() {
      this.setAttribute(name, value);
    }
    function attrConstantNS() {
      this.setAttributeNS(name.space, name.local, value);
    }
    function attrFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
    }
    function attrFunctionNS() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
    }
    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
  }
  function d3_collapse(s) {
    return s.trim().replace(/\s+/g, " ");
  }
  d3_selectionPrototype.classed = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
        if (value = node.classList) {
          while (++i < n) if (!value.contains(name[i])) return false;
        } else {
          value = node.getAttribute("class");
          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
        }
        return true;
      }
      for (value in name) this.each(d3_selection_classed(value, name[value]));
      return this;
    }
    return this.each(d3_selection_classed(name, value));
  };
  function d3_selection_classedRe(name) {
    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
  }
  function d3_selection_classes(name) {
    return (name + "").trim().split(/^|\s+/);
  }
  function d3_selection_classed(name, value) {
    name = d3_selection_classes(name).map(d3_selection_classedName);
    var n = name.length;
    function classedConstant() {
      var i = -1;
      while (++i < n) name[i](this, value);
    }
    function classedFunction() {
      var i = -1, x = value.apply(this, arguments);
      while (++i < n) name[i](this, x);
    }
    return typeof value === "function" ? classedFunction : classedConstant;
  }
  function d3_selection_classedName(name) {
    var re = d3_selection_classedRe(name);
    return function(node, value) {
      if (c = node.classList) return value ? c.add(name) : c.remove(name);
      var c = node.getAttribute("class") || "";
      if (value) {
        re.lastIndex = 0;
        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
      } else {
        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
      }
    };
  }
  d3_selectionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
        return this;
      }
      if (n < 2) {
        var node = this.node();
        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
      }
      priority = "";
    }
    return this.each(d3_selection_style(name, value, priority));
  };
  function d3_selection_style(name, value, priority) {
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleConstant() {
      this.style.setProperty(name, value, priority);
    }
    function styleFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
    }
    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
  }
  d3_selectionPrototype.property = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") return this.node()[name];
      for (value in name) this.each(d3_selection_property(value, name[value]));
      return this;
    }
    return this.each(d3_selection_property(name, value));
  };
  function d3_selection_property(name, value) {
    function propertyNull() {
      delete this[name];
    }
    function propertyConstant() {
      this[name] = value;
    }
    function propertyFunction() {
      var x = value.apply(this, arguments);
      if (x == null) delete this[name]; else this[name] = x;
    }
    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
  }
  d3_selectionPrototype.text = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    } : value == null ? function() {
      this.textContent = "";
    } : function() {
      this.textContent = value;
    }) : this.node().textContent;
  };
  d3_selectionPrototype.html = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    } : value == null ? function() {
      this.innerHTML = "";
    } : function() {
      this.innerHTML = value;
    }) : this.node().innerHTML;
  };
  d3_selectionPrototype.append = function(name) {
    name = d3_selection_creator(name);
    return this.select(function() {
      return this.appendChild(name.apply(this, arguments));
    });
  };
  function d3_selection_creator(name) {
    function create() {
      var document = this.ownerDocument, namespace = this.namespaceURI;
      return namespace && namespace !== document.documentElement.namespaceURI ? document.createElementNS(namespace, name) : document.createElement(name);
    }
    function createNS() {
      return this.ownerDocument.createElementNS(name.space, name.local);
    }
    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
  }
  d3_selectionPrototype.insert = function(name, before) {
    name = d3_selection_creator(name);
    before = d3_selection_selector(before);
    return this.select(function() {
      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
    });
  };
  d3_selectionPrototype.remove = function() {
    return this.each(d3_selectionRemove);
  };
  function d3_selectionRemove() {
    var parent = this.parentNode;
    if (parent) parent.removeChild(this);
  }
  d3_selectionPrototype.data = function(value, key) {
    var i = -1, n = this.length, group, node;
    if (!arguments.length) {
      value = new Array(n = (group = this[0]).length);
      while (++i < n) {
        if (node = group[i]) {
          value[i] = node.__data__;
        }
      }
      return value;
    }
    function bind(group, groupData) {
      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
      if (key) {
        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;
        for (i = -1; ++i < n; ) {
          if (node = group[i]) {
            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {
              exitNodes[i] = node;
            } else {
              nodeByKeyValue.set(keyValue, node);
            }
            keyValues[i] = keyValue;
          }
        }
        for (i = -1; ++i < m; ) {
          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          } else if (node !== true) {
            updateNodes[i] = node;
            node.__data__ = nodeData;
          }
          nodeByKeyValue.set(keyValue, true);
        }
        for (i = -1; ++i < n; ) {
          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {
            exitNodes[i] = group[i];
          }
        }
      } else {
        for (i = -1; ++i < n0; ) {
          node = group[i];
          nodeData = groupData[i];
          if (node) {
            node.__data__ = nodeData;
            updateNodes[i] = node;
          } else {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
        }
        for (;i < m; ++i) {
          enterNodes[i] = d3_selection_dataNode(groupData[i]);
        }
        for (;i < n; ++i) {
          exitNodes[i] = group[i];
        }
      }
      enterNodes.update = updateNodes;
      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
      enter.push(enterNodes);
      update.push(updateNodes);
      exit.push(exitNodes);
    }
    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
    if (typeof value === "function") {
      while (++i < n) {
        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
      }
    } else {
      while (++i < n) {
        bind(group = this[i], value);
      }
    }
    update.enter = function() {
      return enter;
    };
    update.exit = function() {
      return exit;
    };
    return update;
  };
  function d3_selection_dataNode(data) {
    return {
      __data__: data
    };
  }
  d3_selectionPrototype.datum = function(value) {
    return arguments.length ? this.property("__data__", value) : this.property("__data__");
  };
  d3_selectionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_filter(selector) {
    return function() {
      return d3_selectMatches(this, selector);
    };
  }
  d3_selectionPrototype.order = function() {
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
        if (node = group[i]) {
          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  };
  d3_selectionPrototype.sort = function(comparator) {
    comparator = d3_selection_sortComparator.apply(this, arguments);
    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
    return this.order();
  };
  function d3_selection_sortComparator(comparator) {
    if (!arguments.length) comparator = d3_ascending;
    return function(a, b) {
      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
    };
  }
  d3_selectionPrototype.each = function(callback) {
    return d3_selection_each(this, function(node, i, j) {
      callback.call(node, node.__data__, i, j);
    });
  };
  function d3_selection_each(groups, callback) {
    for (var j = 0, m = groups.length; j < m; j++) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
        if (node = group[i]) callback(node, i, j);
      }
    }
    return groups;
  }
  d3_selectionPrototype.call = function(callback) {
    var args = d3_array(arguments);
    callback.apply(args[0] = this, args);
    return this;
  };
  d3_selectionPrototype.empty = function() {
    return !this.node();
  };
  d3_selectionPrototype.node = function() {
    for (var j = 0, m = this.length; j < m; j++) {
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        var node = group[i];
        if (node) return node;
      }
    }
    return null;
  };
  d3_selectionPrototype.size = function() {
    var n = 0;
    d3_selection_each(this, function() {
      ++n;
    });
    return n;
  };
  function d3_selection_enter(selection) {
    d3_subclass(selection, d3_selection_enterPrototype);
    return selection;
  }
  var d3_selection_enterPrototype = [];
  d3.selection.enter = d3_selection_enter;
  d3.selection.enter.prototype = d3_selection_enterPrototype;
  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
  d3_selection_enterPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, upgroup, group, node;
    for (var j = -1, m = this.length; ++j < m; ) {
      upgroup = (group = this[j]).update;
      subgroups.push(subgroup = []);
      subgroup.parentNode = group.parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
          subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  d3_selection_enterPrototype.insert = function(name, before) {
    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
    return d3_selectionPrototype.insert.call(this, name, before);
  };
  function d3_selection_enterInsertBefore(enter) {
    var i0, j0;
    return function(d, i, j) {
      var group = enter[j].update, n = group.length, node;
      if (j != j0) j0 = j, i0 = 0;
      if (i >= i0) i0 = i + 1;
      while (!(node = group[i0]) && ++i0 < n) ;
      return node;
    };
  }
  d3.select = function(node) {
    var group;
    if (typeof node === "string") {
      group = [ d3_select(node, d3_document) ];
      group.parentNode = d3_document.documentElement;
    } else {
      group = [ node ];
      group.parentNode = d3_documentElement(node);
    }
    return d3_selection([ group ]);
  };
  d3.selectAll = function(nodes) {
    var group;
    if (typeof nodes === "string") {
      group = d3_array(d3_selectAll(nodes, d3_document));
      group.parentNode = d3_document.documentElement;
    } else {
      group = d3_array(nodes);
      group.parentNode = null;
    }
    return d3_selection([ group ]);
  };
  d3_selectionPrototype.on = function(type, listener, capture) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof type !== "string") {
        if (n < 2) listener = false;
        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
        return this;
      }
      if (n < 2) return (n = this.node()["__on" + type]) && n._;
      capture = false;
    }
    return this.each(d3_selection_on(type, listener, capture));
  };
  function d3_selection_on(type, listener, capture) {
    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
    if (i > 0) type = type.slice(0, i);
    var filter = d3_selection_onFilters.get(type);
    if (filter) type = filter, wrap = d3_selection_onFilter;
    function onRemove() {
      var l = this[name];
      if (l) {
        this.removeEventListener(type, l, l.$);
        delete this[name];
      }
    }
    function onAdd() {
      var l = wrap(listener, d3_array(arguments));
      onRemove.call(this);
      this.addEventListener(type, this[name] = l, l.$ = capture);
      l._ = listener;
    }
    function removeAll() {
      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
      for (var name in this) {
        if (match = name.match(re)) {
          var l = this[name];
          this.removeEventListener(match[1], l, l.$);
          delete this[name];
        }
      }
    }
    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
  }
  var d3_selection_onFilters = d3.map({
    mouseenter: "mouseover",
    mouseleave: "mouseout"
  });
  if (d3_document) {
    d3_selection_onFilters.forEach(function(k) {
      if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
    });
  }
  function d3_selection_onListener(listener, argumentz) {
    return function(e) {
      var o = d3.event;
      d3.event = e;
      argumentz[0] = this.__data__;
      try {
        listener.apply(this, argumentz);
      } finally {
        d3.event = o;
      }
    };
  }
  function d3_selection_onFilter(listener, argumentz) {
    var l = d3_selection_onListener(listener, argumentz);
    return function(e) {
      var target = this, related = e.relatedTarget;
      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
        l.call(target, e);
      }
    };
  }
  var d3_event_dragSelect, d3_event_dragId = 0;
  function d3_event_dragSuppress(node) {
    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
    if (d3_event_dragSelect == null) {
      d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
    }
    if (d3_event_dragSelect) {
      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];
      style[d3_event_dragSelect] = "none";
    }
    return function(suppressClick) {
      w.on(name, null);
      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
      if (suppressClick) {
        var off = function() {
          w.on(click, null);
        };
        w.on(click, function() {
          d3_eventPreventDefault();
          off();
        }, true);
        setTimeout(off, 0);
      }
    };
  }
  d3.mouse = function(container) {
    return d3_mousePoint(container, d3_eventSource());
  };
  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
  function d3_mousePoint(container, e) {
    if (e.changedTouches) e = e.changedTouches[0];
    var svg = container.ownerSVGElement || container;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      if (d3_mouse_bug44083 < 0) {
        var window = d3_window(container);
        if (window.scrollX || window.scrollY) {
          svg = d3.select("body").append("svg").style({
            position: "absolute",
            top: 0,
            left: 0,
            margin: 0,
            padding: 0,
            border: "none"
          }, "important");
          var ctm = svg[0][0].getScreenCTM();
          d3_mouse_bug44083 = !(ctm.f || ctm.e);
          svg.remove();
        }
      }
      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
      point.y = e.clientY;
      point = point.matrixTransform(container.getScreenCTM().inverse());
      return [ point.x, point.y ];
    }
    var rect = container.getBoundingClientRect();
    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
  }
  d3.touch = function(container, touches, identifier) {
    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
      if ((touch = touches[i]).identifier === identifier) {
        return d3_mousePoint(container, touch);
      }
    }
  };
  d3.behavior.drag = function() {
    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");
    function drag() {
      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
    }
    function dragstart(id, position, subject, move, end) {
      return function() {
        var that = this, target = d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);
        if (origin) {
          dragOffset = origin.apply(that, arguments);
          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
        } else {
          dragOffset = [ 0, 0 ];
        }
        dispatch({
          type: "dragstart"
        });
        function moved() {
          var position1 = position(parent, dragId), dx, dy;
          if (!position1) return;
          dx = position1[0] - position0[0];
          dy = position1[1] - position0[1];
          dragged |= dx | dy;
          position0 = position1;
          dispatch({
            type: "drag",
            x: position1[0] + dragOffset[0],
            y: position1[1] + dragOffset[1],
            dx: dx,
            dy: dy
          });
        }
        function ended() {
          if (!position(parent, dragId)) return;
          dragSubject.on(move + dragName, null).on(end + dragName, null);
          dragRestore(dragged);
          dispatch({
            type: "dragend"
          });
        }
      };
    }
    drag.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return drag;
    };
    return d3.rebind(drag, event, "on");
  };
  function d3_behavior_dragTouchId() {
    return d3.event.changedTouches[0].identifier;
  }
  d3.touches = function(container, touches) {
    if (arguments.length < 2) touches = d3_eventSource().touches;
    return touches ? d3_array(touches).map(function(touch) {
      var point = d3_mousePoint(container, touch);
      point.identifier = touch.identifier;
      return point;
    }) : [];
  };
  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;
  function d3_sgn(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  }
  function d3_cross2d(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
  }
  function d3_acos(x) {
    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
  }
  function d3_asin(x) {
    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
  }
  function d3_sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }
  function d3_cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }
  function d3_tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  }
  function d3_haversin(x) {
    return (x = Math.sin(x / 2)) * x;
  }
  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
  d3.interpolateZoom = function(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < ε2) {
      S = Math.log(w1 / w0) / ρ;
      i = function(t) {
        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / ρ;
      i = function(t) {
        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
      };
    }
    i.duration = S * 1e3;
    return i;
  };
  d3.behavior.zoom = function() {
    var view = {
      x: 0,
      y: 0,
      k: 1
    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
    if (!d3_behavior_zoomWheel) {
      d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
      }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return d3.event.wheelDelta;
      }, "mousewheel") : (d3_behavior_zoomDelta = function() {
        return -d3.event.detail;
      }, "MozMousePixelScroll");
    }
    function zoom(g) {
      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
    }
    zoom.event = function(g) {
      g.each(function() {
        var dispatch = event.of(this, arguments), view1 = view;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.zoom", function() {
            view = this.__chart__ || {
              x: 0,
              y: 0,
              k: 1
            };
            zoomstarted(dispatch);
          }).tween("zoom:zoom", function() {
            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
            return function(t) {
              var l = i(t), k = dx / l[2];
              this.__chart__ = view = {
                x: cx - l[0] * k,
                y: cy - l[1] * k,
                k: k
              };
              zoomed(dispatch);
            };
          }).each("interrupt.zoom", function() {
            zoomended(dispatch);
          }).each("end.zoom", function() {
            zoomended(dispatch);
          });
        } else {
          this.__chart__ = view;
          zoomstarted(dispatch);
          zoomed(dispatch);
          zoomended(dispatch);
        }
      });
    };
    zoom.translate = function(_) {
      if (!arguments.length) return [ view.x, view.y ];
      view = {
        x: +_[0],
        y: +_[1],
        k: view.k
      };
      rescale();
      return zoom;
    };
    zoom.scale = function(_) {
      if (!arguments.length) return view.k;
      view = {
        x: view.x,
        y: view.y,
        k: null
      };
      scaleTo(+_);
      rescale();
      return zoom;
    };
    zoom.scaleExtent = function(_) {
      if (!arguments.length) return scaleExtent;
      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.center = function(_) {
      if (!arguments.length) return center;
      center = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.size = function(_) {
      if (!arguments.length) return size;
      size = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.duration = function(_) {
      if (!arguments.length) return duration;
      duration = +_;
      return zoom;
    };
    zoom.x = function(z) {
      if (!arguments.length) return x1;
      x1 = z;
      x0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    zoom.y = function(z) {
      if (!arguments.length) return y1;
      y1 = z;
      y0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    function location(p) {
      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
    }
    function point(l) {
      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
    }
    function scaleTo(s) {
      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
    }
    function translateTo(p, l) {
      l = point(l);
      view.x += p[0] - l[0];
      view.y += p[1] - l[1];
    }
    function zoomTo(that, p, l, k) {
      that.__chart__ = {
        x: view.x,
        y: view.y,
        k: view.k
      };
      scaleTo(Math.pow(2, k));
      translateTo(center0 = p, l);
      that = d3.select(that);
      if (duration > 0) that = that.transition().duration(duration);
      that.call(zoom.event);
    }
    function rescale() {
      if (x1) x1.domain(x0.range().map(function(x) {
        return (x - view.x) / view.k;
      }).map(x0.invert));
      if (y1) y1.domain(y0.range().map(function(y) {
        return (y - view.y) / view.k;
      }).map(y0.invert));
    }
    function zoomstarted(dispatch) {
      if (!zooming++) dispatch({
        type: "zoomstart"
      });
    }
    function zoomed(dispatch) {
      rescale();
      dispatch({
        type: "zoom",
        scale: view.k,
        translate: [ view.x, view.y ]
      });
    }
    function zoomended(dispatch) {
      if (!--zooming) dispatch({
        type: "zoomend"
      }), center0 = null;
    }
    function mousedowned() {
      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);
      d3_selection_interrupt.call(that);
      zoomstarted(dispatch);
      function moved() {
        dragged = 1;
        translateTo(d3.mouse(that), location0);
        zoomed(dispatch);
      }
      function ended() {
        subject.on(mousemove, null).on(mouseup, null);
        dragRestore(dragged);
        zoomended(dispatch);
      }
    }
    function touchstarted() {
      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);
      started();
      zoomstarted(dispatch);
      subject.on(mousedown, null).on(touchstart, started);
      function relocate() {
        var touches = d3.touches(that);
        scale0 = view.k;
        touches.forEach(function(t) {
          if (t.identifier in locations0) locations0[t.identifier] = location(t);
        });
        return touches;
      }
      function started() {
        var target = d3.event.target;
        d3.select(target).on(touchmove, moved).on(touchend, ended);
        targets.push(target);
        var changed = d3.event.changedTouches;
        for (var i = 0, n = changed.length; i < n; ++i) {
          locations0[changed[i].identifier] = null;
        }
        var touches = relocate(), now = Date.now();
        if (touches.length === 1) {
          if (now - touchtime < 500) {
            var p = touches[0];
            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
            d3_eventPreventDefault();
          }
          touchtime = now;
        } else if (touches.length > 1) {
          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
          distance0 = dx * dx + dy * dy;
        }
      }
      function moved() {
        var touches = d3.touches(that), p0, l0, p1, l1;
        d3_selection_interrupt.call(that);
        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
          p1 = touches[i];
          if (l1 = locations0[p1.identifier]) {
            if (l0) break;
            p0 = p1, l0 = l1;
          }
        }
        if (l1) {
          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
          scaleTo(scale1 * scale0);
        }
        touchtime = null;
        translateTo(p0, l0);
        zoomed(dispatch);
      }
      function ended() {
        if (d3.event.touches.length) {
          var changed = d3.event.changedTouches;
          for (var i = 0, n = changed.length; i < n; ++i) {
            delete locations0[changed[i].identifier];
          }
          for (var identifier in locations0) {
            return void relocate();
          }
        }
        d3.selectAll(targets).on(zoomName, null);
        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
        dragRestore();
        zoomended(dispatch);
      }
    }
    function mousewheeled() {
      var dispatch = event.of(this, arguments);
      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), 
      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
      mousewheelTimer = setTimeout(function() {
        mousewheelTimer = null;
        zoomended(dispatch);
      }, 50);
      d3_eventPreventDefault();
      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
      translateTo(center0, translate0);
      zoomed(dispatch);
    }
    function dblclicked() {
      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;
      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
    }
    return d3.rebind(zoom, event, "on");
  };
  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;
  d3.color = d3_color;
  function d3_color() {}
  d3_color.prototype.toString = function() {
    return this.rgb() + "";
  };
  d3.hsl = d3_hsl;
  function d3_hsl(h, s, l) {
    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
  }
  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
  d3_hslPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, this.l / k);
  };
  d3_hslPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, k * this.l);
  };
  d3_hslPrototype.rgb = function() {
    return d3_hsl_rgb(this.h, this.s, this.l);
  };
  function d3_hsl_rgb(h, s, l) {
    var m1, m2;
    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
    l = l < 0 ? 0 : l > 1 ? 1 : l;
    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
    m1 = 2 * l - m2;
    function v(h) {
      if (h > 360) h -= 360; else if (h < 0) h += 360;
      if (h < 60) return m1 + (m2 - m1) * h / 60;
      if (h < 180) return m2;
      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
      return m1;
    }
    function vv(h) {
      return Math.round(v(h) * 255);
    }
    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
  }
  d3.hcl = d3_hcl;
  function d3_hcl(h, c, l) {
    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
  }
  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
  d3_hclPrototype.brighter = function(k) {
    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.darker = function(k) {
    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.rgb = function() {
    return d3_hcl_lab(this.h, this.c, this.l).rgb();
  };
  function d3_hcl_lab(h, c, l) {
    if (isNaN(h)) h = 0;
    if (isNaN(c)) c = 0;
    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
  }
  d3.lab = d3_lab;
  function d3_lab(l, a, b) {
    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
  }
  var d3_lab_K = 18;
  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
  var d3_labPrototype = d3_lab.prototype = new d3_color();
  d3_labPrototype.brighter = function(k) {
    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.darker = function(k) {
    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.rgb = function() {
    return d3_lab_rgb(this.l, this.a, this.b);
  };
  function d3_lab_rgb(l, a, b) {
    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
    x = d3_lab_xyz(x) * d3_lab_X;
    y = d3_lab_xyz(y) * d3_lab_Y;
    z = d3_lab_xyz(z) * d3_lab_Z;
    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
  }
  function d3_lab_hcl(l, a, b) {
    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
  }
  function d3_lab_xyz(x) {
    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
  }
  function d3_xyz_lab(x) {
    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
  }
  function d3_xyz_rgb(r) {
    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
  }
  d3.rgb = d3_rgb;
  function d3_rgb(r, g, b) {
    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
  }
  function d3_rgbNumber(value) {
    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
  }
  function d3_rgbString(value) {
    return d3_rgbNumber(value) + "";
  }
  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
  d3_rgbPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    var r = this.r, g = this.g, b = this.b, i = 30;
    if (!r && !g && !b) return new d3_rgb(i, i, i);
    if (r && r < i) r = i;
    if (g && g < i) g = i;
    if (b && b < i) b = i;
    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
  };
  d3_rgbPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_rgb(k * this.r, k * this.g, k * this.b);
  };
  d3_rgbPrototype.hsl = function() {
    return d3_rgb_hsl(this.r, this.g, this.b);
  };
  d3_rgbPrototype.toString = function() {
    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
  };
  function d3_rgb_hex(v) {
    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
  }
  function d3_rgb_parse(format, rgb, hsl) {
    var r = 0, g = 0, b = 0, m1, m2, color;
    m1 = /([a-z]+)\((.*)\)/.exec(format = format.toLowerCase());
    if (m1) {
      m2 = m1[2].split(",");
      switch (m1[1]) {
       case "hsl":
        {
          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
        }

       case "rgb":
        {
          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
        }
      }
    }
    if (color = d3_rgb_names.get(format)) {
      return rgb(color.r, color.g, color.b);
    }
    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
      if (format.length === 4) {
        r = (color & 3840) >> 4;
        r = r >> 4 | r;
        g = color & 240;
        g = g >> 4 | g;
        b = color & 15;
        b = b << 4 | b;
      } else if (format.length === 7) {
        r = (color & 16711680) >> 16;
        g = (color & 65280) >> 8;
        b = color & 255;
      }
    }
    return rgb(r, g, b);
  }
  function d3_rgb_hsl(r, g, b) {
    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
    if (d) {
      s = l < .5 ? d / (max + min) : d / (2 - max - min);
      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
      h *= 60;
    } else {
      h = NaN;
      s = l > 0 && l < 1 ? 0 : h;
    }
    return new d3_hsl(h, s, l);
  }
  function d3_rgb_lab(r, g, b) {
    r = d3_rgb_xyz(r);
    g = d3_rgb_xyz(g);
    b = d3_rgb_xyz(b);
    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
  }
  function d3_rgb_xyz(r) {
    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
  }
  function d3_rgb_parseNumber(c) {
    var f = parseFloat(c);
    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
  }
  var d3_rgb_names = d3.map({
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  });
  d3_rgb_names.forEach(function(key, value) {
    d3_rgb_names.set(key, d3_rgbNumber(value));
  });
  function d3_functor(v) {
    return typeof v === "function" ? v : function() {
      return v;
    };
  }
  d3.functor = d3_functor;
  d3.xhr = d3_xhrType(d3_identity);
  function d3_xhrType(response) {
    return function(url, mimeType, callback) {
      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
      mimeType = null;
      return d3_xhr(url, mimeType, response, callback);
    };
  }
  function d3_xhr(url, mimeType, response, callback) {
    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
    if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
      request.readyState > 3 && respond();
    };
    function respond() {
      var status = request.status, result;
      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
        try {
          result = response.call(xhr, request);
        } catch (e) {
          dispatch.error.call(xhr, e);
          return;
        }
        dispatch.load.call(xhr, result);
      } else {
        dispatch.error.call(xhr, request);
      }
    }
    request.onprogress = function(event) {
      var o = d3.event;
      d3.event = event;
      try {
        dispatch.progress.call(xhr, request);
      } finally {
        d3.event = o;
      }
    };
    xhr.header = function(name, value) {
      name = (name + "").toLowerCase();
      if (arguments.length < 2) return headers[name];
      if (value == null) delete headers[name]; else headers[name] = value + "";
      return xhr;
    };
    xhr.mimeType = function(value) {
      if (!arguments.length) return mimeType;
      mimeType = value == null ? null : value + "";
      return xhr;
    };
    xhr.responseType = function(value) {
      if (!arguments.length) return responseType;
      responseType = value;
      return xhr;
    };
    xhr.response = function(value) {
      response = value;
      return xhr;
    };
    [ "get", "post" ].forEach(function(method) {
      xhr[method] = function() {
        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
      };
    });
    xhr.send = function(method, data, callback) {
      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
      request.open(method, url, true);
      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
      if (responseType != null) request.responseType = responseType;
      if (callback != null) xhr.on("error", callback).on("load", function(request) {
        callback(null, request);
      });
      dispatch.beforesend.call(xhr, request);
      request.send(data == null ? null : data);
      return xhr;
    };
    xhr.abort = function() {
      request.abort();
      return xhr;
    };
    d3.rebind(xhr, dispatch, "on");
    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
  }
  function d3_xhr_fixCallback(callback) {
    return callback.length === 1 ? function(error, request) {
      callback(error == null ? request : null);
    } : callback;
  }
  function d3_xhrHasResponse(request) {
    var type = request.responseType;
    return type && type !== "text" ? request.response : request.responseText;
  }
  d3.dsv = function(delimiter, mimeType) {
    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
    function dsv(url, row, callback) {
      if (arguments.length < 3) callback = row, row = null;
      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
      xhr.row = function(_) {
        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
      };
      return xhr;
    }
    function response(request) {
      return dsv.parse(request.responseText);
    }
    function typedResponse(f) {
      return function(request) {
        return dsv.parse(request.responseText, f);
      };
    }
    dsv.parse = function(text, f) {
      var o;
      return dsv.parseRows(text, function(row, i) {
        if (o) return o(row, i - 1);
        var a = new Function("d", "return {" + row.map(function(name, i) {
          return JSON.stringify(name) + ": d[" + i + "]";
        }).join(",") + "}");
        o = f ? function(row, i) {
          return f(a(row), i);
        } : a;
      });
    };
    dsv.parseRows = function(text, f) {
      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
      function token() {
        if (I >= N) return EOF;
        if (eol) return eol = false, EOL;
        var j = I;
        if (text.charCodeAt(j) === 34) {
          var i = j;
          while (i++ < N) {
            if (text.charCodeAt(i) === 34) {
              if (text.charCodeAt(i + 1) !== 34) break;
              ++i;
            }
          }
          I = i + 2;
          var c = text.charCodeAt(i + 1);
          if (c === 13) {
            eol = true;
            if (text.charCodeAt(i + 2) === 10) ++I;
          } else if (c === 10) {
            eol = true;
          }
          return text.slice(j + 1, i).replace(/""/g, '"');
        }
        while (I < N) {
          var c = text.charCodeAt(I++), k = 1;
          if (c === 10) eol = true; else if (c === 13) {
            eol = true;
            if (text.charCodeAt(I) === 10) ++I, ++k;
          } else if (c !== delimiterCode) continue;
          return text.slice(j, I - k);
        }
        return text.slice(j);
      }
      while ((t = token()) !== EOF) {
        var a = [];
        while (t !== EOL && t !== EOF) {
          a.push(t);
          t = token();
        }
        if (f && (a = f(a, n++)) == null) continue;
        rows.push(a);
      }
      return rows;
    };
    dsv.format = function(rows) {
      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
      var fieldSet = new d3_Set(), fields = [];
      rows.forEach(function(row) {
        for (var field in row) {
          if (!fieldSet.has(field)) {
            fields.push(fieldSet.add(field));
          }
        }
      });
      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
        return fields.map(function(field) {
          return formatValue(row[field]);
        }).join(delimiter);
      })).join("\n");
    };
    dsv.formatRows = function(rows) {
      return rows.map(formatRow).join("\n");
    };
    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }
    function formatValue(text) {
      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
    }
    return dsv;
  };
  d3.csv = d3.dsv(",", "text/csv");
  d3.tsv = d3.dsv("	", "text/tab-separated-values");
  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function(callback) {
    setTimeout(callback, 17);
  };
  d3.timer = function() {
    d3_timer.apply(this, arguments);
  };
  function d3_timer(callback, delay, then) {
    var n = arguments.length;
    if (n < 2) delay = 0;
    if (n < 3) then = Date.now();
    var time = then + delay, timer = {
      c: callback,
      t: time,
      n: null
    };
    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
    d3_timer_queueTail = timer;
    if (!d3_timer_interval) {
      d3_timer_timeout = clearTimeout(d3_timer_timeout);
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
    return timer;
  }
  function d3_timer_step() {
    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
    if (delay > 24) {
      if (isFinite(delay)) {
        clearTimeout(d3_timer_timeout);
        d3_timer_timeout = setTimeout(d3_timer_step, delay);
      }
      d3_timer_interval = 0;
    } else {
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  }
  d3.timer.flush = function() {
    d3_timer_mark();
    d3_timer_sweep();
  };
  function d3_timer_mark() {
    var now = Date.now(), timer = d3_timer_queueHead;
    while (timer) {
      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;
      timer = timer.n;
    }
    return now;
  }
  function d3_timer_sweep() {
    var t0, t1 = d3_timer_queueHead, time = Infinity;
    while (t1) {
      if (t1.c) {
        if (t1.t < time) time = t1.t;
        t1 = (t0 = t1).n;
      } else {
        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
      }
    }
    d3_timer_queueTail = t0;
    return time;
  }
  function d3_format_precision(x, p) {
    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
  }
  d3.round = function(x, n) {
    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
  };
  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
  d3.formatPrefix = function(value, precision) {
    var i = 0;
    if (value = +value) {
      if (value < 0) value *= -1;
      if (precision) value = d3.round(value, d3_format_precision(value, precision));
      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
    }
    return d3_formatPrefixes[8 + i / 3];
  };
  function d3_formatPrefix(d, i) {
    var k = Math.pow(10, abs(8 - i) * 3);
    return {
      scale: i > 8 ? function(d) {
        return d / k;
      } : function(d) {
        return d * k;
      },
      symbol: d
    };
  }
  function d3_locale_numberFormat(locale) {
    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;
      while (i > 0 && g > 0) {
        if (length + g + 1 > width) g = Math.max(1, width - length);
        t.push(value.substring(i -= g, i + g));
        if ((length += g + 1) > width) break;
        g = locale_grouping[j = (j + 1) % locale_grouping.length];
      }
      return t.reverse().join(locale_thousands);
    } : d3_identity;
    return function(specifier) {
      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false, exponent = true;
      if (precision) precision = +precision.substring(1);
      if (zfill || fill === "0" && align === "=") {
        zfill = fill = "0";
        align = "=";
      }
      switch (type) {
       case "n":
        comma = true;
        type = "g";
        break;

       case "%":
        scale = 100;
        suffix = "%";
        type = "f";
        break;

       case "p":
        scale = 100;
        suffix = "%";
        type = "r";
        break;

       case "b":
       case "o":
       case "x":
       case "X":
        if (symbol === "#") prefix = "0" + type.toLowerCase();

       case "c":
        exponent = false;

       case "d":
        integer = true;
        precision = 0;
        break;

       case "s":
        scale = -1;
        type = "r";
        break;
      }
      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
      if (type == "r" && !precision) type = "g";
      if (precision != null) {
        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
      }
      type = d3_format_types.get(type) || d3_format_typeDefault;
      var zcomma = zfill && comma;
      return function(value) {
        var fullSuffix = suffix;
        if (integer && value % 1) return "";
        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
        if (scale < 0) {
          var unit = d3.formatPrefix(value, precision);
          value = unit.scale(value);
          fullSuffix = unit.symbol + suffix;
        } else {
          value *= scale;
        }
        value = type(value, precision);
        var i = value.lastIndexOf("."), before, after;
        if (i < 0) {
          var j = exponent ? value.lastIndexOf("e") : -1;
          if (j < 0) before = value, after = ""; else before = value.substring(0, j), after = value.substring(j);
        } else {
          before = value.substring(0, i);
          after = locale_decimal + value.substring(i + 1);
        }
        if (!zfill && comma) before = formatGroup(before, Infinity);
        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
        negative += prefix;
        value = before + after;
        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
      };
    };
  }
  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
  var d3_format_types = d3.map({
    b: function(x) {
      return x.toString(2);
    },
    c: function(x) {
      return String.fromCharCode(x);
    },
    o: function(x) {
      return x.toString(8);
    },
    x: function(x) {
      return x.toString(16);
    },
    X: function(x) {
      return x.toString(16).toUpperCase();
    },
    g: function(x, p) {
      return x.toPrecision(p);
    },
    e: function(x, p) {
      return x.toExponential(p);
    },
    f: function(x, p) {
      return x.toFixed(p);
    },
    r: function(x, p) {
      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
    }
  });
  function d3_format_typeDefault(x) {
    return x + "";
  }
  var d3_time = d3.time = {}, d3_date = Date;
  function d3_date_utc() {
    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
  }
  d3_date_utc.prototype = {
    getDate: function() {
      return this._.getUTCDate();
    },
    getDay: function() {
      return this._.getUTCDay();
    },
    getFullYear: function() {
      return this._.getUTCFullYear();
    },
    getHours: function() {
      return this._.getUTCHours();
    },
    getMilliseconds: function() {
      return this._.getUTCMilliseconds();
    },
    getMinutes: function() {
      return this._.getUTCMinutes();
    },
    getMonth: function() {
      return this._.getUTCMonth();
    },
    getSeconds: function() {
      return this._.getUTCSeconds();
    },
    getTime: function() {
      return this._.getTime();
    },
    getTimezoneOffset: function() {
      return 0;
    },
    valueOf: function() {
      return this._.valueOf();
    },
    setDate: function() {
      d3_time_prototype.setUTCDate.apply(this._, arguments);
    },
    setDay: function() {
      d3_time_prototype.setUTCDay.apply(this._, arguments);
    },
    setFullYear: function() {
      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
    },
    setHours: function() {
      d3_time_prototype.setUTCHours.apply(this._, arguments);
    },
    setMilliseconds: function() {
      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
    },
    setMinutes: function() {
      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
    },
    setMonth: function() {
      d3_time_prototype.setUTCMonth.apply(this._, arguments);
    },
    setSeconds: function() {
      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
    },
    setTime: function() {
      d3_time_prototype.setTime.apply(this._, arguments);
    }
  };
  var d3_time_prototype = Date.prototype;
  function d3_time_interval(local, step, number) {
    function round(date) {
      var d0 = local(date), d1 = offset(d0, 1);
      return date - d0 < d1 - date ? d0 : d1;
    }
    function ceil(date) {
      step(date = local(new d3_date(date - 1)), 1);
      return date;
    }
    function offset(date, k) {
      step(date = new d3_date(+date), k);
      return date;
    }
    function range(t0, t1, dt) {
      var time = ceil(t0), times = [];
      if (dt > 1) {
        while (time < t1) {
          if (!(number(time) % dt)) times.push(new Date(+time));
          step(time, 1);
        }
      } else {
        while (time < t1) times.push(new Date(+time)), step(time, 1);
      }
      return times;
    }
    function range_utc(t0, t1, dt) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = t0;
        return range(utc, t1, dt);
      } finally {
        d3_date = Date;
      }
    }
    local.floor = local;
    local.round = round;
    local.ceil = ceil;
    local.offset = offset;
    local.range = range;
    var utc = local.utc = d3_time_interval_utc(local);
    utc.floor = utc;
    utc.round = d3_time_interval_utc(round);
    utc.ceil = d3_time_interval_utc(ceil);
    utc.offset = d3_time_interval_utc(offset);
    utc.range = range_utc;
    return local;
  }
  function d3_time_interval_utc(method) {
    return function(date, k) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = date;
        return method(utc, k)._;
      } finally {
        d3_date = Date;
      }
    };
  }
  d3_time.year = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setMonth(0, 1);
    return date;
  }, function(date, offset) {
    date.setFullYear(date.getFullYear() + offset);
  }, function(date) {
    return date.getFullYear();
  });
  d3_time.years = d3_time.year.range;
  d3_time.years.utc = d3_time.year.utc.range;
  d3_time.day = d3_time_interval(function(date) {
    var day = new d3_date(2e3, 0);
    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
    return day;
  }, function(date, offset) {
    date.setDate(date.getDate() + offset);
  }, function(date) {
    return date.getDate() - 1;
  });
  d3_time.days = d3_time.day.range;
  d3_time.days.utc = d3_time.day.utc.range;
  d3_time.dayOfYear = function(date) {
    var year = d3_time.year(date);
    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
  };
  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
    i = 7 - i;
    var interval = d3_time[day] = d3_time_interval(function(date) {
      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
      return date;
    }, function(date, offset) {
      date.setDate(date.getDate() + Math.floor(offset) * 7);
    }, function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
    });
    d3_time[day + "s"] = interval.range;
    d3_time[day + "s"].utc = interval.utc.range;
    d3_time[day + "OfYear"] = function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
    };
  });
  d3_time.week = d3_time.sunday;
  d3_time.weeks = d3_time.sunday.range;
  d3_time.weeks.utc = d3_time.sunday.utc.range;
  d3_time.weekOfYear = d3_time.sundayOfYear;
  function d3_locale_timeFormat(locale) {
    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
    function d3_time_format(template) {
      var n = template.length;
      function format(date) {
        var string = [], i = -1, j = 0, c, p, f;
        while (++i < n) {
          if (template.charCodeAt(i) === 37) {
            string.push(template.slice(j, i));
            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
            string.push(c);
            j = i + 1;
          }
        }
        string.push(template.slice(j, i));
        return string.join("");
      }
      format.parse = function(string) {
        var d = {
          y: 1900,
          m: 0,
          d: 1,
          H: 0,
          M: 0,
          S: 0,
          L: 0,
          Z: null
        }, i = d3_time_parse(d, template, string, 0);
        if (i != string.length) return null;
        if ("p" in d) d.H = d.H % 12 + d.p * 12;
        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("W" in d || "U" in d) {
          if (!("w" in d)) d.w = "W" in d ? 1 : 0;
          date.setFullYear(d.y, 0, 1);
          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
        } else date.setFullYear(d.y, d.m, d.d);
        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
        return localZ ? date._ : date;
      };
      format.toString = function() {
        return template;
      };
      return format;
    }
    function d3_time_parse(date, template, string, j) {
      var c, p, t, i = 0, n = template.length, m = string.length;
      while (i < n) {
        if (j >= m) return -1;
        c = template.charCodeAt(i++);
        if (c === 37) {
          t = template.charAt(i++);
          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
          if (!p || (j = p(date, string, j)) < 0) return -1;
        } else if (c != string.charCodeAt(j++)) {
          return -1;
        }
      }
      return j;
    }
    d3_time_format.utc = function(template) {
      var local = d3_time_format(template);
      function format(date) {
        try {
          d3_date = d3_date_utc;
          var utc = new d3_date();
          utc._ = date;
          return local(utc);
        } finally {
          d3_date = Date;
        }
      }
      format.parse = function(string) {
        try {
          d3_date = d3_date_utc;
          var date = local.parse(string);
          return date && date._;
        } finally {
          d3_date = Date;
        }
      };
      format.toString = local.toString;
      return format;
    };
    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
    locale_periods.forEach(function(p, i) {
      d3_time_periodLookup.set(p.toLowerCase(), i);
    });
    var d3_time_formats = {
      a: function(d) {
        return locale_shortDays[d.getDay()];
      },
      A: function(d) {
        return locale_days[d.getDay()];
      },
      b: function(d) {
        return locale_shortMonths[d.getMonth()];
      },
      B: function(d) {
        return locale_months[d.getMonth()];
      },
      c: d3_time_format(locale_dateTime),
      d: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      e: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      H: function(d, p) {
        return d3_time_formatPad(d.getHours(), p, 2);
      },
      I: function(d, p) {
        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
      },
      j: function(d, p) {
        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
      },
      L: function(d, p) {
        return d3_time_formatPad(d.getMilliseconds(), p, 3);
      },
      m: function(d, p) {
        return d3_time_formatPad(d.getMonth() + 1, p, 2);
      },
      M: function(d, p) {
        return d3_time_formatPad(d.getMinutes(), p, 2);
      },
      p: function(d) {
        return locale_periods[+(d.getHours() >= 12)];
      },
      S: function(d, p) {
        return d3_time_formatPad(d.getSeconds(), p, 2);
      },
      U: function(d, p) {
        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
      },
      w: function(d) {
        return d.getDay();
      },
      W: function(d, p) {
        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
      },
      x: d3_time_format(locale_date),
      X: d3_time_format(locale_time),
      y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
      },
      Y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
      },
      Z: d3_time_zone,
      "%": function() {
        return "%";
      }
    };
    var d3_time_parsers = {
      a: d3_time_parseWeekdayAbbrev,
      A: d3_time_parseWeekday,
      b: d3_time_parseMonthAbbrev,
      B: d3_time_parseMonth,
      c: d3_time_parseLocaleFull,
      d: d3_time_parseDay,
      e: d3_time_parseDay,
      H: d3_time_parseHour24,
      I: d3_time_parseHour24,
      j: d3_time_parseDayOfYear,
      L: d3_time_parseMilliseconds,
      m: d3_time_parseMonthNumber,
      M: d3_time_parseMinutes,
      p: d3_time_parseAmPm,
      S: d3_time_parseSeconds,
      U: d3_time_parseWeekNumberSunday,
      w: d3_time_parseWeekdayNumber,
      W: d3_time_parseWeekNumberMonday,
      x: d3_time_parseLocaleDate,
      X: d3_time_parseLocaleTime,
      y: d3_time_parseYear,
      Y: d3_time_parseFullYear,
      Z: d3_time_parseZone,
      "%": d3_time_parseLiteralPercent
    };
    function d3_time_parseWeekdayAbbrev(date, string, i) {
      d3_time_dayAbbrevRe.lastIndex = 0;
      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseWeekday(date, string, i) {
      d3_time_dayRe.lastIndex = 0;
      var n = d3_time_dayRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonthAbbrev(date, string, i) {
      d3_time_monthAbbrevRe.lastIndex = 0;
      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonth(date, string, i) {
      d3_time_monthRe.lastIndex = 0;
      var n = d3_time_monthRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseLocaleFull(date, string, i) {
      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
    }
    function d3_time_parseLocaleDate(date, string, i) {
      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
    }
    function d3_time_parseLocaleTime(date, string, i) {
      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
    }
    function d3_time_parseAmPm(date, string, i) {
      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
      return n == null ? -1 : (date.p = n, i);
    }
    return d3_time_format;
  }
  var d3_time_formatPads = {
    "-": "",
    _: " ",
    "0": "0"
  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
  function d3_time_formatPad(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  function d3_time_formatRe(names) {
    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
  }
  function d3_time_formatLookup(names) {
    var map = new d3_Map(), i = -1, n = names.length;
    while (++i < n) map.set(names[i].toLowerCase(), i);
    return map;
  }
  function d3_time_parseWeekdayNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
    return n ? (date.w = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberSunday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.U = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberMonday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.W = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseFullYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
    return n ? (date.y = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
  }
  function d3_time_parseZone(date, string, i) {
    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, 
    i + 5) : -1;
  }
  function d3_time_expandYear(d) {
    return d + (d > 68 ? 1900 : 2e3);
  }
  function d3_time_parseMonthNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
  }
  function d3_time_parseDay(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.d = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseDayOfYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.j = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseHour24(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.H = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMinutes(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.M = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseSeconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.S = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMilliseconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.L = +n[0], i + n[0].length) : -1;
  }
  function d3_time_zone(d) {
    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
  }
  function d3_time_parseLiteralPercent(date, string, i) {
    d3_time_percentRe.lastIndex = 0;
    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  function d3_time_formatMulti(formats) {
    var n = formats.length, i = -1;
    while (++i < n) formats[i][0] = this(formats[i][0]);
    return function(date) {
      var i = 0, f = formats[i];
      while (!f[1](date)) f = formats[++i];
      return f[0](date);
    };
  }
  d3.locale = function(locale) {
    return {
      numberFormat: d3_locale_numberFormat(locale),
      timeFormat: d3_locale_timeFormat(locale)
    };
  };
  var d3_locale_enUS = d3.locale({
    decimal: ".",
    thousands: ",",
    grouping: [ 3 ],
    currency: [ "$", "" ],
    dateTime: "%a %b %e %X %Y",
    date: "%m/%d/%Y",
    time: "%H:%M:%S",
    periods: [ "AM", "PM" ],
    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
  });
  d3.format = d3_locale_enUS.numberFormat;
  d3.geo = {};
  function d3_adder() {}
  d3_adder.prototype = {
    s: 0,
    t: 0,
    add: function(y) {
      d3_adderSum(y, this.t, d3_adderTemp);
      d3_adderSum(d3_adderTemp.s, this.s, this);
      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
    },
    reset: function() {
      this.s = this.t = 0;
    },
    valueOf: function() {
      return this.s;
    }
  };
  var d3_adderTemp = new d3_adder();
  function d3_adderSum(a, b, o) {
    var x = o.s = a + b, bv = x - a, av = x - bv;
    o.t = a - av + (b - bv);
  }
  d3.geo.stream = function(object, listener) {
    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
      d3_geo_streamObjectType[object.type](object, listener);
    } else {
      d3_geo_streamGeometry(object, listener);
    }
  };
  function d3_geo_streamGeometry(geometry, listener) {
    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
      d3_geo_streamGeometryType[geometry.type](geometry, listener);
    }
  }
  var d3_geo_streamObjectType = {
    Feature: function(feature, listener) {
      d3_geo_streamGeometry(feature.geometry, listener);
    },
    FeatureCollection: function(object, listener) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
    }
  };
  var d3_geo_streamGeometryType = {
    Sphere: function(object, listener) {
      listener.sphere();
    },
    Point: function(object, listener) {
      object = object.coordinates;
      listener.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
    },
    LineString: function(object, listener) {
      d3_geo_streamLine(object.coordinates, listener, 0);
    },
    MultiLineString: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
    },
    Polygon: function(object, listener) {
      d3_geo_streamPolygon(object.coordinates, listener);
    },
    MultiPolygon: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
    },
    GeometryCollection: function(object, listener) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
    }
  };
  function d3_geo_streamLine(coordinates, listener, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    listener.lineStart();
    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
    listener.lineEnd();
  }
  function d3_geo_streamPolygon(coordinates, listener) {
    var i = -1, n = coordinates.length;
    listener.polygonStart();
    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
    listener.polygonEnd();
  }
  d3.geo.area = function(object) {
    d3_geo_areaSum = 0;
    d3.geo.stream(object, d3_geo_area);
    return d3_geo_areaSum;
  };
  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
  var d3_geo_area = {
    sphere: function() {
      d3_geo_areaSum += 4 * π;
    },
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_areaRingSum.reset();
      d3_geo_area.lineStart = d3_geo_areaRingStart;
    },
    polygonEnd: function() {
      var area = 2 * d3_geo_areaRingSum;
      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
    }
  };
  function d3_geo_areaRingStart() {
    var λ00, φ00, λ0, cosφ0, sinφ0;
    d3_geo_area.point = function(λ, φ) {
      d3_geo_area.point = nextPoint;
      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
      sinφ0 = Math.sin(φ);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      φ = φ * d3_radians / 2 + π / 4;
      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
      d3_geo_areaRingSum.add(Math.atan2(v, u));
      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
    }
    d3_geo_area.lineEnd = function() {
      nextPoint(λ00, φ00);
    };
  }
  function d3_geo_cartesian(spherical) {
    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
  }
  function d3_geo_cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function d3_geo_cartesianCross(a, b) {
    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
  }
  function d3_geo_cartesianAdd(a, b) {
    a[0] += b[0];
    a[1] += b[1];
    a[2] += b[2];
  }
  function d3_geo_cartesianScale(vector, k) {
    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
  }
  function d3_geo_cartesianNormalize(d) {
    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l;
    d[1] /= l;
    d[2] /= l;
  }
  function d3_geo_spherical(cartesian) {
    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
  }
  function d3_geo_sphericalEqual(a, b) {
    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
  }
  d3.geo.bounds = function() {
    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
    var bound = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        bound.point = ringPoint;
        bound.lineStart = ringStart;
        bound.lineEnd = ringEnd;
        dλSum = 0;
        d3_geo_area.polygonStart();
      },
      polygonEnd: function() {
        d3_geo_area.polygonEnd();
        bound.point = point;
        bound.lineStart = lineStart;
        bound.lineEnd = lineEnd;
        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
        range[0] = λ0, range[1] = λ1;
      }
    };
    function point(λ, φ) {
      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
      if (φ < φ0) φ0 = φ;
      if (φ > φ1) φ1 = φ;
    }
    function linePoint(λ, φ) {
      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
      if (p0) {
        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
        d3_geo_cartesianNormalize(inflection);
        inflection = d3_geo_spherical(inflection);
        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = inflection[1] * d3_degrees;
          if (φi > φ1) φ1 = φi;
        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = -inflection[1] * d3_degrees;
          if (φi < φ0) φ0 = φi;
        } else {
          if (φ < φ0) φ0 = φ;
          if (φ > φ1) φ1 = φ;
        }
        if (antimeridian) {
          if (λ < λ_) {
            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
          } else {
            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
          }
        } else {
          if (λ1 >= λ0) {
            if (λ < λ0) λ0 = λ;
            if (λ > λ1) λ1 = λ;
          } else {
            if (λ > λ_) {
              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
            } else {
              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
            }
          }
        }
      } else {
        point(λ, φ);
      }
      p0 = p, λ_ = λ;
    }
    function lineStart() {
      bound.point = linePoint;
    }
    function lineEnd() {
      range[0] = λ0, range[1] = λ1;
      bound.point = point;
      p0 = null;
    }
    function ringPoint(λ, φ) {
      if (p0) {
        var dλ = λ - λ_;
        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
      } else λ__ = λ, φ__ = φ;
      d3_geo_area.point(λ, φ);
      linePoint(λ, φ);
    }
    function ringStart() {
      d3_geo_area.lineStart();
    }
    function ringEnd() {
      ringPoint(λ__, φ__);
      d3_geo_area.lineEnd();
      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
      range[0] = λ0, range[1] = λ1;
      p0 = null;
    }
    function angle(λ0, λ1) {
      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
    }
    function compareRanges(a, b) {
      return a[0] - b[0];
    }
    function withinRange(x, range) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }
    return function(feature) {
      φ1 = λ1 = -(λ0 = φ0 = Infinity);
      ranges = [];
      d3.geo.stream(feature, bound);
      var n = ranges.length;
      if (n) {
        ranges.sort(compareRanges);
        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
          b = ranges[i];
          if (withinRange(b[0], a) || withinRange(b[1], a)) {
            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }
        var best = -Infinity, dλ;
        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
          b = merged[i];
          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
        }
      }
      ranges = range = null;
      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
    };
  }();
  d3.geo.centroid = function(object) {
    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
    d3.geo.stream(object, d3_geo_centroid);
    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
    if (m < ε2) {
      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
      m = x * x + y * y + z * z;
      if (m < ε2) return [ NaN, NaN ];
    }
    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
  };
  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
  var d3_geo_centroid = {
    sphere: d3_noop,
    point: d3_geo_centroidPoint,
    lineStart: d3_geo_centroidLineStart,
    lineEnd: d3_geo_centroidLineEnd,
    polygonStart: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
    }
  };
  function d3_geo_centroidPoint(λ, φ) {
    λ *= d3_radians;
    var cosφ = Math.cos(φ *= d3_radians);
    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
  }
  function d3_geo_centroidPointXYZ(x, y, z) {
    ++d3_geo_centroidW0;
    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
  }
  function d3_geo_centroidLineStart() {
    var x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroid.point = nextPoint;
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_centroidLineEnd() {
    d3_geo_centroid.point = d3_geo_centroidPoint;
  }
  function d3_geo_centroidRingStart() {
    var λ00, φ00, x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ00 = λ, φ00 = φ;
      d3_geo_centroid.point = nextPoint;
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    d3_geo_centroid.lineEnd = function() {
      nextPoint(λ00, φ00);
      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
      d3_geo_centroid.point = d3_geo_centroidPoint;
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
      d3_geo_centroidX2 += v * cx;
      d3_geo_centroidY2 += v * cy;
      d3_geo_centroidZ2 += v * cz;
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_compose(a, b) {
    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert) compose.invert = function(x, y) {
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
  }
  function d3_true() {
    return true;
  }
  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
    var subject = [], clip = [];
    segments.forEach(function(segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n, p0 = segment[0], p1 = segment[n];
      if (d3_geo_sphericalEqual(p0, p1)) {
        listener.lineStart();
        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
        listener.lineEnd();
        return;
      }
      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
      a.o = b;
      subject.push(a);
      clip.push(b);
      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
      a.o = b;
      subject.push(a);
      clip.push(b);
    });
    clip.sort(compare);
    d3_geo_clipPolygonLinkCircular(subject);
    d3_geo_clipPolygonLinkCircular(clip);
    if (!subject.length) return;
    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
      clip[i].e = entry = !entry;
    }
    var start = subject[0], points, point;
    while (1) {
      var current = start, isSubject = true;
      while (current.v) if ((current = current.n) === start) return;
      points = current.z;
      listener.lineStart();
      do {
        current.v = current.o.v = true;
        if (current.e) {
          if (isSubject) {
            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.n.x, 1, listener);
          }
          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;
            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.p.x, -1, listener);
          }
          current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);
      listener.lineEnd();
    }
  }
  function d3_geo_clipPolygonLinkCircular(array) {
    if (!(n = array.length)) return;
    var n, i = 0, a = array[0], b;
    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }
    a.n = b = array[0];
    b.p = a;
  }
  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other;
    this.e = entry;
    this.v = false;
    this.n = this.p = null;
  }
  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
    return function(rotate, listener) {
      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
        },
        polygonEnd: function() {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = d3.merge(segments);
          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
          if (segments.length) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
          } else if (clipStartInside) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            interpolate(null, null, 1, listener);
            listener.lineEnd();
          }
          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
          segments = polygon = null;
        },
        sphere: function() {
          listener.polygonStart();
          listener.lineStart();
          interpolate(null, null, 1, listener);
          listener.lineEnd();
          listener.polygonEnd();
        }
      };
      function point(λ, φ) {
        var point = rotate(λ, φ);
        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
      }
      function pointLine(λ, φ) {
        var point = rotate(λ, φ);
        line.point(point[0], point[1]);
      }
      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }
      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }
      var segments;
      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
      function pointRing(λ, φ) {
        ring.push([ λ, φ ]);
        var point = rotate(λ, φ);
        ringListener.point(point[0], point[1]);
      }
      function ringStart() {
        ringListener.lineStart();
        ring = [];
      }
      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringListener.lineEnd();
        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n) return;
        if (clean & 1) {
          segment = ringSegments[0];
          var n = segment.length - 1, i = -1, point;
          if (n > 0) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            while (++i < n) listener.point((point = segment[i])[0], point[1]);
            listener.lineEnd();
          }
          return;
        }
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
      }
      return clip;
    };
  }
  function d3_geo_clipSegmentLength1(segment) {
    return segment.length > 1;
  }
  function d3_geo_clipBufferListener() {
    var lines = [], line;
    return {
      lineStart: function() {
        lines.push(line = []);
      },
      point: function(λ, φ) {
        line.push([ λ, φ ]);
      },
      lineEnd: d3_noop,
      buffer: function() {
        var buffer = lines;
        lines = [];
        line = null;
        return buffer;
      },
      rejoin: function() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      }
    };
  }
  function d3_geo_clipSort(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
  }
  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
  function d3_geo_clipAntimeridianLine(listener) {
    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
    return {
      lineStart: function() {
        listener.lineStart();
        clean = 1;
      },
      point: function(λ1, φ1) {
        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
        if (abs(dλ - π) < ε) {
          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          listener.point(λ1, φ0);
          clean = 0;
        } else if (sλ0 !== sλ1 && dλ >= π) {
          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          clean = 0;
        }
        listener.point(λ0 = λ1, φ0 = φ1);
        sλ0 = sλ1;
      },
      lineEnd: function() {
        listener.lineEnd();
        λ0 = φ0 = NaN;
      },
      clean: function() {
        return 2 - clean;
      }
    };
  }
  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
  }
  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
    var φ;
    if (from == null) {
      φ = direction * halfπ;
      listener.point(-π, φ);
      listener.point(0, φ);
      listener.point(π, φ);
      listener.point(π, 0);
      listener.point(π, -φ);
      listener.point(0, -φ);
      listener.point(-π, -φ);
      listener.point(-π, 0);
      listener.point(-π, φ);
    } else if (abs(from[0] - to[0]) > ε) {
      var s = from[0] < to[0] ? π : -π;
      φ = direction * s / 2;
      listener.point(-s, φ);
      listener.point(0, φ);
      listener.point(s, φ);
    } else {
      listener.point(to[0], to[1]);
    }
  }
  function d3_geo_pointInPolygon(point, polygon) {
    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
    d3_geo_areaRingSum.reset();
    for (var i = 0, n = polygon.length; i < n; ++i) {
      var ring = polygon[i], m = ring.length;
      if (!m) continue;
      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
      while (true) {
        if (j === m) j = 0;
        point = ring[j];
        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
          d3_geo_cartesianNormalize(arc);
          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
          d3_geo_cartesianNormalize(intersection);
          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
          }
        }
        if (!j++) break;
        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
      }
    }
    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^ winding & 1;
  }
  function d3_geo_clipCircle(radius) {
    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
    function visible(λ, φ) {
      return Math.cos(λ) * Math.cos(φ) > cr;
    }
    function clipLine(listener) {
      var point0, c0, v0, v00, clean;
      return {
        lineStart: function() {
          v00 = v0 = false;
          clean = 1;
        },
        point: function(λ, φ) {
          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
          if (!point0 && (v00 = v0 = v)) listener.lineStart();
          if (v !== v0) {
            point2 = intersect(point0, point1);
            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
              point1[0] += ε;
              point1[1] += ε;
              v = visible(point1[0], point1[1]);
            }
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              listener.lineStart();
              point2 = intersect(point1, point0);
              listener.point(point2[0], point2[1]);
            } else {
              point2 = intersect(point0, point1);
              listener.point(point2[0], point2[1]);
              listener.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
              } else {
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
              }
            }
          }
          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
            listener.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function() {
          if (v0) listener.lineEnd();
          point0 = null;
        },
        clean: function() {
          return clean | (v00 && v0) << 1;
        }
      };
    }
    function intersect(a, b, two) {
      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
      if (!determinant) return !two && a;
      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
      d3_geo_cartesianAdd(A, B);
      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
      if (t2 < 0) return;
      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
      d3_geo_cartesianAdd(q, A);
      q = d3_geo_spherical(q);
      if (!two) return q;
      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
        d3_geo_cartesianAdd(q1, A);
        return [ q, d3_geo_spherical(q1) ];
      }
    }
    function code(λ, φ) {
      var r = smallRadius ? radius : π - radius, code = 0;
      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
      return code;
    }
  }
  function d3_geom_clipLine(x0, y0, x1, y1) {
    return function(line) {
      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
      r = x0 - ax;
      if (!dx && r > 0) return;
      r /= dx;
      if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = x1 - ax;
      if (!dx && r < 0) return;
      r /= dx;
      if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      r = y0 - ay;
      if (!dy && r > 0) return;
      r /= dy;
      if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = y1 - ay;
      if (!dy && r < 0) return;
      r /= dy;
      if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      if (t0 > 0) line.a = {
        x: ax + t0 * dx,
        y: ay + t0 * dy
      };
      if (t1 < 1) line.b = {
        x: ax + t1 * dx,
        y: ay + t1 * dy
      };
      return line;
    };
  }
  var d3_geo_clipExtentMAX = 1e9;
  d3.geo.clipExtent = function() {
    var x0, y0, x1, y1, stream, clip, clipExtent = {
      stream: function(output) {
        if (stream) stream.valid = false;
        stream = clip(output);
        stream.valid = true;
        return stream;
      },
      extent: function(_) {
        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
        if (stream) stream.valid = false, stream = null;
        return clipExtent;
      }
    };
    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
  };
  function d3_geo_clipExtent(x0, y0, x1, y1) {
    return function(listener) {
      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          listener = bufferListener;
          segments = [];
          polygon = [];
          clean = true;
        },
        polygonEnd: function() {
          listener = listener_;
          segments = d3.merge(segments);
          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
          if (inside || visible) {
            listener.polygonStart();
            if (inside) {
              listener.lineStart();
              interpolate(null, null, 1, listener);
              listener.lineEnd();
            }
            if (visible) {
              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
            }
            listener.polygonEnd();
          }
          segments = polygon = ring = null;
        }
      };
      function insidePolygon(p) {
        var wn = 0, n = polygon.length, y = p[1];
        for (var i = 0; i < n; ++i) {
          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
            b = v[j];
            if (a[1] <= y) {
              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
            } else {
              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
            }
            a = b;
          }
        }
        return wn !== 0;
      }
      function interpolate(from, to, direction, listener) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
          do {
            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          } while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          listener.point(to[0], to[1]);
        }
      }
      function pointVisible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }
      function point(x, y) {
        if (pointVisible(x, y)) listener.point(x, y);
      }
      var x__, y__, v__, x_, y_, v_, first, clean;
      function lineStart() {
        clip.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }
      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferListener.rejoin();
          segments.push(bufferListener.buffer());
        }
        clip.point = point;
        if (v_) listener.lineEnd();
      }
      function linePoint(x, y) {
        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
        var v = pointVisible(x, y);
        if (polygon) ring.push([ x, y ]);
        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;
          if (v) {
            listener.lineStart();
            listener.point(x, y);
          }
        } else {
          if (v && v_) listener.point(x, y); else {
            var l = {
              a: {
                x: x_,
                y: y_
              },
              b: {
                x: x,
                y: y
              }
            };
            if (clipLine(l)) {
              if (!v_) {
                listener.lineStart();
                listener.point(l.a.x, l.a.y);
              }
              listener.point(l.b.x, l.b.y);
              if (!v) listener.lineEnd();
              clean = false;
            } else if (v) {
              listener.lineStart();
              listener.point(x, y);
              clean = false;
            }
          }
        }
        x_ = x, y_ = y, v_ = v;
      }
      return clip;
    };
    function corner(p, direction) {
      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }
    function compare(a, b) {
      return comparePoints(a.x, b.x);
    }
    function comparePoints(a, b) {
      var ca = corner(a, 1), cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
  }
  function d3_geo_conic(projectAt) {
    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
    p.parallels = function(_) {
      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
    };
    return p;
  }
  function d3_geo_conicEqualArea(φ0, φ1) {
    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
    function forward(λ, φ) {
      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = ρ0 - y;
      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
    };
    return forward;
  }
  (d3.geo.conicEqualArea = function() {
    return d3_geo_conic(d3_geo_conicEqualArea);
  }).raw = d3_geo_conicEqualArea;
  d3.geo.albers = function() {
    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
  };
  d3.geo.albersUsa = function() {
    var lower48 = d3.geo.albers();
    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
    var point, pointStream = {
      point: function(x, y) {
        point = [ x, y ];
      }
    }, lower48Point, alaskaPoint, hawaiiPoint;
    function albersUsa(coordinates) {
      var x = coordinates[0], y = coordinates[1];
      point = null;
      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
      return point;
    }
    albersUsa.invert = function(coordinates) {
      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function(stream) {
      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
      return {
        point: function(x, y) {
          lower48Stream.point(x, y);
          alaskaStream.point(x, y);
          hawaiiStream.point(x, y);
        },
        sphere: function() {
          lower48Stream.sphere();
          alaskaStream.sphere();
          hawaiiStream.sphere();
        },
        lineStart: function() {
          lower48Stream.lineStart();
          alaskaStream.lineStart();
          hawaiiStream.lineStart();
        },
        lineEnd: function() {
          lower48Stream.lineEnd();
          alaskaStream.lineEnd();
          hawaiiStream.lineEnd();
        },
        polygonStart: function() {
          lower48Stream.polygonStart();
          alaskaStream.polygonStart();
          hawaiiStream.polygonStart();
        },
        polygonEnd: function() {
          lower48Stream.polygonEnd();
          alaskaStream.polygonEnd();
          hawaiiStream.polygonEnd();
        }
      };
    };
    albersUsa.precision = function(_) {
      if (!arguments.length) return lower48.precision();
      lower48.precision(_);
      alaska.precision(_);
      hawaii.precision(_);
      return albersUsa;
    };
    albersUsa.scale = function(_) {
      if (!arguments.length) return lower48.scale();
      lower48.scale(_);
      alaska.scale(_ * .35);
      hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function(_) {
      if (!arguments.length) return lower48.translate();
      var k = lower48.scale(), x = +_[0], y = +_[1];
      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      return albersUsa;
    };
    return albersUsa.scale(1070);
  };
  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_pathAreaPolygon = 0;
      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
    }
  };
  function d3_geo_pathAreaRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathArea.point = function(x, y) {
      d3_geo_pathArea.point = nextPoint;
      x00 = x0 = x, y00 = y0 = y;
    };
    function nextPoint(x, y) {
      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
      x0 = x, y0 = y;
    }
    d3_geo_pathArea.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
  var d3_geo_pathBounds = {
    point: d3_geo_pathBoundsPoint,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_pathBoundsPoint(x, y) {
    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
  }
  function d3_geo_pathBuffer() {
    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointCircle = d3_geo_pathBufferCircle(_);
        return stream;
      },
      result: function() {
        if (buffer.length) {
          var result = buffer.join("");
          buffer = [];
          return result;
        }
      }
    };
    function point(x, y) {
      buffer.push("M", x, ",", y, pointCircle);
    }
    function pointLineStart(x, y) {
      buffer.push("M", x, ",", y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      buffer.push("L", x, ",", y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      buffer.push("Z");
    }
    return stream;
  }
  function d3_geo_pathBufferCircle(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
  }
  var d3_geo_pathCentroid = {
    point: d3_geo_pathCentroidPoint,
    lineStart: d3_geo_pathCentroidLineStart,
    lineEnd: d3_geo_pathCentroidLineEnd,
    polygonStart: function() {
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
    }
  };
  function d3_geo_pathCentroidPoint(x, y) {
    d3_geo_centroidX0 += x;
    d3_geo_centroidY0 += y;
    ++d3_geo_centroidZ0;
  }
  function d3_geo_pathCentroidLineStart() {
    var x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
  }
  function d3_geo_pathCentroidLineEnd() {
    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
  }
  function d3_geo_pathCentroidRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      z = y0 * x - x0 * y;
      d3_geo_centroidX2 += z * (x0 + x);
      d3_geo_centroidY2 += z * (y0 + y);
      d3_geo_centroidZ2 += z * 3;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
    d3_geo_pathCentroid.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  function d3_geo_pathContext(context) {
    var pointRadius = 4.5;
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointRadius = _;
        return stream;
      },
      result: d3_noop
    };
    function point(x, y) {
      context.moveTo(x + pointRadius, y);
      context.arc(x, y, pointRadius, 0, τ);
    }
    function pointLineStart(x, y) {
      context.moveTo(x, y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      context.lineTo(x, y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      context.closePath();
    }
    return stream;
  }
  function d3_geo_resample(project) {
    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
    function resample(stream) {
      return (maxDepth ? resampleRecursive : resampleNone)(stream);
    }
    function resampleNone(stream) {
      return d3_geo_transformPoint(stream, function(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      });
    }
    function resampleRecursive(stream) {
      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
      var resample = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          stream.polygonStart();
          resample.lineStart = ringStart;
        },
        polygonEnd: function() {
          stream.polygonEnd();
          resample.lineStart = lineStart;
        }
      };
      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }
      function lineStart() {
        x0 = NaN;
        resample.point = linePoint;
        stream.lineStart();
      }
      function linePoint(λ, φ) {
        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }
      function lineEnd() {
        resample.point = point;
        stream.lineEnd();
      }
      function ringStart() {
        lineStart();
        resample.point = ringPoint;
        resample.lineEnd = ringEnd;
      }
      function ringPoint(λ, φ) {
        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resample.point = linePoint;
      }
      function ringEnd() {
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
        resample.lineEnd = lineEnd;
        lineEnd();
      }
      return resample;
    }
    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
      if (d2 > 4 * δ2 && depth--) {
        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
        }
      }
    }
    resample.precision = function(_) {
      if (!arguments.length) return Math.sqrt(δ2);
      maxDepth = (δ2 = _ * _) > 0 && 16;
      return resample;
    };
    return resample;
  }
  d3.geo.path = function() {
    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
        d3.geo.stream(object, cacheStream);
      }
      return contextStream.result();
    }
    path.area = function(object) {
      d3_geo_pathAreaSum = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathArea));
      return d3_geo_pathAreaSum;
    };
    path.centroid = function(object) {
      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
    };
    path.bounds = function(object) {
      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
    };
    path.projection = function(_) {
      if (!arguments.length) return projection;
      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
      return reset();
    };
    path.context = function(_) {
      if (!arguments.length) return context;
      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return reset();
    };
    path.pointRadius = function(_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };
    function reset() {
      cacheStream = null;
      return path;
    }
    return path.projection(d3.geo.albersUsa()).context(null);
  };
  function d3_geo_pathProjectStream(project) {
    var resample = d3_geo_resample(function(x, y) {
      return project([ x * d3_degrees, y * d3_degrees ]);
    });
    return function(stream) {
      return d3_geo_projectionRadians(resample(stream));
    };
  }
  d3.geo.transform = function(methods) {
    return {
      stream: function(stream) {
        var transform = new d3_geo_transform(stream);
        for (var k in methods) transform[k] = methods[k];
        return transform;
      }
    };
  };
  function d3_geo_transform(stream) {
    this.stream = stream;
  }
  d3_geo_transform.prototype = {
    point: function(x, y) {
      this.stream.point(x, y);
    },
    sphere: function() {
      this.stream.sphere();
    },
    lineStart: function() {
      this.stream.lineStart();
    },
    lineEnd: function() {
      this.stream.lineEnd();
    },
    polygonStart: function() {
      this.stream.polygonStart();
    },
    polygonEnd: function() {
      this.stream.polygonEnd();
    }
  };
  function d3_geo_transformPoint(stream, point) {
    return {
      point: point,
      sphere: function() {
        stream.sphere();
      },
      lineStart: function() {
        stream.lineStart();
      },
      lineEnd: function() {
        stream.lineEnd();
      },
      polygonStart: function() {
        stream.polygonStart();
      },
      polygonEnd: function() {
        stream.polygonEnd();
      }
    };
  }
  d3.geo.projection = d3_geo_projection;
  d3.geo.projectionMutator = d3_geo_projectionMutator;
  function d3_geo_projection(project) {
    return d3_geo_projectionMutator(function() {
      return project;
    })();
  }
  function d3_geo_projectionMutator(projectAt) {
    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
      x = project(x, y);
      return [ x[0] * k + δx, δy - x[1] * k ];
    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
    function projection(point) {
      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
      return [ point[0] * k + δx, δy - point[1] * k ];
    }
    function invert(point) {
      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
    }
    projection.stream = function(output) {
      if (stream) stream.valid = false;
      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
      stream.valid = true;
      return stream;
    };
    projection.clipAngle = function(_) {
      if (!arguments.length) return clipAngle;
      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
      return invalidate();
    };
    projection.clipExtent = function(_) {
      if (!arguments.length) return clipExtent;
      clipExtent = _;
      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
      return invalidate();
    };
    projection.scale = function(_) {
      if (!arguments.length) return k;
      k = +_;
      return reset();
    };
    projection.translate = function(_) {
      if (!arguments.length) return [ x, y ];
      x = +_[0];
      y = +_[1];
      return reset();
    };
    projection.center = function(_) {
      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
      λ = _[0] % 360 * d3_radians;
      φ = _[1] % 360 * d3_radians;
      return reset();
    };
    projection.rotate = function(_) {
      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
      δλ = _[0] % 360 * d3_radians;
      δφ = _[1] % 360 * d3_radians;
      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
      return reset();
    };
    d3.rebind(projection, projectResample, "precision");
    function reset() {
      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
      var center = project(λ, φ);
      δx = x - center[0] * k;
      δy = y + center[1] * k;
      return invalidate();
    }
    function invalidate() {
      if (stream) stream.valid = false, stream = null;
      return projection;
    }
    return function() {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return reset();
    };
  }
  function d3_geo_projectionRadians(stream) {
    return d3_geo_transformPoint(stream, function(x, y) {
      stream.point(x * d3_radians, y * d3_radians);
    });
  }
  function d3_geo_equirectangular(λ, φ) {
    return [ λ, φ ];
  }
  (d3.geo.equirectangular = function() {
    return d3_geo_projection(d3_geo_equirectangular);
  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
  d3.geo.rotation = function(rotate) {
    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    }
    forward.invert = function(coordinates) {
      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    };
    return forward;
  };
  function d3_geo_identityRotation(λ, φ) {
    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
  }
  d3_geo_identityRotation.invert = d3_geo_equirectangular;
  function d3_geo_rotation(δλ, δφ, δγ) {
    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
  }
  function d3_geo_forwardRotationλ(δλ) {
    return function(λ, φ) {
      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
    };
  }
  function d3_geo_rotationλ(δλ) {
    var rotation = d3_geo_forwardRotationλ(δλ);
    rotation.invert = d3_geo_forwardRotationλ(-δλ);
    return rotation;
  }
  function d3_geo_rotationφγ(δφ, δγ) {
    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
    function rotation(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
    }
    rotation.invert = function(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
    };
    return rotation;
  }
  d3.geo.circle = function() {
    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
    function circle() {
      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
      interpolate(null, null, 1, {
        point: function(x, y) {
          ring.push(x = rotate(x, y));
          x[0] *= d3_degrees, x[1] *= d3_degrees;
        }
      });
      return {
        type: "Polygon",
        coordinates: [ ring ]
      };
    }
    circle.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return circle;
    };
    circle.angle = function(x) {
      if (!arguments.length) return angle;
      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
      return circle;
    };
    circle.precision = function(_) {
      if (!arguments.length) return precision;
      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
      return circle;
    };
    return circle.angle(90);
  };
  function d3_geo_circleInterpolate(radius, precision) {
    var cr = Math.cos(radius), sr = Math.sin(radius);
    return function(from, to, direction, listener) {
      var step = direction * precision;
      if (from != null) {
        from = d3_geo_circleAngle(cr, from);
        to = d3_geo_circleAngle(cr, to);
        if (direction > 0 ? from < to : from > to) from += direction * τ;
      } else {
        from = radius + direction * τ;
        to = radius - .5 * step;
      }
      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
      }
    };
  }
  function d3_geo_circleAngle(cr, point) {
    var a = d3_geo_cartesian(point);
    a[0] -= cr;
    d3_geo_cartesianNormalize(a);
    var angle = d3_acos(-a[1]);
    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
  }
  d3.geo.distance = function(a, b) {
    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
  };
  d3.geo.graticule = function() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
      return {
        type: "MultiLineString",
        coordinates: lines()
      };
    }
    function lines() {
      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
        return abs(x % DX) > ε;
      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
        return abs(y % DY) > ε;
      }).map(y));
    }
    graticule.lines = function() {
      return lines().map(function(coordinates) {
        return {
          type: "LineString",
          coordinates: coordinates
        };
      });
    };
    graticule.outline = function() {
      return {
        type: "Polygon",
        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
      };
    };
    graticule.extent = function(_) {
      if (!arguments.length) return graticule.minorExtent();
      return graticule.majorExtent(_).minorExtent(_);
    };
    graticule.majorExtent = function(_) {
      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
      X0 = +_[0][0], X1 = +_[1][0];
      Y0 = +_[0][1], Y1 = +_[1][1];
      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
      return graticule.precision(precision);
    };
    graticule.minorExtent = function(_) {
      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
      x0 = +_[0][0], x1 = +_[1][0];
      y0 = +_[0][1], y1 = +_[1][1];
      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
      return graticule.precision(precision);
    };
    graticule.step = function(_) {
      if (!arguments.length) return graticule.minorStep();
      return graticule.majorStep(_).minorStep(_);
    };
    graticule.majorStep = function(_) {
      if (!arguments.length) return [ DX, DY ];
      DX = +_[0], DY = +_[1];
      return graticule;
    };
    graticule.minorStep = function(_) {
      if (!arguments.length) return [ dx, dy ];
      dx = +_[0], dy = +_[1];
      return graticule;
    };
    graticule.precision = function(_) {
      if (!arguments.length) return precision;
      precision = +_;
      x = d3_geo_graticuleX(y0, y1, 90);
      y = d3_geo_graticuleY(x0, x1, precision);
      X = d3_geo_graticuleX(Y0, Y1, 90);
      Y = d3_geo_graticuleY(X0, X1, precision);
      return graticule;
    };
    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
  };
  function d3_geo_graticuleX(y0, y1, dy) {
    var y = d3.range(y0, y1 - ε, dy).concat(y1);
    return function(x) {
      return y.map(function(y) {
        return [ x, y ];
      });
    };
  }
  function d3_geo_graticuleY(x0, x1, dx) {
    var x = d3.range(x0, x1 - ε, dx).concat(x1);
    return function(y) {
      return x.map(function(x) {
        return [ x, y ];
      });
    };
  }
  function d3_source(d) {
    return d.source;
  }
  function d3_target(d) {
    return d.target;
  }
  d3.geo.greatArc = function() {
    var source = d3_source, source_, target = d3_target, target_;
    function greatArc() {
      return {
        type: "LineString",
        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
      };
    }
    greatArc.distance = function() {
      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
    };
    greatArc.source = function(_) {
      if (!arguments.length) return source;
      source = _, source_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.target = function(_) {
      if (!arguments.length) return target;
      target = _, target_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.precision = function() {
      return arguments.length ? greatArc : 0;
    };
    return greatArc;
  };
  d3.geo.interpolate = function(source, target) {
    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
  };
  function d3_geo_interpolate(x0, y0, x1, y1) {
    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
    var interpolate = d ? function(t) {
      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
    } : function() {
      return [ x0 * d3_degrees, y0 * d3_degrees ];
    };
    interpolate.distance = d;
    return interpolate;
  }
  d3.geo.length = function(object) {
    d3_geo_lengthSum = 0;
    d3.geo.stream(object, d3_geo_length);
    return d3_geo_lengthSum;
  };
  var d3_geo_lengthSum;
  var d3_geo_length = {
    sphere: d3_noop,
    point: d3_noop,
    lineStart: d3_geo_lengthLineStart,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_lengthLineStart() {
    var λ0, sinφ0, cosφ0;
    d3_geo_length.point = function(λ, φ) {
      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
      d3_geo_length.point = nextPoint;
    };
    d3_geo_length.lineEnd = function() {
      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
    };
    function nextPoint(λ, φ) {
      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
    }
  }
  function d3_geo_azimuthal(scale, angle) {
    function azimuthal(λ, φ) {
      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
    }
    azimuthal.invert = function(x, y) {
      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
    };
    return azimuthal;
  }
  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
    return Math.sqrt(2 / (1 + cosλcosφ));
  }, function(ρ) {
    return 2 * Math.asin(ρ / 2);
  });
  (d3.geo.azimuthalEqualArea = function() {
    return d3_geo_projection(d3_geo_azimuthalEqualArea);
  }).raw = d3_geo_azimuthalEqualArea;
  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
    var c = Math.acos(cosλcosφ);
    return c && c / Math.sin(c);
  }, d3_identity);
  (d3.geo.azimuthalEquidistant = function() {
    return d3_geo_projection(d3_geo_azimuthalEquidistant);
  }).raw = d3_geo_azimuthalEquidistant;
  function d3_geo_conicConformal(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), t = function(φ) {
      return Math.tan(π / 4 + φ / 2);
    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
    if (!n) return d3_geo_mercator;
    function forward(λ, φ) {
      if (F > 0) {
        if (φ < -halfπ + ε) φ = -halfπ + ε;
      } else {
        if (φ > halfπ - ε) φ = halfπ - ε;
      }
      var ρ = F / Math.pow(t(φ), n);
      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
    };
    return forward;
  }
  (d3.geo.conicConformal = function() {
    return d3_geo_conic(d3_geo_conicConformal);
  }).raw = d3_geo_conicConformal;
  function d3_geo_conicEquidistant(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
    if (abs(n) < ε) return d3_geo_equirectangular;
    function forward(λ, φ) {
      var ρ = G - φ;
      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = G - y;
      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
    };
    return forward;
  }
  (d3.geo.conicEquidistant = function() {
    return d3_geo_conic(d3_geo_conicEquidistant);
  }).raw = d3_geo_conicEquidistant;
  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / cosλcosφ;
  }, Math.atan);
  (d3.geo.gnomonic = function() {
    return d3_geo_projection(d3_geo_gnomonic);
  }).raw = d3_geo_gnomonic;
  function d3_geo_mercator(λ, φ) {
    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
  }
  d3_geo_mercator.invert = function(x, y) {
    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
  };
  function d3_geo_mercatorProjection(project) {
    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
    m.scale = function() {
      var v = scale.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.translate = function() {
      var v = translate.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.clipExtent = function(_) {
      var v = clipExtent.apply(m, arguments);
      if (v === m) {
        if (clipAuto = _ == null) {
          var k = π * scale(), t = translate();
          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
        }
      } else if (clipAuto) {
        v = null;
      }
      return v;
    };
    return m.clipExtent(null);
  }
  (d3.geo.mercator = function() {
    return d3_geo_mercatorProjection(d3_geo_mercator);
  }).raw = d3_geo_mercator;
  var d3_geo_orthographic = d3_geo_azimuthal(function() {
    return 1;
  }, Math.asin);
  (d3.geo.orthographic = function() {
    return d3_geo_projection(d3_geo_orthographic);
  }).raw = d3_geo_orthographic;
  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / (1 + cosλcosφ);
  }, function(ρ) {
    return 2 * Math.atan(ρ);
  });
  (d3.geo.stereographic = function() {
    return d3_geo_projection(d3_geo_stereographic);
  }).raw = d3_geo_stereographic;
  function d3_geo_transverseMercator(λ, φ) {
    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
  }
  d3_geo_transverseMercator.invert = function(x, y) {
    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
  };
  (d3.geo.transverseMercator = function() {
    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
    projection.center = function(_) {
      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);
    };
    projection.rotate = function(_) {
      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
      [ _[0], _[1], _[2] - 90 ]);
    };
    return rotate([ 0, 0, 90 ]);
  }).raw = d3_geo_transverseMercator;
  d3.geom = {};
  function d3_geom_pointX(d) {
    return d[0];
  }
  function d3_geom_pointY(d) {
    return d[1];
  }
  d3.geom.hull = function(vertices) {
    var x = d3_geom_pointX, y = d3_geom_pointY;
    if (arguments.length) return hull(vertices);
    function hull(data) {
      if (data.length < 3) return [];
      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
      for (i = 0; i < n; i++) {
        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
      }
      points.sort(d3_geom_hullOrder);
      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
      return polygon;
    }
    hull.x = function(_) {
      return arguments.length ? (x = _, hull) : x;
    };
    hull.y = function(_) {
      return arguments.length ? (y = _, hull) : y;
    };
    return hull;
  };
  function d3_geom_hullUpper(points) {
    var n = points.length, hull = [ 0, 1 ], hs = 2;
    for (var i = 2; i < n; i++) {
      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
      hull[hs++] = i;
    }
    return hull.slice(0, hs);
  }
  function d3_geom_hullOrder(a, b) {
    return a[0] - b[0] || a[1] - b[1];
  }
  d3.geom.polygon = function(coordinates) {
    d3_subclass(coordinates, d3_geom_polygonPrototype);
    return coordinates;
  };
  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
  d3_geom_polygonPrototype.area = function() {
    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
    while (++i < n) {
      a = b;
      b = this[i];
      area += a[1] * b[0] - a[0] * b[1];
    }
    return area * .5;
  };
  d3_geom_polygonPrototype.centroid = function(k) {
    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
    if (!arguments.length) k = -1 / (6 * this.area());
    while (++i < n) {
      a = b;
      b = this[i];
      c = a[0] * b[1] - b[0] * a[1];
      x += (a[0] + b[0]) * c;
      y += (a[1] + b[1]) * c;
    }
    return [ x * k, y * k ];
  };
  d3_geom_polygonPrototype.clip = function(subject) {
    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
    while (++i < n) {
      input = subject.slice();
      subject.length = 0;
      b = this[i];
      c = input[(m = input.length - closed) - 1];
      j = -1;
      while (++j < m) {
        d = input[j];
        if (d3_geom_polygonInside(d, a, b)) {
          if (!d3_geom_polygonInside(c, a, b)) {
            subject.push(d3_geom_polygonIntersect(c, d, a, b));
          }
          subject.push(d);
        } else if (d3_geom_polygonInside(c, a, b)) {
          subject.push(d3_geom_polygonIntersect(c, d, a, b));
        }
        c = d;
      }
      if (closed) subject.push(subject[0]);
      a = b;
    }
    return subject;
  };
  function d3_geom_polygonInside(p, a, b) {
    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
  }
  function d3_geom_polygonIntersect(c, d, a, b) {
    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
    return [ x1 + ua * x21, y1 + ua * y21 ];
  }
  function d3_geom_polygonClosed(coordinates) {
    var a = coordinates[0], b = coordinates[coordinates.length - 1];
    return !(a[0] - b[0] || a[1] - b[1]);
  }
  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
  function d3_geom_voronoiBeach() {
    d3_geom_voronoiRedBlackNode(this);
    this.edge = this.site = this.circle = null;
  }
  function d3_geom_voronoiCreateBeach(site) {
    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
    beach.site = site;
    return beach;
  }
  function d3_geom_voronoiDetachBeach(beach) {
    d3_geom_voronoiDetachCircle(beach);
    d3_geom_voronoiBeaches.remove(beach);
    d3_geom_voronoiBeachPool.push(beach);
    d3_geom_voronoiRedBlackNode(beach);
  }
  function d3_geom_voronoiRemoveBeach(beach) {
    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
      x: x,
      y: y
    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
    d3_geom_voronoiDetachBeach(beach);
    var lArc = previous;
    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
      previous = lArc.P;
      disappearing.unshift(lArc);
      d3_geom_voronoiDetachBeach(lArc);
      lArc = previous;
    }
    disappearing.unshift(lArc);
    d3_geom_voronoiDetachCircle(lArc);
    var rArc = next;
    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
      next = rArc.N;
      disappearing.push(rArc);
      d3_geom_voronoiDetachBeach(rArc);
      rArc = next;
    }
    disappearing.push(rArc);
    d3_geom_voronoiDetachCircle(rArc);
    var nArcs = disappearing.length, iArc;
    for (iArc = 1; iArc < nArcs; ++iArc) {
      rArc = disappearing[iArc];
      lArc = disappearing[iArc - 1];
      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
    }
    lArc = disappearing[0];
    rArc = disappearing[nArcs - 1];
    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiAddBeach(site) {
    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
    while (node) {
      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
      if (dxl > ε) node = node.L; else {
        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
        if (dxr > ε) {
          if (!node.R) {
            lArc = node;
            break;
          }
          node = node.R;
        } else {
          if (dxl > -ε) {
            lArc = node.P;
            rArc = node;
          } else if (dxr > -ε) {
            lArc = node;
            rArc = node.N;
          } else {
            lArc = rArc = node;
          }
          break;
        }
      }
    }
    var newArc = d3_geom_voronoiCreateBeach(site);
    d3_geom_voronoiBeaches.insert(lArc, newArc);
    if (!lArc && !rArc) return;
    if (lArc === rArc) {
      d3_geom_voronoiDetachCircle(lArc);
      rArc = d3_geom_voronoiCreateBeach(lArc.site);
      d3_geom_voronoiBeaches.insert(newArc, rArc);
      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      d3_geom_voronoiAttachCircle(lArc);
      d3_geom_voronoiAttachCircle(rArc);
      return;
    }
    if (!rArc) {
      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      return;
    }
    d3_geom_voronoiDetachCircle(lArc);
    d3_geom_voronoiDetachCircle(rArc);
    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
      x: (cy * hb - by * hc) / d + ax,
      y: (bx * hc - cx * hb) / d + ay
    };
    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
    if (!pby2) return rfocx;
    var lArc = arc.P;
    if (!lArc) return -Infinity;
    site = lArc.site;
    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
    if (!plby2) return lfocx;
    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
    return (rfocx + lfocx) / 2;
  }
  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
    var rArc = arc.N;
    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
    var site = arc.site;
    return site.y === directrix ? site.x : Infinity;
  }
  function d3_geom_voronoiCell(site) {
    this.site = site;
    this.edges = [];
  }
  d3_geom_voronoiCell.prototype.prepare = function() {
    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
    while (iHalfEdge--) {
      edge = halfEdges[iHalfEdge].edge;
      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
    }
    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
    return halfEdges.length;
  };
  function d3_geom_voronoiCloseCells(extent) {
    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
    while (iCell--) {
      cell = cells[iCell];
      if (!cell || !cell.prepare()) continue;
      halfEdges = cell.edges;
      nHalfEdges = halfEdges.length;
      iHalfEdge = 0;
      while (iHalfEdge < nHalfEdges) {
        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
            x: x0,
            y: abs(x2 - x0) < ε ? y2 : y1
          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
            x: abs(y2 - y1) < ε ? x2 : x1,
            y: y1
          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
            x: x1,
            y: abs(x2 - x1) < ε ? y2 : y0
          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
            x: abs(y2 - y0) < ε ? x2 : x0,
            y: y0
          } : null), cell.site, null));
          ++nHalfEdges;
        }
      }
    }
  }
  function d3_geom_voronoiHalfEdgeOrder(a, b) {
    return b.angle - a.angle;
  }
  function d3_geom_voronoiCircle() {
    d3_geom_voronoiRedBlackNode(this);
    this.x = this.y = this.arc = this.site = this.cy = null;
  }
  function d3_geom_voronoiAttachCircle(arc) {
    var lArc = arc.P, rArc = arc.N;
    if (!lArc || !rArc) return;
    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
    if (lSite === rSite) return;
    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
    var d = 2 * (ax * cy - ay * cx);
    if (d >= -ε2) return;
    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
    circle.arc = arc;
    circle.site = cSite;
    circle.x = x + bx;
    circle.y = cy + Math.sqrt(x * x + y * y);
    circle.cy = cy;
    arc.circle = circle;
    var before = null, node = d3_geom_voronoiCircles._;
    while (node) {
      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
        if (node.L) node = node.L; else {
          before = node.P;
          break;
        }
      } else {
        if (node.R) node = node.R; else {
          before = node;
          break;
        }
      }
    }
    d3_geom_voronoiCircles.insert(before, circle);
    if (!before) d3_geom_voronoiFirstCircle = circle;
  }
  function d3_geom_voronoiDetachCircle(arc) {
    var circle = arc.circle;
    if (circle) {
      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
      d3_geom_voronoiCircles.remove(circle);
      d3_geom_voronoiCirclePool.push(circle);
      d3_geom_voronoiRedBlackNode(circle);
      arc.circle = null;
    }
  }
  function d3_geom_voronoiClipEdges(extent) {
    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
    while (i--) {
      e = edges[i];
      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
        e.a = e.b = null;
        edges.splice(i, 1);
      }
    }
  }
  function d3_geom_voronoiConnectEdge(edge, extent) {
    var vb = edge.b;
    if (vb) return true;
    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
    if (ry === ly) {
      if (fx < x0 || fx >= x1) return;
      if (lx > rx) {
        if (!va) va = {
          x: fx,
          y: y0
        }; else if (va.y >= y1) return;
        vb = {
          x: fx,
          y: y1
        };
      } else {
        if (!va) va = {
          x: fx,
          y: y1
        }; else if (va.y < y0) return;
        vb = {
          x: fx,
          y: y0
        };
      }
    } else {
      fm = (lx - rx) / (ry - ly);
      fb = fy - fm * fx;
      if (fm < -1 || fm > 1) {
        if (lx > rx) {
          if (!va) va = {
            x: (y0 - fb) / fm,
            y: y0
          }; else if (va.y >= y1) return;
          vb = {
            x: (y1 - fb) / fm,
            y: y1
          };
        } else {
          if (!va) va = {
            x: (y1 - fb) / fm,
            y: y1
          }; else if (va.y < y0) return;
          vb = {
            x: (y0 - fb) / fm,
            y: y0
          };
        }
      } else {
        if (ly < ry) {
          if (!va) va = {
            x: x0,
            y: fm * x0 + fb
          }; else if (va.x >= x1) return;
          vb = {
            x: x1,
            y: fm * x1 + fb
          };
        } else {
          if (!va) va = {
            x: x1,
            y: fm * x1 + fb
          }; else if (va.x < x0) return;
          vb = {
            x: x0,
            y: fm * x0 + fb
          };
        }
      }
    }
    edge.a = va;
    edge.b = vb;
    return true;
  }
  function d3_geom_voronoiEdge(lSite, rSite) {
    this.l = lSite;
    this.r = rSite;
    this.a = this.b = null;
  }
  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, rSite);
    d3_geom_voronoiEdges.push(edge);
    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
    return edge;
  }
  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, null);
    edge.a = va;
    edge.b = vb;
    d3_geom_voronoiEdges.push(edge);
    return edge;
  }
  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
    if (!edge.a && !edge.b) {
      edge.a = vertex;
      edge.l = lSite;
      edge.r = rSite;
    } else if (edge.l === rSite) {
      edge.b = vertex;
    } else {
      edge.a = vertex;
    }
  }
  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
    var va = edge.a, vb = edge.b;
    this.edge = edge;
    this.site = lSite;
    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
  }
  d3_geom_voronoiHalfEdge.prototype = {
    start: function() {
      return this.edge.l === this.site ? this.edge.a : this.edge.b;
    },
    end: function() {
      return this.edge.l === this.site ? this.edge.b : this.edge.a;
    }
  };
  function d3_geom_voronoiRedBlackTree() {
    this._ = null;
  }
  function d3_geom_voronoiRedBlackNode(node) {
    node.U = node.C = node.L = node.R = node.P = node.N = null;
  }
  d3_geom_voronoiRedBlackTree.prototype = {
    insert: function(after, node) {
      var parent, grandpa, uncle;
      if (after) {
        node.P = after;
        node.N = after.N;
        if (after.N) after.N.P = node;
        after.N = node;
        if (after.R) {
          after = after.R;
          while (after.L) after = after.L;
          after.L = node;
        } else {
          after.R = node;
        }
        parent = after;
      } else if (this._) {
        after = d3_geom_voronoiRedBlackFirst(this._);
        node.P = null;
        node.N = after;
        after.P = after.L = node;
        parent = after;
      } else {
        node.P = node.N = null;
        this._ = node;
        parent = null;
      }
      node.L = node.R = null;
      node.U = parent;
      node.C = true;
      after = node;
      while (parent && parent.C) {
        grandpa = parent.U;
        if (parent === grandpa.L) {
          uncle = grandpa.R;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.R) {
              d3_geom_voronoiRedBlackRotateLeft(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
          }
        } else {
          uncle = grandpa.L;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.L) {
              d3_geom_voronoiRedBlackRotateRight(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
          }
        }
        parent = after.U;
      }
      this._.C = false;
    },
    remove: function(node) {
      if (node.N) node.N.P = node.P;
      if (node.P) node.P.N = node.N;
      node.N = node.P = null;
      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
      if (parent) {
        if (parent.L === node) parent.L = next; else parent.R = next;
      } else {
        this._ = next;
      }
      if (left && right) {
        red = next.C;
        next.C = node.C;
        next.L = left;
        left.U = next;
        if (next !== right) {
          parent = next.U;
          next.U = node.U;
          node = next.R;
          parent.L = node;
          next.R = right;
          right.U = next;
        } else {
          next.U = parent;
          parent = next;
          node = next.R;
        }
      } else {
        red = node.C;
        node = next;
      }
      if (node) node.U = parent;
      if (red) return;
      if (node && node.C) {
        node.C = false;
        return;
      }
      do {
        if (node === this._) break;
        if (node === parent.L) {
          sibling = parent.R;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            sibling = parent.R;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.R || !sibling.R.C) {
              sibling.L.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateRight(this, sibling);
              sibling = parent.R;
            }
            sibling.C = parent.C;
            parent.C = sibling.R.C = false;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            node = this._;
            break;
          }
        } else {
          sibling = parent.L;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            sibling = parent.L;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.L || !sibling.L.C) {
              sibling.R.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
              sibling = parent.L;
            }
            sibling.C = parent.C;
            parent.C = sibling.L.C = false;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            node = this._;
            break;
          }
        }
        sibling.C = true;
        node = parent;
        parent = parent.U;
      } while (!node.C);
      if (node) node.C = false;
    }
  };
  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
    var p = node, q = node.R, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.R = q.L;
    if (p.R) p.R.U = p;
    q.L = p;
  }
  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
    var p = node, q = node.L, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.L = q.R;
    if (p.L) p.L.U = p;
    q.R = p;
  }
  function d3_geom_voronoiRedBlackFirst(node) {
    while (node.L) node = node.L;
    return node;
  }
  function d3_geom_voronoi(sites, bbox) {
    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
    d3_geom_voronoiEdges = [];
    d3_geom_voronoiCells = new Array(sites.length);
    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
    while (true) {
      circle = d3_geom_voronoiFirstCircle;
      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
        if (site.x !== x0 || site.y !== y0) {
          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
          d3_geom_voronoiAddBeach(site);
          x0 = site.x, y0 = site.y;
        }
        site = sites.pop();
      } else if (circle) {
        d3_geom_voronoiRemoveBeach(circle.arc);
      } else {
        break;
      }
    }
    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
    var diagram = {
      cells: d3_geom_voronoiCells,
      edges: d3_geom_voronoiEdges
    };
    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
    return diagram;
  }
  function d3_geom_voronoiVertexOrder(a, b) {
    return b.y - a.y || b.x - a.x;
  }
  d3.geom.voronoi = function(points) {
    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
    if (points) return voronoi(points);
    function voronoi(data) {
      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
          var s = e.start();
          return [ s.x, s.y ];
        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
        polygon.point = data[i];
      });
      return polygons;
    }
    function sites(data) {
      return data.map(function(d, i) {
        return {
          x: Math.round(fx(d, i) / ε) * ε,
          y: Math.round(fy(d, i) / ε) * ε,
          i: i
        };
      });
    }
    voronoi.links = function(data) {
      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
        return edge.l && edge.r;
      }).map(function(edge) {
        return {
          source: data[edge.l.i],
          target: data[edge.r.i]
        };
      });
    };
    voronoi.triangles = function(data) {
      var triangles = [];
      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
        while (++j < m) {
          e0 = e1;
          s0 = s1;
          e1 = edges[j].edge;
          s1 = e1.l === site ? e1.r : e1.l;
          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
          }
        }
      });
      return triangles;
    };
    voronoi.x = function(_) {
      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
    };
    voronoi.y = function(_) {
      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
    };
    voronoi.clipExtent = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
      return voronoi;
    };
    voronoi.size = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
    };
    return voronoi;
  };
  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
  function d3_geom_voronoiTriangleArea(a, b, c) {
    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
  }
  d3.geom.delaunay = function(vertices) {
    return d3.geom.voronoi().triangles(vertices);
  };
  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
    if (compat = arguments.length) {
      x = d3_geom_quadtreeCompatX;
      y = d3_geom_quadtreeCompatY;
      if (compat === 3) {
        y2 = y1;
        x2 = x1;
        y1 = x1 = 0;
      }
      return quadtree(points);
    }
    function quadtree(data) {
      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
      if (x1 != null) {
        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
      } else {
        x2_ = y2_ = -(x1_ = y1_ = Infinity);
        xs = [], ys = [];
        n = data.length;
        if (compat) for (i = 0; i < n; ++i) {
          d = data[i];
          if (d.x < x1_) x1_ = d.x;
          if (d.y < y1_) y1_ = d.y;
          if (d.x > x2_) x2_ = d.x;
          if (d.y > y2_) y2_ = d.y;
          xs.push(d.x);
          ys.push(d.y);
        } else for (i = 0; i < n; ++i) {
          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
          if (x_ < x1_) x1_ = x_;
          if (y_ < y1_) y1_ = y_;
          if (x_ > x2_) x2_ = x_;
          if (y_ > y2_) y2_ = y_;
          xs.push(x_);
          ys.push(y_);
        }
      }
      var dx = x2_ - x1_, dy = y2_ - y1_;
      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
      function insert(n, d, x, y, x1, y1, x2, y2) {
        if (isNaN(x) || isNaN(y)) return;
        if (n.leaf) {
          var nx = n.x, ny = n.y;
          if (nx != null) {
            if (abs(nx - x) + abs(ny - y) < .01) {
              insertChild(n, d, x, y, x1, y1, x2, y2);
            } else {
              var nPoint = n.point;
              n.x = n.y = n.point = null;
              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
              insertChild(n, d, x, y, x1, y1, x2, y2);
            }
          } else {
            n.x = x, n.y = y, n.point = d;
          }
        } else {
          insertChild(n, d, x, y, x1, y1, x2, y2);
        }
      }
      function insertChild(n, d, x, y, x1, y1, x2, y2) {
        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;
        n.leaf = false;
        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
        if (right) x1 = xm; else x2 = xm;
        if (below) y1 = ym; else y2 = ym;
        insert(n, d, x, y, x1, y1, x2, y2);
      }
      var root = d3_geom_quadtreeNode();
      root.add = function(d) {
        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
      };
      root.visit = function(f) {
        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
      };
      root.find = function(point) {
        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
      };
      i = -1;
      if (x1 == null) {
        while (++i < n) {
          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
        }
        --i;
      } else data.forEach(root.add);
      xs = ys = data = d = null;
      return root;
    }
    quadtree.x = function(_) {
      return arguments.length ? (x = _, quadtree) : x;
    };
    quadtree.y = function(_) {
      return arguments.length ? (y = _, quadtree) : y;
    };
    quadtree.extent = function(_) {
      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
      y2 = +_[1][1];
      return quadtree;
    };
    quadtree.size = function(_) {
      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
      return quadtree;
    };
    return quadtree;
  };
  function d3_geom_quadtreeCompatX(d) {
    return d.x;
  }
  function d3_geom_quadtreeCompatY(d) {
    return d.y;
  }
  function d3_geom_quadtreeNode() {
    return {
      leaf: true,
      nodes: [],
      point: null,
      x: null,
      y: null
    };
  }
  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
    if (!f(node, x1, y1, x2, y2)) {
      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
    }
  }
  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
    var minDistance2 = Infinity, closestPoint;
    (function find(node, x1, y1, x2, y2) {
      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;
      if (point = node.point) {
        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;
        if (distance2 < minDistance2) {
          var distance = Math.sqrt(minDistance2 = distance2);
          x0 = x - distance, y0 = y - distance;
          x3 = x + distance, y3 = y + distance;
          closestPoint = point;
        }
      }
      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;
      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
        if (node = children[i & 3]) switch (i & 3) {
         case 0:
          find(node, x1, y1, xm, ym);
          break;

         case 1:
          find(node, xm, y1, x2, ym);
          break;

         case 2:
          find(node, x1, ym, xm, y2);
          break;

         case 3:
          find(node, xm, ym, x2, y2);
          break;
        }
      }
    })(root, x0, y0, x3, y3);
    return closestPoint;
  }
  d3.interpolateRgb = d3_interpolateRgb;
  function d3_interpolateRgb(a, b) {
    a = d3.rgb(a);
    b = d3.rgb(b);
    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
    return function(t) {
      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
    };
  }
  d3.interpolateObject = d3_interpolateObject;
  function d3_interpolateObject(a, b) {
    var i = {}, c = {}, k;
    for (k in a) {
      if (k in b) {
        i[k] = d3_interpolate(a[k], b[k]);
      } else {
        c[k] = a[k];
      }
    }
    for (k in b) {
      if (!(k in a)) {
        c[k] = b[k];
      }
    }
    return function(t) {
      for (k in i) c[k] = i[k](t);
      return c;
    };
  }
  d3.interpolateNumber = d3_interpolateNumber;
  function d3_interpolateNumber(a, b) {
    a = +a, b = +b;
    return function(t) {
      return a * (1 - t) + b * t;
    };
  }
  d3.interpolateString = d3_interpolateString;
  function d3_interpolateString(a, b) {
    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
    a = a + "", b = b + "";
    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
      if ((bs = bm.index) > bi) {
        bs = b.slice(bi, bs);
        if (s[i]) s[i] += bs; else s[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s[i]) s[i] += bm; else s[++i] = bm;
      } else {
        s[++i] = null;
        q.push({
          i: i,
          x: d3_interpolateNumber(am, bm)
        });
      }
      bi = d3_interpolate_numberB.lastIndex;
    }
    if (bi < b.length) {
      bs = b.slice(bi);
      if (s[i]) s[i] += bs; else s[++i] = bs;
    }
    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
      return b(t) + "";
    }) : function() {
      return b;
    } : (b = q.length, function(t) {
      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    });
  }
  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
  d3.interpolate = d3_interpolate;
  function d3_interpolate(a, b) {
    var i = d3.interpolators.length, f;
    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
    return f;
  }
  d3.interpolators = [ function(a, b) {
    var t = typeof b;
    return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
  } ];
  d3.interpolateArray = d3_interpolateArray;
  function d3_interpolateArray(a, b) {
    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
    for (;i < na; ++i) c[i] = a[i];
    for (;i < nb; ++i) c[i] = b[i];
    return function(t) {
      for (i = 0; i < n0; ++i) c[i] = x[i](t);
      return c;
    };
  }
  var d3_ease_default = function() {
    return d3_identity;
  };
  var d3_ease = d3.map({
    linear: d3_ease_default,
    poly: d3_ease_poly,
    quad: function() {
      return d3_ease_quad;
    },
    cubic: function() {
      return d3_ease_cubic;
    },
    sin: function() {
      return d3_ease_sin;
    },
    exp: function() {
      return d3_ease_exp;
    },
    circle: function() {
      return d3_ease_circle;
    },
    elastic: d3_ease_elastic,
    back: d3_ease_back,
    bounce: function() {
      return d3_ease_bounce;
    }
  });
  var d3_ease_mode = d3.map({
    "in": d3_identity,
    out: d3_ease_reverse,
    "in-out": d3_ease_reflect,
    "out-in": function(f) {
      return d3_ease_reflect(d3_ease_reverse(f));
    }
  });
  d3.ease = function(name) {
    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
    t = d3_ease.get(t) || d3_ease_default;
    m = d3_ease_mode.get(m) || d3_identity;
    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
  };
  function d3_ease_clamp(f) {
    return function(t) {
      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
    };
  }
  function d3_ease_reverse(f) {
    return function(t) {
      return 1 - f(1 - t);
    };
  }
  function d3_ease_reflect(f) {
    return function(t) {
      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
    };
  }
  function d3_ease_quad(t) {
    return t * t;
  }
  function d3_ease_cubic(t) {
    return t * t * t;
  }
  function d3_ease_cubicInOut(t) {
    if (t <= 0) return 0;
    if (t >= 1) return 1;
    var t2 = t * t, t3 = t2 * t;
    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
  }
  function d3_ease_poly(e) {
    return function(t) {
      return Math.pow(t, e);
    };
  }
  function d3_ease_sin(t) {
    return 1 - Math.cos(t * halfπ);
  }
  function d3_ease_exp(t) {
    return Math.pow(2, 10 * (t - 1));
  }
  function d3_ease_circle(t) {
    return 1 - Math.sqrt(1 - t * t);
  }
  function d3_ease_elastic(a, p) {
    var s;
    if (arguments.length < 2) p = .45;
    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
    return function(t) {
      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
    };
  }
  function d3_ease_back(s) {
    if (!s) s = 1.70158;
    return function(t) {
      return t * t * ((s + 1) * t - s);
    };
  }
  function d3_ease_bounce(t) {
    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
  }
  d3.interpolateHcl = d3_interpolateHcl;
  function d3_interpolateHcl(a, b) {
    a = d3.hcl(a);
    b = d3.hcl(b);
    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
    };
  }
  d3.interpolateHsl = d3_interpolateHsl;
  function d3_interpolateHsl(a, b) {
    a = d3.hsl(a);
    b = d3.hsl(b);
    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
    };
  }
  d3.interpolateLab = d3_interpolateLab;
  function d3_interpolateLab(a, b) {
    a = d3.lab(a);
    b = d3.lab(b);
    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
    return function(t) {
      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
    };
  }
  d3.interpolateRound = d3_interpolateRound;
  function d3_interpolateRound(a, b) {
    b -= a;
    return function(t) {
      return Math.round(a + b * t);
    };
  }
  d3.transform = function(string) {
    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
    return (d3.transform = function(string) {
      if (string != null) {
        g.setAttribute("transform", string);
        var t = g.transform.baseVal.consolidate();
      }
      return new d3_transform(t ? t.matrix : d3_transformIdentity);
    })(string);
  };
  function d3_transform(m) {
    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
    if (r0[0] * r1[1] < r1[0] * r0[1]) {
      r0[0] *= -1;
      r0[1] *= -1;
      kx *= -1;
      kz *= -1;
    }
    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
    this.translate = [ m.e, m.f ];
    this.scale = [ kx, ky ];
    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
  }
  d3_transform.prototype.toString = function() {
    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
  };
  function d3_transformDot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
  function d3_transformNormalize(a) {
    var k = Math.sqrt(d3_transformDot(a, a));
    if (k) {
      a[0] /= k;
      a[1] /= k;
    }
    return k;
  }
  function d3_transformCombine(a, b, k) {
    a[0] += k * b[0];
    a[1] += k * b[1];
    return a;
  }
  var d3_transformIdentity = {
    a: 1,
    b: 0,
    c: 0,
    d: 1,
    e: 0,
    f: 0
  };
  d3.interpolateTransform = d3_interpolateTransform;
  function d3_interpolateTransformPop(s) {
    return s.length ? s.pop() + "," : "";
  }
  function d3_interpolateTranslate(ta, tb, s, q) {
    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {
      var i = s.push("translate(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: d3_interpolateNumber(ta[0], tb[0])
      }, {
        i: i - 2,
        x: d3_interpolateNumber(ta[1], tb[1])
      });
    } else if (tb[0] || tb[1]) {
      s.push("translate(" + tb + ")");
    }
  }
  function d3_interpolateRotate(ra, rb, s, q) {
    if (ra !== rb) {
      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
      q.push({
        i: s.push(d3_interpolateTransformPop(s) + "rotate(", null, ")") - 2,
        x: d3_interpolateNumber(ra, rb)
      });
    } else if (rb) {
      s.push(d3_interpolateTransformPop(s) + "rotate(" + rb + ")");
    }
  }
  function d3_interpolateSkew(wa, wb, s, q) {
    if (wa !== wb) {
      q.push({
        i: s.push(d3_interpolateTransformPop(s) + "skewX(", null, ")") - 2,
        x: d3_interpolateNumber(wa, wb)
      });
    } else if (wb) {
      s.push(d3_interpolateTransformPop(s) + "skewX(" + wb + ")");
    }
  }
  function d3_interpolateScale(ka, kb, s, q) {
    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {
      var i = s.push(d3_interpolateTransformPop(s) + "scale(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: d3_interpolateNumber(ka[0], kb[0])
      }, {
        i: i - 2,
        x: d3_interpolateNumber(ka[1], kb[1])
      });
    } else if (kb[0] !== 1 || kb[1] !== 1) {
      s.push(d3_interpolateTransformPop(s) + "scale(" + kb + ")");
    }
  }
  function d3_interpolateTransform(a, b) {
    var s = [], q = [];
    a = d3.transform(a), b = d3.transform(b);
    d3_interpolateTranslate(a.translate, b.translate, s, q);
    d3_interpolateRotate(a.rotate, b.rotate, s, q);
    d3_interpolateSkew(a.skew, b.skew, s, q);
    d3_interpolateScale(a.scale, b.scale, s, q);
    a = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  }
  function d3_uninterpolateNumber(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return (x - a) / b;
    };
  }
  function d3_uninterpolateClamp(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return Math.max(0, Math.min(1, (x - a) / b));
    };
  }
  d3.layout = {};
  d3.layout.bundle = function() {
    return function(links) {
      var paths = [], i = -1, n = links.length;
      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
      return paths;
    };
  };
  function d3_layout_bundlePath(link) {
    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
    while (start !== lca) {
      start = start.parent;
      points.push(start);
    }
    var k = points.length;
    while (end !== lca) {
      points.splice(k, 0, end);
      end = end.parent;
    }
    return points;
  }
  function d3_layout_bundleAncestors(node) {
    var ancestors = [], parent = node.parent;
    while (parent != null) {
      ancestors.push(node);
      node = parent;
      parent = parent.parent;
    }
    ancestors.push(node);
    return ancestors;
  }
  function d3_layout_bundleLeastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
    while (aNode === bNode) {
      sharedNode = aNode;
      aNode = aNodes.pop();
      bNode = bNodes.pop();
    }
    return sharedNode;
  }
  d3.layout.chord = function() {
    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
    function relayout() {
      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
      chords = [];
      groups = [];
      k = 0, i = -1;
      while (++i < n) {
        x = 0, j = -1;
        while (++j < n) {
          x += matrix[i][j];
        }
        groupSums.push(x);
        subgroupIndex.push(d3.range(n));
        k += x;
      }
      if (sortGroups) {
        groupIndex.sort(function(a, b) {
          return sortGroups(groupSums[a], groupSums[b]);
        });
      }
      if (sortSubgroups) {
        subgroupIndex.forEach(function(d, i) {
          d.sort(function(a, b) {
            return sortSubgroups(matrix[i][a], matrix[i][b]);
          });
        });
      }
      k = (τ - padding * n) / k;
      x = 0, i = -1;
      while (++i < n) {
        x0 = x, j = -1;
        while (++j < n) {
          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
          subgroups[di + "-" + dj] = {
            index: di,
            subindex: dj,
            startAngle: a0,
            endAngle: a1,
            value: v
          };
        }
        groups[di] = {
          index: di,
          startAngle: x0,
          endAngle: x,
          value: groupSums[di]
        };
        x += padding;
      }
      i = -1;
      while (++i < n) {
        j = i - 1;
        while (++j < n) {
          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
          if (source.value || target.value) {
            chords.push(source.value < target.value ? {
              source: target,
              target: source
            } : {
              source: source,
              target: target
            });
          }
        }
      }
      if (sortChords) resort();
    }
    function resort() {
      chords.sort(function(a, b) {
        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
      });
    }
    chord.matrix = function(x) {
      if (!arguments.length) return matrix;
      n = (matrix = x) && matrix.length;
      chords = groups = null;
      return chord;
    };
    chord.padding = function(x) {
      if (!arguments.length) return padding;
      padding = x;
      chords = groups = null;
      return chord;
    };
    chord.sortGroups = function(x) {
      if (!arguments.length) return sortGroups;
      sortGroups = x;
      chords = groups = null;
      return chord;
    };
    chord.sortSubgroups = function(x) {
      if (!arguments.length) return sortSubgroups;
      sortSubgroups = x;
      chords = null;
      return chord;
    };
    chord.sortChords = function(x) {
      if (!arguments.length) return sortChords;
      sortChords = x;
      if (chords) resort();
      return chord;
    };
    chord.chords = function() {
      if (!chords) relayout();
      return chords;
    };
    chord.groups = function() {
      if (!groups) relayout();
      return groups;
    };
    return chord;
  };
  d3.layout.force = function() {
    var force = {}, event = d3.dispatch("start", "tick", "end"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
    function repulse(node) {
      return function(quad, x1, _, x2) {
        if (quad.point !== node) {
          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
          if (dw * dw / theta2 < dn) {
            if (dn < chargeDistance2) {
              var k = quad.charge / dn;
              node.px -= dx * k;
              node.py -= dy * k;
            }
            return true;
          }
          if (quad.point && dn && dn < chargeDistance2) {
            var k = quad.pointCharge / dn;
            node.px -= dx * k;
            node.py -= dy * k;
          }
        }
        return !quad.charge;
      };
    }
    force.tick = function() {
      if ((alpha *= .99) < .005) {
        timer = null;
        event.end({
          type: "end",
          alpha: alpha = 0
        });
        return true;
      }
      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
      for (i = 0; i < m; ++i) {
        o = links[i];
        s = o.source;
        t = o.target;
        x = t.x - s.x;
        y = t.y - s.y;
        if (l = x * x + y * y) {
          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
          x *= l;
          y *= l;
          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);
          t.y -= y * k;
          s.x += x * (k = 1 - k);
          s.y += y * k;
        }
      }
      if (k = alpha * gravity) {
        x = size[0] / 2;
        y = size[1] / 2;
        i = -1;
        if (k) while (++i < n) {
          o = nodes[i];
          o.x += (x - o.x) * k;
          o.y += (y - o.y) * k;
        }
      }
      if (charge) {
        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
        i = -1;
        while (++i < n) {
          if (!(o = nodes[i]).fixed) {
            q.visit(repulse(o));
          }
        }
      }
      i = -1;
      while (++i < n) {
        o = nodes[i];
        if (o.fixed) {
          o.x = o.px;
          o.y = o.py;
        } else {
          o.x -= (o.px - (o.px = o.x)) * friction;
          o.y -= (o.py - (o.py = o.y)) * friction;
        }
      }
      event.tick({
        type: "tick",
        alpha: alpha
      });
    };
    force.nodes = function(x) {
      if (!arguments.length) return nodes;
      nodes = x;
      return force;
    };
    force.links = function(x) {
      if (!arguments.length) return links;
      links = x;
      return force;
    };
    force.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return force;
    };
    force.linkDistance = function(x) {
      if (!arguments.length) return linkDistance;
      linkDistance = typeof x === "function" ? x : +x;
      return force;
    };
    force.distance = force.linkDistance;
    force.linkStrength = function(x) {
      if (!arguments.length) return linkStrength;
      linkStrength = typeof x === "function" ? x : +x;
      return force;
    };
    force.friction = function(x) {
      if (!arguments.length) return friction;
      friction = +x;
      return force;
    };
    force.charge = function(x) {
      if (!arguments.length) return charge;
      charge = typeof x === "function" ? x : +x;
      return force;
    };
    force.chargeDistance = function(x) {
      if (!arguments.length) return Math.sqrt(chargeDistance2);
      chargeDistance2 = x * x;
      return force;
    };
    force.gravity = function(x) {
      if (!arguments.length) return gravity;
      gravity = +x;
      return force;
    };
    force.theta = function(x) {
      if (!arguments.length) return Math.sqrt(theta2);
      theta2 = x * x;
      return force;
    };
    force.alpha = function(x) {
      if (!arguments.length) return alpha;
      x = +x;
      if (alpha) {
        if (x > 0) {
          alpha = x;
        } else {
          timer.c = null, timer.t = NaN, timer = null;
          event.end({
            type: "end",
            alpha: alpha = 0
          });
        }
      } else if (x > 0) {
        event.start({
          type: "start",
          alpha: alpha = x
        });
        timer = d3_timer(force.tick);
      }
      return force;
    };
    force.start = function() {
      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
      for (i = 0; i < n; ++i) {
        (o = nodes[i]).index = i;
        o.weight = 0;
      }
      for (i = 0; i < m; ++i) {
        o = links[i];
        if (typeof o.source == "number") o.source = nodes[o.source];
        if (typeof o.target == "number") o.target = nodes[o.target];
        ++o.source.weight;
        ++o.target.weight;
      }
      for (i = 0; i < n; ++i) {
        o = nodes[i];
        if (isNaN(o.x)) o.x = position("x", w);
        if (isNaN(o.y)) o.y = position("y", h);
        if (isNaN(o.px)) o.px = o.x;
        if (isNaN(o.py)) o.py = o.y;
      }
      distances = [];
      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
      strengths = [];
      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
      charges = [];
      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
      function position(dimension, size) {
        if (!neighbors) {
          neighbors = new Array(n);
          for (j = 0; j < n; ++j) {
            neighbors[j] = [];
          }
          for (j = 0; j < m; ++j) {
            var o = links[j];
            neighbors[o.source.index].push(o.target);
            neighbors[o.target.index].push(o.source);
          }
        }
        var candidates = neighbors[i], j = -1, l = candidates.length, x;
        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;
        return Math.random() * size;
      }
      return force.resume();
    };
    force.resume = function() {
      return force.alpha(.1);
    };
    force.stop = function() {
      return force.alpha(0);
    };
    force.drag = function() {
      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
      if (!arguments.length) return drag;
      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
    };
    function dragmove(d) {
      d.px = d3.event.x, d.py = d3.event.y;
      force.resume();
    }
    return d3.rebind(force, event, "on");
  };
  function d3_layout_forceDragstart(d) {
    d.fixed |= 2;
  }
  function d3_layout_forceDragend(d) {
    d.fixed &= ~6;
  }
  function d3_layout_forceMouseover(d) {
    d.fixed |= 4;
    d.px = d.x, d.py = d.y;
  }
  function d3_layout_forceMouseout(d) {
    d.fixed &= ~4;
  }
  function d3_layout_forceAccumulate(quad, alpha, charges) {
    var cx = 0, cy = 0;
    quad.charge = 0;
    if (!quad.leaf) {
      var nodes = quad.nodes, n = nodes.length, i = -1, c;
      while (++i < n) {
        c = nodes[i];
        if (c == null) continue;
        d3_layout_forceAccumulate(c, alpha, charges);
        quad.charge += c.charge;
        cx += c.charge * c.cx;
        cy += c.charge * c.cy;
      }
    }
    if (quad.point) {
      if (!quad.leaf) {
        quad.point.x += Math.random() - .5;
        quad.point.y += Math.random() - .5;
      }
      var k = alpha * charges[quad.point.index];
      quad.charge += quad.pointCharge = k;
      cx += k * quad.point.x;
      cy += k * quad.point.y;
    }
    quad.cx = cx / quad.charge;
    quad.cy = cy / quad.charge;
  }
  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
  d3.layout.hierarchy = function() {
    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
    function hierarchy(root) {
      var stack = [ root ], nodes = [], node;
      root.depth = 0;
      while ((node = stack.pop()) != null) {
        nodes.push(node);
        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
          var n, childs, child;
          while (--n >= 0) {
            stack.push(child = childs[n]);
            child.parent = node;
            child.depth = node.depth + 1;
          }
          if (value) node.value = 0;
          node.children = childs;
        } else {
          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
          delete node.children;
        }
      }
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var childs, parent;
        if (sort && (childs = node.children)) childs.sort(sort);
        if (value && (parent = node.parent)) parent.value += node.value;
      });
      return nodes;
    }
    hierarchy.sort = function(x) {
      if (!arguments.length) return sort;
      sort = x;
      return hierarchy;
    };
    hierarchy.children = function(x) {
      if (!arguments.length) return children;
      children = x;
      return hierarchy;
    };
    hierarchy.value = function(x) {
      if (!arguments.length) return value;
      value = x;
      return hierarchy;
    };
    hierarchy.revalue = function(root) {
      if (value) {
        d3_layout_hierarchyVisitBefore(root, function(node) {
          if (node.children) node.value = 0;
        });
        d3_layout_hierarchyVisitAfter(root, function(node) {
          var parent;
          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
          if (parent = node.parent) parent.value += node.value;
        });
      }
      return root;
    };
    return hierarchy;
  };
  function d3_layout_hierarchyRebind(object, hierarchy) {
    d3.rebind(object, hierarchy, "sort", "children", "value");
    object.nodes = object;
    object.links = d3_layout_hierarchyLinks;
    return object;
  }
  function d3_layout_hierarchyVisitBefore(node, callback) {
    var nodes = [ node ];
    while ((node = nodes.pop()) != null) {
      callback(node);
      if ((children = node.children) && (n = children.length)) {
        var n, children;
        while (--n >= 0) nodes.push(children[n]);
      }
    }
  }
  function d3_layout_hierarchyVisitAfter(node, callback) {
    var nodes = [ node ], nodes2 = [];
    while ((node = nodes.pop()) != null) {
      nodes2.push(node);
      if ((children = node.children) && (n = children.length)) {
        var i = -1, n, children;
        while (++i < n) nodes.push(children[i]);
      }
    }
    while ((node = nodes2.pop()) != null) {
      callback(node);
    }
  }
  function d3_layout_hierarchyChildren(d) {
    return d.children;
  }
  function d3_layout_hierarchyValue(d) {
    return d.value;
  }
  function d3_layout_hierarchySort(a, b) {
    return b.value - a.value;
  }
  function d3_layout_hierarchyLinks(nodes) {
    return d3.merge(nodes.map(function(parent) {
      return (parent.children || []).map(function(child) {
        return {
          source: parent,
          target: child
        };
      });
    }));
  }
  d3.layout.partition = function() {
    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
    function position(node, x, dx, dy) {
      var children = node.children;
      node.x = x;
      node.y = node.depth * dy;
      node.dx = dx;
      node.dy = dy;
      if (children && (n = children.length)) {
        var i = -1, n, c, d;
        dx = node.value ? dx / node.value : 0;
        while (++i < n) {
          position(c = children[i], x, d = c.value * dx, dy);
          x += d;
        }
      }
    }
    function depth(node) {
      var children = node.children, d = 0;
      if (children && (n = children.length)) {
        var i = -1, n;
        while (++i < n) d = Math.max(d, depth(children[i]));
      }
      return 1 + d;
    }
    function partition(d, i) {
      var nodes = hierarchy.call(this, d, i);
      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
      return nodes;
    }
    partition.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return partition;
    };
    return d3_layout_hierarchyRebind(partition, hierarchy);
  };
  d3.layout.pie = function() {
    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;
    function pie(data) {
      var n = data.length, values = data.map(function(d, i) {
        return +value.call(pie, d, i);
      }), a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;
      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
        return values[j] - values[i];
      } : function(i, j) {
        return sort(data[i], data[j]);
      });
      index.forEach(function(i) {
        arcs[i] = {
          data: data[i],
          value: v = values[i],
          startAngle: a,
          endAngle: a += v * k + pa,
          padAngle: p
        };
      });
      return arcs;
    }
    pie.value = function(_) {
      if (!arguments.length) return value;
      value = _;
      return pie;
    };
    pie.sort = function(_) {
      if (!arguments.length) return sort;
      sort = _;
      return pie;
    };
    pie.startAngle = function(_) {
      if (!arguments.length) return startAngle;
      startAngle = _;
      return pie;
    };
    pie.endAngle = function(_) {
      if (!arguments.length) return endAngle;
      endAngle = _;
      return pie;
    };
    pie.padAngle = function(_) {
      if (!arguments.length) return padAngle;
      padAngle = _;
      return pie;
    };
    return pie;
  };
  var d3_layout_pieSortByValue = {};
  d3.layout.stack = function() {
    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
    function stack(data, index) {
      if (!(n = data.length)) return data;
      var series = data.map(function(d, i) {
        return values.call(stack, d, i);
      });
      var points = series.map(function(d) {
        return d.map(function(v, i) {
          return [ x.call(stack, v, i), y.call(stack, v, i) ];
        });
      });
      var orders = order.call(stack, points, index);
      series = d3.permute(series, orders);
      points = d3.permute(points, orders);
      var offsets = offset.call(stack, points, index);
      var m = series[0].length, n, i, j, o;
      for (j = 0; j < m; ++j) {
        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
        for (i = 1; i < n; ++i) {
          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
        }
      }
      return data;
    }
    stack.values = function(x) {
      if (!arguments.length) return values;
      values = x;
      return stack;
    };
    stack.order = function(x) {
      if (!arguments.length) return order;
      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
      return stack;
    };
    stack.offset = function(x) {
      if (!arguments.length) return offset;
      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
      return stack;
    };
    stack.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      return stack;
    };
    stack.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      return stack;
    };
    stack.out = function(z) {
      if (!arguments.length) return out;
      out = z;
      return stack;
    };
    return stack;
  };
  function d3_layout_stackX(d) {
    return d.x;
  }
  function d3_layout_stackY(d) {
    return d.y;
  }
  function d3_layout_stackOut(d, y0, y) {
    d.y0 = y0;
    d.y = y;
  }
  var d3_layout_stackOrders = d3.map({
    "inside-out": function(data) {
      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
        return max[a] - max[b];
      }), top = 0, bottom = 0, tops = [], bottoms = [];
      for (i = 0; i < n; ++i) {
        j = index[i];
        if (top < bottom) {
          top += sums[j];
          tops.push(j);
        } else {
          bottom += sums[j];
          bottoms.push(j);
        }
      }
      return bottoms.reverse().concat(tops);
    },
    reverse: function(data) {
      return d3.range(data.length).reverse();
    },
    "default": d3_layout_stackOrderDefault
  });
  var d3_layout_stackOffsets = d3.map({
    silhouette: function(data) {
      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o > max) max = o;
        sums.push(o);
      }
      for (j = 0; j < m; ++j) {
        y0[j] = (max - sums[j]) / 2;
      }
      return y0;
    },
    wiggle: function(data) {
      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
      y0[0] = o = o0 = 0;
      for (j = 1; j < m; ++j) {
        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
          }
          s2 += s3 * data[i][j][1];
        }
        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
        if (o < o0) o0 = o;
      }
      for (j = 0; j < m; ++j) y0[j] -= o0;
      return y0;
    },
    expand: function(data) {
      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
      }
      for (j = 0; j < m; ++j) y0[j] = 0;
      return y0;
    },
    zero: d3_layout_stackOffsetZero
  });
  function d3_layout_stackOrderDefault(data) {
    return d3.range(data.length);
  }
  function d3_layout_stackOffsetZero(data) {
    var j = -1, m = data[0].length, y0 = [];
    while (++j < m) y0[j] = 0;
    return y0;
  }
  function d3_layout_stackMaxIndex(array) {
    var i = 1, j = 0, v = array[0][1], k, n = array.length;
    for (;i < n; ++i) {
      if ((k = array[i][1]) > v) {
        j = i;
        v = k;
      }
    }
    return j;
  }
  function d3_layout_stackReduceSum(d) {
    return d.reduce(d3_layout_stackSum, 0);
  }
  function d3_layout_stackSum(p, d) {
    return p + d[1];
  }
  d3.layout.histogram = function() {
    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
    function histogram(data, i) {
      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
      while (++i < m) {
        bin = bins[i] = [];
        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
        bin.y = 0;
      }
      if (m > 0) {
        i = -1;
        while (++i < n) {
          x = values[i];
          if (x >= range[0] && x <= range[1]) {
            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
            bin.y += k;
            bin.push(data[i]);
          }
        }
      }
      return bins;
    }
    histogram.value = function(x) {
      if (!arguments.length) return valuer;
      valuer = x;
      return histogram;
    };
    histogram.range = function(x) {
      if (!arguments.length) return ranger;
      ranger = d3_functor(x);
      return histogram;
    };
    histogram.bins = function(x) {
      if (!arguments.length) return binner;
      binner = typeof x === "number" ? function(range) {
        return d3_layout_histogramBinFixed(range, x);
      } : d3_functor(x);
      return histogram;
    };
    histogram.frequency = function(x) {
      if (!arguments.length) return frequency;
      frequency = !!x;
      return histogram;
    };
    return histogram;
  };
  function d3_layout_histogramBinSturges(range, values) {
    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
  }
  function d3_layout_histogramBinFixed(range, n) {
    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
    while (++x <= n) f[x] = m * x + b;
    return f;
  }
  function d3_layout_histogramRange(values) {
    return [ d3.min(values), d3.max(values) ];
  }
  d3.layout.pack = function() {
    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
    function pack(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
        return radius;
      };
      root.x = root.y = 0;
      d3_layout_hierarchyVisitAfter(root, function(d) {
        d.r = +r(d.value);
      });
      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
      if (padding) {
        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r += dr;
        });
        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r -= dr;
        });
      }
      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
      return nodes;
    }
    pack.size = function(_) {
      if (!arguments.length) return size;
      size = _;
      return pack;
    };
    pack.radius = function(_) {
      if (!arguments.length) return radius;
      radius = _ == null || typeof _ === "function" ? _ : +_;
      return pack;
    };
    pack.padding = function(_) {
      if (!arguments.length) return padding;
      padding = +_;
      return pack;
    };
    return d3_layout_hierarchyRebind(pack, hierarchy);
  };
  function d3_layout_packSort(a, b) {
    return a.value - b.value;
  }
  function d3_layout_packInsert(a, b) {
    var c = a._pack_next;
    a._pack_next = b;
    b._pack_prev = a;
    b._pack_next = c;
    c._pack_prev = b;
  }
  function d3_layout_packSplice(a, b) {
    a._pack_next = b;
    b._pack_prev = a;
  }
  function d3_layout_packIntersects(a, b) {
    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
    return .999 * dr * dr > dx * dx + dy * dy;
  }
  function d3_layout_packSiblings(node) {
    if (!(nodes = node.children) || !(n = nodes.length)) return;
    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
    function bound(node) {
      xMin = Math.min(node.x - node.r, xMin);
      xMax = Math.max(node.x + node.r, xMax);
      yMin = Math.min(node.y - node.r, yMin);
      yMax = Math.max(node.y + node.r, yMax);
    }
    nodes.forEach(d3_layout_packLink);
    a = nodes[0];
    a.x = -a.r;
    a.y = 0;
    bound(a);
    if (n > 1) {
      b = nodes[1];
      b.x = b.r;
      b.y = 0;
      bound(b);
      if (n > 2) {
        c = nodes[2];
        d3_layout_packPlace(a, b, c);
        bound(c);
        d3_layout_packInsert(a, c);
        a._pack_prev = c;
        d3_layout_packInsert(c, b);
        b = a._pack_next;
        for (i = 3; i < n; i++) {
          d3_layout_packPlace(a, b, c = nodes[i]);
          var isect = 0, s1 = 1, s2 = 1;
          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
            if (d3_layout_packIntersects(j, c)) {
              isect = 1;
              break;
            }
          }
          if (isect == 1) {
            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
              if (d3_layout_packIntersects(k, c)) {
                break;
              }
            }
          }
          if (isect) {
            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
            i--;
          } else {
            d3_layout_packInsert(a, c);
            b = c;
            bound(c);
          }
        }
      }
    }
    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
    for (i = 0; i < n; i++) {
      c = nodes[i];
      c.x -= cx;
      c.y -= cy;
      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
    }
    node.r = cr;
    nodes.forEach(d3_layout_packUnlink);
  }
  function d3_layout_packLink(node) {
    node._pack_next = node._pack_prev = node;
  }
  function d3_layout_packUnlink(node) {
    delete node._pack_next;
    delete node._pack_prev;
  }
  function d3_layout_packTransform(node, x, y, k) {
    var children = node.children;
    node.x = x += k * node.x;
    node.y = y += k * node.y;
    node.r *= k;
    if (children) {
      var i = -1, n = children.length;
      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
    }
  }
  function d3_layout_packPlace(a, b, c) {
    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
    if (db && (dx || dy)) {
      var da = b.r + c.r, dc = dx * dx + dy * dy;
      da *= da;
      db *= db;
      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
      c.x = a.x + x * dx + y * dy;
      c.y = a.y + x * dy - y * dx;
    } else {
      c.x = a.x + db;
      c.y = a.y;
    }
  }
  d3.layout.tree = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
    function tree(d, i) {
      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
      d3_layout_hierarchyVisitBefore(root1, secondWalk);
      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
        var left = root0, right = root0, bottom = root0;
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
      return nodes;
    }
    function wrapTree(root0) {
      var root1 = {
        A: null,
        children: [ root0 ]
      }, queue = [ root1 ], node1;
      while ((node1 = queue.pop()) != null) {
        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
          queue.push((children[i] = child = {
            _: children[i],
            parent: node1,
            children: (child = children[i].children) && child.slice() || [],
            A: null,
            a: null,
            z: 0,
            m: 0,
            c: 0,
            s: 0,
            t: null,
            i: i
          }).a = child);
        }
      }
      return root1.children[0];
    }
    function firstWalk(v) {
      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
      if (children.length) {
        d3_layout_treeShift(v);
        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
        if (w) {
          v.z = w.z + separation(v._, w._);
          v.m = v.z - midpoint;
        } else {
          v.z = midpoint;
        }
      } else if (w) {
        v.z = w.z + separation(v._, w._);
      }
      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
    }
    function secondWalk(v) {
      v._.x = v.z + v.parent.m;
      v.m += v.parent.m;
    }
    function apportion(v, w, ancestor) {
      if (w) {
        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
          vom = d3_layout_treeLeft(vom);
          vop = d3_layout_treeRight(vop);
          vop.a = v;
          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
          if (shift > 0) {
            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
            sip += shift;
            sop += shift;
          }
          sim += vim.m;
          sip += vip.m;
          som += vom.m;
          sop += vop.m;
        }
        if (vim && !d3_layout_treeRight(vop)) {
          vop.t = vim;
          vop.m += sim - sop;
        }
        if (vip && !d3_layout_treeLeft(vom)) {
          vom.t = vip;
          vom.m += sip - som;
          ancestor = v;
        }
      }
      return ancestor;
    }
    function sizeNode(node) {
      node.x *= size[0];
      node.y = node.depth * size[1];
    }
    tree.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return tree;
    };
    tree.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null ? sizeNode : null;
      return tree;
    };
    tree.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) == null ? null : sizeNode;
      return tree;
    };
    return d3_layout_hierarchyRebind(tree, hierarchy);
  };
  function d3_layout_treeSeparation(a, b) {
    return a.parent == b.parent ? 1 : 2;
  }
  function d3_layout_treeLeft(v) {
    var children = v.children;
    return children.length ? children[0] : v.t;
  }
  function d3_layout_treeRight(v) {
    var children = v.children, n;
    return (n = children.length) ? children[n - 1] : v.t;
  }
  function d3_layout_treeMove(wm, wp, shift) {
    var change = shift / (wp.i - wm.i);
    wp.c -= change;
    wp.s += shift;
    wm.c += change;
    wp.z += shift;
    wp.m += shift;
  }
  function d3_layout_treeShift(v) {
    var shift = 0, change = 0, children = v.children, i = children.length, w;
    while (--i >= 0) {
      w = children[i];
      w.z += shift;
      w.m += shift;
      shift += w.s + (change += w.c);
    }
  }
  function d3_layout_treeAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
  }
  d3.layout.cluster = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
    function cluster(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var children = node.children;
        if (children && children.length) {
          node.x = d3_layout_clusterX(children);
          node.y = d3_layout_clusterY(children);
        } else {
          node.x = previousNode ? x += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
        node.x = (node.x - root.x) * size[0];
        node.y = (root.y - node.y) * size[1];
      } : function(node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
      });
      return nodes;
    }
    cluster.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return cluster;
    };
    cluster.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return cluster;
    };
    cluster.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return cluster;
    };
    return d3_layout_hierarchyRebind(cluster, hierarchy);
  };
  function d3_layout_clusterY(children) {
    return 1 + d3.max(children, function(child) {
      return child.y;
    });
  }
  function d3_layout_clusterX(children) {
    return children.reduce(function(x, child) {
      return x + child.x;
    }, 0) / children.length;
  }
  function d3_layout_clusterLeft(node) {
    var children = node.children;
    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
  }
  function d3_layout_clusterRight(node) {
    var children = node.children, n;
    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
  }
  d3.layout.treemap = function() {
    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
    function scale(children, k) {
      var i = -1, n = children.length, child, area;
      while (++i < n) {
        area = (child = children[i]).value * (k < 0 ? 0 : k);
        child.area = isNaN(area) || area <= 0 ? 0 : area;
      }
    }
    function squarify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while ((n = remaining.length) > 0) {
          row.push(child = remaining[n - 1]);
          row.area += child.area;
          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
            remaining.pop();
            best = score;
          } else {
            row.area -= row.pop().area;
            position(row, u, rect, false);
            u = Math.min(rect.dx, rect.dy);
            row.length = row.area = 0;
            best = Infinity;
          }
        }
        if (row.length) {
          position(row, u, rect, true);
          row.length = row.area = 0;
        }
        children.forEach(squarify);
      }
    }
    function stickify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), remaining = children.slice(), child, row = [];
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while (child = remaining.pop()) {
          row.push(child);
          row.area += child.area;
          if (child.z != null) {
            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
            row.length = row.area = 0;
          }
        }
        children.forEach(stickify);
      }
    }
    function worst(row, u) {
      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
      while (++i < n) {
        if (!(r = row[i].area)) continue;
        if (r < rmin) rmin = r;
        if (r > rmax) rmax = r;
      }
      s *= s;
      u *= u;
      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
    }
    function position(row, u, rect, flush) {
      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
      if (u == rect.dx) {
        if (flush || v > rect.dy) v = rect.dy;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dy = v;
          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
        }
        o.z = true;
        o.dx += rect.x + rect.dx - x;
        rect.y += v;
        rect.dy -= v;
      } else {
        if (flush || v > rect.dx) v = rect.dx;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dx = v;
          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
        }
        o.z = false;
        o.dy += rect.y + rect.dy - y;
        rect.x += v;
        rect.dx -= v;
      }
    }
    function treemap(d) {
      var nodes = stickies || hierarchy(d), root = nodes[0];
      root.x = root.y = 0;
      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;
      if (stickies) hierarchy.revalue(root);
      scale([ root ], root.dx * root.dy / root.value);
      (stickies ? stickify : squarify)(root);
      if (sticky) stickies = nodes;
      return nodes;
    }
    treemap.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return treemap;
    };
    treemap.padding = function(x) {
      if (!arguments.length) return padding;
      function padFunction(node) {
        var p = x.call(treemap, node, node.depth);
        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
      }
      function padConstant(node) {
        return d3_layout_treemapPad(node, x);
      }
      var type;
      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
      padConstant) : padConstant;
      return treemap;
    };
    treemap.round = function(x) {
      if (!arguments.length) return round != Number;
      round = x ? Math.round : Number;
      return treemap;
    };
    treemap.sticky = function(x) {
      if (!arguments.length) return sticky;
      sticky = x;
      stickies = null;
      return treemap;
    };
    treemap.ratio = function(x) {
      if (!arguments.length) return ratio;
      ratio = x;
      return treemap;
    };
    treemap.mode = function(x) {
      if (!arguments.length) return mode;
      mode = x + "";
      return treemap;
    };
    return d3_layout_hierarchyRebind(treemap, hierarchy);
  };
  function d3_layout_treemapPadNull(node) {
    return {
      x: node.x,
      y: node.y,
      dx: node.dx,
      dy: node.dy
    };
  }
  function d3_layout_treemapPad(node, padding) {
    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
    if (dx < 0) {
      x += dx / 2;
      dx = 0;
    }
    if (dy < 0) {
      y += dy / 2;
      dy = 0;
    }
    return {
      x: x,
      y: y,
      dx: dx,
      dy: dy
    };
  }
  d3.random = {
    normal: function(µ, σ) {
      var n = arguments.length;
      if (n < 2) σ = 1;
      if (n < 1) µ = 0;
      return function() {
        var x, y, r;
        do {
          x = Math.random() * 2 - 1;
          y = Math.random() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
      };
    },
    logNormal: function() {
      var random = d3.random.normal.apply(d3, arguments);
      return function() {
        return Math.exp(random());
      };
    },
    bates: function(m) {
      var random = d3.random.irwinHall(m);
      return function() {
        return random() / m;
      };
    },
    irwinHall: function(m) {
      return function() {
        for (var s = 0, j = 0; j < m; j++) s += Math.random();
        return s;
      };
    }
  };
  d3.scale = {};
  function d3_scaleExtent(domain) {
    var start = domain[0], stop = domain[domain.length - 1];
    return start < stop ? [ start, stop ] : [ stop, start ];
  }
  function d3_scaleRange(scale) {
    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
  }
  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
    return function(x) {
      return i(u(x));
    };
  }
  function d3_scale_nice(domain, nice) {
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
    if (x1 < x0) {
      dx = i0, i0 = i1, i1 = dx;
      dx = x0, x0 = x1, x1 = dx;
    }
    domain[i0] = nice.floor(x0);
    domain[i1] = nice.ceil(x1);
    return domain;
  }
  function d3_scale_niceStep(step) {
    return step ? {
      floor: function(x) {
        return Math.floor(x / step) * step;
      },
      ceil: function(x) {
        return Math.ceil(x / step) * step;
      }
    } : d3_scale_niceIdentity;
  }
  var d3_scale_niceIdentity = {
    floor: d3_identity,
    ceil: d3_identity
  };
  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
    if (domain[k] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++j <= k) {
      u.push(uninterpolate(domain[j - 1], domain[j]));
      i.push(interpolate(range[j - 1], range[j]));
    }
    return function(x) {
      var j = d3.bisect(domain, x, 1, k) - 1;
      return i[j](u[j](x));
    };
  }
  d3.scale.linear = function() {
    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
  };
  function d3_scale_linear(domain, range, interpolate, clamp) {
    var output, input;
    function rescale() {
      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
      output = linear(domain, range, uninterpolate, interpolate);
      input = linear(range, domain, uninterpolate, d3_interpolate);
      return scale;
    }
    function scale(x) {
      return output(x);
    }
    scale.invert = function(y) {
      return input(y);
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(Number);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.rangeRound = function(x) {
      return scale.range(x).interpolate(d3_interpolateRound);
    };
    scale.clamp = function(x) {
      if (!arguments.length) return clamp;
      clamp = x;
      return rescale();
    };
    scale.interpolate = function(x) {
      if (!arguments.length) return interpolate;
      interpolate = x;
      return rescale();
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      d3_scale_linearNice(domain, m);
      return rescale();
    };
    scale.copy = function() {
      return d3_scale_linear(domain, range, interpolate, clamp);
    };
    return rescale();
  }
  function d3_scale_linearRebind(scale, linear) {
    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
  }
  function d3_scale_linearNice(domain, m) {
    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
    return domain;
  }
  function d3_scale_linearTickRange(domain, m) {
    if (m == null) m = 10;
    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
    extent[0] = Math.ceil(extent[0] / step) * step;
    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
    extent[2] = step;
    return extent;
  }
  function d3_scale_linearTicks(domain, m) {
    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
  }
  function d3_scale_linearTickFormat(domain, m, format) {
    var range = d3_scale_linearTickRange(domain, m);
    if (format) {
      var match = d3_format_re.exec(format);
      match.shift();
      if (match[8] === "s") {
        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
        match[8] = "f";
        format = d3.format(match.join(""));
        return function(d) {
          return format(prefix.scale(d)) + prefix.symbol;
        };
      }
      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
      format = match.join("");
    } else {
      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
    }
    return d3.format(format);
  }
  var d3_scale_linearFormatSignificant = {
    s: 1,
    g: 1,
    p: 1,
    r: 1,
    e: 1
  };
  function d3_scale_linearPrecision(value) {
    return -Math.floor(Math.log(value) / Math.LN10 + .01);
  }
  function d3_scale_linearFormatPrecision(type, range) {
    var p = d3_scale_linearPrecision(range[2]);
    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
  }
  d3.scale.log = function() {
    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
  };
  function d3_scale_log(linear, base, positive, domain) {
    function log(x) {
      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
    }
    function pow(x) {
      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
    }
    function scale(x) {
      return linear(log(x));
    }
    scale.invert = function(x) {
      return pow(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      positive = x[0] >= 0;
      linear.domain((domain = x.map(Number)).map(log));
      return scale;
    };
    scale.base = function(_) {
      if (!arguments.length) return base;
      base = +_;
      linear.domain(domain.map(log));
      return scale;
    };
    scale.nice = function() {
      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
      linear.domain(niced);
      domain = niced.map(pow);
      return scale;
    };
    scale.ticks = function() {
      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
      if (isFinite(j - i)) {
        if (positive) {
          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
          ticks.push(pow(i));
        } else {
          ticks.push(pow(i));
          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
        }
        for (i = 0; ticks[i] < u; i++) {}
        for (j = ticks.length; ticks[j - 1] > v; j--) {}
        ticks = ticks.slice(i, j);
      }
      return ticks;
    };
    scale.tickFormat = function(n, format) {
      if (!arguments.length) return d3_scale_logFormat;
      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
      var k = Math.max(1, base * n / scale.ticks().length);
      return function(d) {
        var i = d / pow(Math.round(log(d)));
        if (i * base < base - .5) i *= base;
        return i <= k ? format(d) : "";
      };
    };
    scale.copy = function() {
      return d3_scale_log(linear.copy(), base, positive, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
    floor: function(x) {
      return -Math.ceil(-x);
    },
    ceil: function(x) {
      return -Math.floor(-x);
    }
  };
  d3.scale.pow = function() {
    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
  };
  function d3_scale_pow(linear, exponent, domain) {
    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
    function scale(x) {
      return linear(powp(x));
    }
    scale.invert = function(x) {
      return powb(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      linear.domain((domain = x.map(Number)).map(powp));
      return scale;
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      return scale.domain(d3_scale_linearNice(domain, m));
    };
    scale.exponent = function(x) {
      if (!arguments.length) return exponent;
      powp = d3_scale_powPow(exponent = x);
      powb = d3_scale_powPow(1 / exponent);
      linear.domain(domain.map(powp));
      return scale;
    };
    scale.copy = function() {
      return d3_scale_pow(linear.copy(), exponent, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_scale_powPow(e) {
    return function(x) {
      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
    };
  }
  d3.scale.sqrt = function() {
    return d3.scale.pow().exponent(.5);
  };
  d3.scale.ordinal = function() {
    return d3_scale_ordinal([], {
      t: "range",
      a: [ [] ]
    });
  };
  function d3_scale_ordinal(domain, ranger) {
    var index, range, rangeBand;
    function scale(x) {
      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
    }
    function steps(start, step) {
      return d3.range(domain.length).map(function(i) {
        return start + step * i;
      });
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = [];
      index = new d3_Map();
      var i = -1, n = x.length, xi;
      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
      return scale[ranger.t].apply(scale, ranger.a);
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      rangeBand = 0;
      ranger = {
        t: "range",
        a: arguments
      };
      return scale;
    };
    scale.rangePoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, 
      0) : (stop - start) / (domain.length - 1 + padding);
      range = steps(start + step * padding / 2, step);
      rangeBand = 0;
      ranger = {
        t: "rangePoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundPoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 
      0) : (stop - start) / (domain.length - 1 + padding) | 0;
      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
      rangeBand = 0;
      ranger = {
        t: "rangeRoundPoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
      range = steps(start + step * outerPadding, step);
      if (reverse) range.reverse();
      rangeBand = step * (1 - padding);
      ranger = {
        t: "rangeBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
      if (reverse) range.reverse();
      rangeBand = Math.round(step * (1 - padding));
      ranger = {
        t: "rangeRoundBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeBand = function() {
      return rangeBand;
    };
    scale.rangeExtent = function() {
      return d3_scaleExtent(ranger.a[0]);
    };
    scale.copy = function() {
      return d3_scale_ordinal(domain, ranger);
    };
    return scale.domain(domain);
  }
  d3.scale.category10 = function() {
    return d3.scale.ordinal().range(d3_category10);
  };
  d3.scale.category20 = function() {
    return d3.scale.ordinal().range(d3_category20);
  };
  d3.scale.category20b = function() {
    return d3.scale.ordinal().range(d3_category20b);
  };
  d3.scale.category20c = function() {
    return d3.scale.ordinal().range(d3_category20c);
  };
  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
  d3.scale.quantile = function() {
    return d3_scale_quantile([], []);
  };
  function d3_scale_quantile(domain, range) {
    var thresholds;
    function rescale() {
      var k = 0, q = range.length;
      thresholds = [];
      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
      return scale;
    }
    function scale(x) {
      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.quantiles = function() {
      return thresholds;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
    };
    scale.copy = function() {
      return d3_scale_quantile(domain, range);
    };
    return rescale();
  }
  d3.scale.quantize = function() {
    return d3_scale_quantize(0, 1, [ 0, 1 ]);
  };
  function d3_scale_quantize(x0, x1, range) {
    var kx, i;
    function scale(x) {
      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
    }
    function rescale() {
      kx = range.length / (x1 - x0);
      i = range.length - 1;
      return scale;
    }
    scale.domain = function(x) {
      if (!arguments.length) return [ x0, x1 ];
      x0 = +x[0];
      x1 = +x[x.length - 1];
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      y = y < 0 ? NaN : y / kx + x0;
      return [ y, y + 1 / kx ];
    };
    scale.copy = function() {
      return d3_scale_quantize(x0, x1, range);
    };
    return rescale();
  }
  d3.scale.threshold = function() {
    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
  };
  function d3_scale_threshold(domain, range) {
    function scale(x) {
      if (x <= x) return range[d3.bisect(domain, x)];
    }
    scale.domain = function(_) {
      if (!arguments.length) return domain;
      domain = _;
      return scale;
    };
    scale.range = function(_) {
      if (!arguments.length) return range;
      range = _;
      return scale;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return [ domain[y - 1], domain[y] ];
    };
    scale.copy = function() {
      return d3_scale_threshold(domain, range);
    };
    return scale;
  }
  d3.scale.identity = function() {
    return d3_scale_identity([ 0, 1 ]);
  };
  function d3_scale_identity(domain) {
    function identity(x) {
      return +x;
    }
    identity.invert = identity;
    identity.domain = identity.range = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(identity);
      return identity;
    };
    identity.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    identity.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    identity.copy = function() {
      return d3_scale_identity(domain);
    };
    return identity;
  }
  d3.svg = {};
  function d3_zero() {
    return 0;
  }
  d3.svg.arc = function() {
    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;
    function arc() {
      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;
      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];
      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
        if (!cw) p1 *= -1;
        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
      }
      if (r1) {
        x0 = r1 * Math.cos(a0 + p1);
        y0 = r1 * Math.sin(a0 + p1);
        x1 = r1 * Math.cos(a1 - p1);
        y1 = r1 * Math.sin(a1 - p1);
        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
          var h1 = (a0 + a1) / 2;
          x0 = r1 * Math.cos(h1);
          y0 = r1 * Math.sin(h1);
          x1 = y1 = null;
        }
      } else {
        x0 = y0 = 0;
      }
      if (r0) {
        x2 = r0 * Math.cos(a1 - p0);
        y2 = r0 * Math.sin(a1 - p0);
        x3 = r0 * Math.cos(a0 + p0);
        y3 = r0 * Math.sin(a0 + p0);
        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
          var h0 = (a0 + a1) / 2;
          x2 = r0 * Math.cos(h0);
          y2 = r0 * Math.sin(h0);
          x3 = y3 = null;
        }
      } else {
        x2 = y2 = 0;
      }
      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {
        cr = r0 < r1 ^ cw ? 0 : 1;
        var rc1 = rc, rc0 = rc;
        if (da < π) {
          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
        }
        if (x1 != null) {
          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);
          if (rc === rc1) {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
          } else {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);
          }
        } else {
          path.push("M", x0, ",", y0);
        }
        if (x3 != null) {
          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);
          if (rc === rc0) {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
          } else {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
          }
        } else {
          path.push("L", x2, ",", y2);
        }
      } else {
        path.push("M", x0, ",", y0);
        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
        path.push("L", x2, ",", y2);
        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
      }
      path.push("Z");
      return path.join("");
    }
    function circleSegment(r1, cw) {
      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
    }
    arc.innerRadius = function(v) {
      if (!arguments.length) return innerRadius;
      innerRadius = d3_functor(v);
      return arc;
    };
    arc.outerRadius = function(v) {
      if (!arguments.length) return outerRadius;
      outerRadius = d3_functor(v);
      return arc;
    };
    arc.cornerRadius = function(v) {
      if (!arguments.length) return cornerRadius;
      cornerRadius = d3_functor(v);
      return arc;
    };
    arc.padRadius = function(v) {
      if (!arguments.length) return padRadius;
      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
      return arc;
    };
    arc.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return arc;
    };
    arc.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return arc;
    };
    arc.padAngle = function(v) {
      if (!arguments.length) return padAngle;
      padAngle = d3_functor(v);
      return arc;
    };
    arc.centroid = function() {
      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
      return [ Math.cos(a) * r, Math.sin(a) * r ];
    };
    return arc;
  };
  var d3_svg_arcAuto = "auto";
  function d3_svg_arcInnerRadius(d) {
    return d.innerRadius;
  }
  function d3_svg_arcOuterRadius(d) {
    return d.outerRadius;
  }
  function d3_svg_arcStartAngle(d) {
    return d.startAngle;
  }
  function d3_svg_arcEndAngle(d) {
    return d.endAngle;
  }
  function d3_svg_arcPadAngle(d) {
    return d && d.padAngle;
  }
  function d3_svg_arcSweep(x0, y0, x1, y1) {
    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
  }
  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];
  }
  function d3_svg_line(projection) {
    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
    function line(data) {
      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
      function segment() {
        segments.push("M", interpolate(projection(points), tension));
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
        } else if (points.length) {
          segment();
          points = [];
        }
      }
      if (points.length) segment();
      return segments.length ? segments.join("") : null;
    }
    line.x = function(_) {
      if (!arguments.length) return x;
      x = _;
      return line;
    };
    line.y = function(_) {
      if (!arguments.length) return y;
      y = _;
      return line;
    };
    line.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return line;
    };
    line.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      return line;
    };
    line.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return line;
    };
    return line;
  }
  d3.svg.line = function() {
    return d3_svg_line(d3_identity);
  };
  var d3_svg_lineInterpolators = d3.map({
    linear: d3_svg_lineLinear,
    "linear-closed": d3_svg_lineLinearClosed,
    step: d3_svg_lineStep,
    "step-before": d3_svg_lineStepBefore,
    "step-after": d3_svg_lineStepAfter,
    basis: d3_svg_lineBasis,
    "basis-open": d3_svg_lineBasisOpen,
    "basis-closed": d3_svg_lineBasisClosed,
    bundle: d3_svg_lineBundle,
    cardinal: d3_svg_lineCardinal,
    "cardinal-open": d3_svg_lineCardinalOpen,
    "cardinal-closed": d3_svg_lineCardinalClosed,
    monotone: d3_svg_lineMonotone
  });
  d3_svg_lineInterpolators.forEach(function(key, value) {
    value.key = key;
    value.closed = /-closed$/.test(key);
  });
  function d3_svg_lineLinear(points) {
    return points.length > 1 ? points.join("L") : points + "Z";
  }
  function d3_svg_lineLinearClosed(points) {
    return points.join("L") + "Z";
  }
  function d3_svg_lineStep(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
    if (n > 1) path.push("H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepBefore(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepAfter(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
    return path.join("");
  }
  function d3_svg_lineCardinalOpen(points, tension) {
    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineCardinalClosed(points, tension) {
    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
  }
  function d3_svg_lineCardinal(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineHermite(points, tangents) {
    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
      return d3_svg_lineLinear(points);
    }
    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
    if (quad) {
      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
      p0 = points[1];
      pi = 2;
    }
    if (tangents.length > 1) {
      t = tangents[1];
      p = points[pi];
      pi++;
      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      for (var i = 2; i < tangents.length; i++, pi++) {
        p = points[pi];
        t = tangents[i];
        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      }
    }
    if (quad) {
      var lp = points[pi];
      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
    }
    return path;
  }
  function d3_svg_lineCardinalTangents(points, tension) {
    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
    while (++i < n) {
      p0 = p1;
      p1 = p2;
      p2 = points[i];
      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
    }
    return tangents;
  }
  function d3_svg_lineBasis(points) {
    if (points.length < 3) return d3_svg_lineLinear(points);
    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    points.push(points[n - 1]);
    while (++i <= n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    points.pop();
    path.push("L", pi);
    return path.join("");
  }
  function d3_svg_lineBasisOpen(points) {
    if (points.length < 4) return d3_svg_lineLinear(points);
    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
    while (++i < 3) {
      pi = points[i];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
    --i;
    while (++i < n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBasisClosed(points) {
    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
    while (++i < 4) {
      pi = points[i % n];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    --i;
    while (++i < m) {
      pi = points[i % n];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBundle(points, tension) {
    var n = points.length - 1;
    if (n) {
      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
      while (++i <= n) {
        p = points[i];
        t = i / n;
        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
      }
    }
    return d3_svg_lineBasis(points);
  }
  function d3_svg_lineDot4(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
  function d3_svg_lineBasisBezier(path, x, y) {
    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
  }
  function d3_svg_lineSlope(p0, p1) {
    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
  }
  function d3_svg_lineFiniteDifferences(points) {
    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
    while (++i < j) {
      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
    }
    m[i] = d;
    return m;
  }
  function d3_svg_lineMonotoneTangents(points) {
    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
    while (++i < j) {
      d = d3_svg_lineSlope(points[i], points[i + 1]);
      if (abs(d) < ε) {
        m[i] = m[i + 1] = 0;
      } else {
        a = m[i] / d;
        b = m[i + 1] / d;
        s = a * a + b * b;
        if (s > 9) {
          s = d * 3 / Math.sqrt(s);
          m[i] = s * a;
          m[i + 1] = s * b;
        }
      }
    }
    i = -1;
    while (++i <= j) {
      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
      tangents.push([ s || 0, m[i] * s || 0 ]);
    }
    return tangents;
  }
  function d3_svg_lineMonotone(points) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
  }
  d3.svg.line.radial = function() {
    var line = d3_svg_line(d3_svg_lineRadial);
    line.radius = line.x, delete line.x;
    line.angle = line.y, delete line.y;
    return line;
  };
  function d3_svg_lineRadial(points) {
    var point, i = -1, n = points.length, r, a;
    while (++i < n) {
      point = points[i];
      r = point[0];
      a = point[1] - halfπ;
      point[0] = r * Math.cos(a);
      point[1] = r * Math.sin(a);
    }
    return points;
  }
  function d3_svg_area(projection) {
    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
    function area(data) {
      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
        return x;
      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
        return y;
      } : d3_functor(y1), x, y;
      function segment() {
        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
        } else if (points0.length) {
          segment();
          points0 = [];
          points1 = [];
        }
      }
      if (points0.length) segment();
      return segments.length ? segments.join("") : null;
    }
    area.x = function(_) {
      if (!arguments.length) return x1;
      x0 = x1 = _;
      return area;
    };
    area.x0 = function(_) {
      if (!arguments.length) return x0;
      x0 = _;
      return area;
    };
    area.x1 = function(_) {
      if (!arguments.length) return x1;
      x1 = _;
      return area;
    };
    area.y = function(_) {
      if (!arguments.length) return y1;
      y0 = y1 = _;
      return area;
    };
    area.y0 = function(_) {
      if (!arguments.length) return y0;
      y0 = _;
      return area;
    };
    area.y1 = function(_) {
      if (!arguments.length) return y1;
      y1 = _;
      return area;
    };
    area.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return area;
    };
    area.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      interpolateReverse = interpolate.reverse || interpolate;
      L = interpolate.closed ? "M" : "L";
      return area;
    };
    area.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return area;
    };
    return area;
  }
  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
  d3.svg.area = function() {
    return d3_svg_area(d3_identity);
  };
  d3.svg.area.radial = function() {
    var area = d3_svg_area(d3_svg_lineRadial);
    area.radius = area.x, delete area.x;
    area.innerRadius = area.x0, delete area.x0;
    area.outerRadius = area.x1, delete area.x1;
    area.angle = area.y, delete area.y;
    area.startAngle = area.y0, delete area.y0;
    area.endAngle = area.y1, delete area.y1;
    return area;
  };
  d3.svg.chord = function() {
    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function chord(d, i) {
      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
    }
    function subgroup(self, f, d, i) {
      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;
      return {
        r: r,
        a0: a0,
        a1: a1,
        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
      };
    }
    function equals(a, b) {
      return a.a0 == b.a0 && a.a1 == b.a1;
    }
    function arc(r, p, a) {
      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
    }
    function curve(r0, p0, r1, p1) {
      return "Q 0,0 " + p1;
    }
    chord.radius = function(v) {
      if (!arguments.length) return radius;
      radius = d3_functor(v);
      return chord;
    };
    chord.source = function(v) {
      if (!arguments.length) return source;
      source = d3_functor(v);
      return chord;
    };
    chord.target = function(v) {
      if (!arguments.length) return target;
      target = d3_functor(v);
      return chord;
    };
    chord.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return chord;
    };
    chord.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return chord;
    };
    return chord;
  };
  function d3_svg_chordRadius(d) {
    return d.radius;
  }
  d3.svg.diagonal = function() {
    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
    function diagonal(d, i) {
      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
        x: p0.x,
        y: m
      }, {
        x: p3.x,
        y: m
      }, p3 ];
      p = p.map(projection);
      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
    }
    diagonal.source = function(x) {
      if (!arguments.length) return source;
      source = d3_functor(x);
      return diagonal;
    };
    diagonal.target = function(x) {
      if (!arguments.length) return target;
      target = d3_functor(x);
      return diagonal;
    };
    diagonal.projection = function(x) {
      if (!arguments.length) return projection;
      projection = x;
      return diagonal;
    };
    return diagonal;
  };
  function d3_svg_diagonalProjection(d) {
    return [ d.x, d.y ];
  }
  d3.svg.diagonal.radial = function() {
    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
    diagonal.projection = function(x) {
      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
    };
    return diagonal;
  };
  function d3_svg_diagonalRadialProjection(projection) {
    return function() {
      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;
      return [ r * Math.cos(a), r * Math.sin(a) ];
    };
  }
  d3.svg.symbol = function() {
    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
    function symbol(d, i) {
      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
    }
    symbol.type = function(x) {
      if (!arguments.length) return type;
      type = d3_functor(x);
      return symbol;
    };
    symbol.size = function(x) {
      if (!arguments.length) return size;
      size = d3_functor(x);
      return symbol;
    };
    return symbol;
  };
  function d3_svg_symbolSize() {
    return 64;
  }
  function d3_svg_symbolType() {
    return "circle";
  }
  function d3_svg_symbolCircle(size) {
    var r = Math.sqrt(size / π);
    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
  }
  var d3_svg_symbols = d3.map({
    circle: d3_svg_symbolCircle,
    cross: function(size) {
      var r = Math.sqrt(size / 5) / 2;
      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
    },
    diamond: function(size) {
      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
    },
    square: function(size) {
      var r = Math.sqrt(size) / 2;
      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
    },
    "triangle-down": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
    },
    "triangle-up": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
    }
  });
  d3.svg.symbolTypes = d3_svg_symbols.keys();
  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
  d3_selectionPrototype.transition = function(name) {
    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {
      time: Date.now(),
      ease: d3_ease_cubicInOut,
      delay: 0,
      duration: 250
    };
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_selectionPrototype.interrupt = function(name) {
    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
  };
  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
  function d3_selection_interruptNS(ns) {
    return function() {
      var lock, activeId, active;
      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {
        active.timer.c = null;
        active.timer.t = NaN;
        if (--lock.count) delete lock[activeId]; else delete this[ns];
        lock.active += .5;
        active.event && active.event.interrupt.call(this, this.__data__, active.index);
      }
    };
  }
  function d3_transition(groups, ns, id) {
    d3_subclass(groups, d3_transitionPrototype);
    groups.namespace = ns;
    groups.id = id;
    return groups;
  }
  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
  d3_transitionPrototype.call = d3_selectionPrototype.call;
  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
  d3_transitionPrototype.node = d3_selectionPrototype.node;
  d3_transitionPrototype.size = d3_selectionPrototype.size;
  d3.transition = function(selection, name) {
    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
  };
  d3.transition.prototype = d3_transitionPrototype;
  d3_transitionPrototype.select = function(selector) {
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          d3_transitionNode(subnode, i, ns, id, node[ns][id]);
          subgroup.push(subnode);
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.selectAll = function(selector) {
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          transition = node[ns][id];
          subnodes = selector.call(node, node.__data__, i, j);
          subgroups.push(subgroup = []);
          for (var k = -1, o = subnodes.length; ++k < o; ) {
            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);
            subgroup.push(subnode);
          }
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_transition(subgroups, this.namespace, this.id);
  };
  d3_transitionPrototype.tween = function(name, tween) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
    return d3_selection_each(this, tween == null ? function(node) {
      node[ns][id].tween.remove(name);
    } : function(node) {
      node[ns][id].tween.set(name, tween);
    });
  };
  function d3_transition_tween(groups, name, value, tween) {
    var id = groups.id, ns = groups.namespace;
    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
    } : (value = tween(value), function(node) {
      node[ns][id].tween.set(name, value);
    }));
  }
  d3_transitionPrototype.attr = function(nameNS, value) {
    if (arguments.length < 2) {
      for (value in nameNS) this.attr(value, nameNS[value]);
      return this;
    }
    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrTween(b) {
      return b == null ? attrNull : (b += "", function() {
        var a = this.getAttribute(name), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttribute(name, i(t));
        });
      });
    }
    function attrTweenNS(b) {
      return b == null ? attrNullNS : (b += "", function() {
        var a = this.getAttributeNS(name.space, name.local), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttributeNS(name.space, name.local, i(t));
        });
      });
    }
    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.attrTween = function(nameNS, tween) {
    var name = d3.ns.qualify(nameNS);
    function attrTween(d, i) {
      var f = tween.call(this, d, i, this.getAttribute(name));
      return f && function(t) {
        this.setAttribute(name, f(t));
      };
    }
    function attrTweenNS(d, i) {
      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
      return f && function(t) {
        this.setAttributeNS(name.space, name.local, f(t));
      };
    }
    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.style(priority, name[priority], value);
        return this;
      }
      priority = "";
    }
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleString(b) {
      return b == null ? styleNull : (b += "", function() {
        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;
        return a !== b && (i = d3_interpolate(a, b), function(t) {
          this.style.setProperty(name, i(t), priority);
        });
      });
    }
    return d3_transition_tween(this, "style." + name, value, styleString);
  };
  d3_transitionPrototype.styleTween = function(name, tween, priority) {
    if (arguments.length < 3) priority = "";
    function styleTween(d, i) {
      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
      return f && function(t) {
        this.style.setProperty(name, f(t), priority);
      };
    }
    return this.tween("style." + name, styleTween);
  };
  d3_transitionPrototype.text = function(value) {
    return d3_transition_tween(this, "text", value, d3_transition_text);
  };
  function d3_transition_text(b) {
    if (b == null) b = "";
    return function() {
      this.textContent = b;
    };
  }
  d3_transitionPrototype.remove = function() {
    var ns = this.namespace;
    return this.each("end.transition", function() {
      var p;
      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);
    });
  };
  d3_transitionPrototype.ease = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].ease;
    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
    return d3_selection_each(this, function(node) {
      node[ns][id].ease = value;
    });
  };
  d3_transitionPrototype.delay = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].delay;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node[ns][id].delay = +value.call(node, node.__data__, i, j);
    } : (value = +value, function(node) {
      node[ns][id].delay = value;
    }));
  };
  d3_transitionPrototype.duration = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].duration;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
    } : (value = Math.max(1, value), function(node) {
      node[ns][id].duration = value;
    }));
  };
  d3_transitionPrototype.each = function(type, listener) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 2) {
      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
      try {
        d3_transitionInheritId = id;
        d3_selection_each(this, function(node, i, j) {
          d3_transitionInherit = node[ns][id];
          type.call(node, node.__data__, i, j);
        });
      } finally {
        d3_transitionInherit = inherit;
        d3_transitionInheritId = inheritId;
      }
    } else {
      d3_selection_each(this, function(node) {
        var transition = node[ns][id];
        (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);
      });
    }
    return this;
  };
  d3_transitionPrototype.transition = function() {
    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if (node = group[i]) {
          transition = node[ns][id0];
          d3_transitionNode(node, i, ns, id1, {
            time: transition.time,
            ease: transition.ease,
            delay: transition.delay + transition.duration,
            duration: transition.duration
          });
        }
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id1);
  };
  function d3_transitionNamespace(name) {
    return name == null ? "__transition__" : "__transition_" + name + "__";
  }
  function d3_transitionNode(node, i, ns, id, inherit) {
    var lock = node[ns] || (node[ns] = {
      active: 0,
      count: 0
    }), transition = lock[id], time, timer, duration, ease, tweens;
    function schedule(elapsed) {
      var delay = transition.delay;
      timer.t = delay + time;
      if (delay <= elapsed) return start(elapsed - delay);
      timer.c = start;
    }
    function start(elapsed) {
      var activeId = lock.active, active = lock[activeId];
      if (active) {
        active.timer.c = null;
        active.timer.t = NaN;
        --lock.count;
        delete lock[activeId];
        active.event && active.event.interrupt.call(node, node.__data__, active.index);
      }
      for (var cancelId in lock) {
        if (+cancelId < id) {
          var cancel = lock[cancelId];
          cancel.timer.c = null;
          cancel.timer.t = NaN;
          --lock.count;
          delete lock[cancelId];
        }
      }
      timer.c = tick;
      d3_timer(function() {
        if (timer.c && tick(elapsed || 1)) {
          timer.c = null;
          timer.t = NaN;
        }
        return 1;
      }, 0, time);
      lock.active = id;
      transition.event && transition.event.start.call(node, node.__data__, i);
      tweens = [];
      transition.tween.forEach(function(key, value) {
        if (value = value.call(node, node.__data__, i)) {
          tweens.push(value);
        }
      });
      ease = transition.ease;
      duration = transition.duration;
    }
    function tick(elapsed) {
      var t = elapsed / duration, e = ease(t), n = tweens.length;
      while (n > 0) {
        tweens[--n].call(node, e);
      }
      if (t >= 1) {
        transition.event && transition.event.end.call(node, node.__data__, i);
        if (--lock.count) delete lock[id]; else delete node[ns];
        return 1;
      }
    }
    if (!transition) {
      time = inherit.time;
      timer = d3_timer(schedule, 0, time);
      transition = lock[id] = {
        tween: new d3_Map(),
        time: time,
        timer: timer,
        delay: inherit.delay,
        duration: inherit.duration,
        ease: inherit.ease,
        index: i
      };
      inherit = null;
      ++lock.count;
    }
  }
  d3.svg.axis = function() {
    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
    function axis(g) {
      g.each(function() {
        var g = d3.select(this);
        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
        d3.transition(path));
        tickEnter.append("line");
        tickEnter.append("text");
        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
        if (orient === "bottom" || orient === "top") {
          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
        } else {
          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
        }
        lineEnter.attr(y2, sign * innerTickSize);
        textEnter.attr(y1, sign * tickSpacing);
        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
        if (scale1.rangeBand) {
          var x = scale1, dx = x.rangeBand() / 2;
          scale0 = scale1 = function(d) {
            return x(d) + dx;
          };
        } else if (scale0.rangeBand) {
          scale0 = scale1;
        } else {
          tickExit.call(tickTransform, scale1, scale0);
        }
        tickEnter.call(tickTransform, scale0, scale1);
        tickUpdate.call(tickTransform, scale1, scale1);
      });
    }
    axis.scale = function(x) {
      if (!arguments.length) return scale;
      scale = x;
      return axis;
    };
    axis.orient = function(x) {
      if (!arguments.length) return orient;
      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
      return axis;
    };
    axis.ticks = function() {
      if (!arguments.length) return tickArguments_;
      tickArguments_ = d3_array(arguments);
      return axis;
    };
    axis.tickValues = function(x) {
      if (!arguments.length) return tickValues;
      tickValues = x;
      return axis;
    };
    axis.tickFormat = function(x) {
      if (!arguments.length) return tickFormat_;
      tickFormat_ = x;
      return axis;
    };
    axis.tickSize = function(x) {
      var n = arguments.length;
      if (!n) return innerTickSize;
      innerTickSize = +x;
      outerTickSize = +arguments[n - 1];
      return axis;
    };
    axis.innerTickSize = function(x) {
      if (!arguments.length) return innerTickSize;
      innerTickSize = +x;
      return axis;
    };
    axis.outerTickSize = function(x) {
      if (!arguments.length) return outerTickSize;
      outerTickSize = +x;
      return axis;
    };
    axis.tickPadding = function(x) {
      if (!arguments.length) return tickPadding;
      tickPadding = +x;
      return axis;
    };
    axis.tickSubdivide = function() {
      return arguments.length && axis;
    };
    return axis;
  };
  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
    top: 1,
    right: 1,
    bottom: 1,
    left: 1
  };
  function d3_svg_axisX(selection, x0, x1) {
    selection.attr("transform", function(d) {
      var v0 = x0(d);
      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
    });
  }
  function d3_svg_axisY(selection, y0, y1) {
    selection.attr("transform", function(d) {
      var v0 = y0(d);
      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
    });
  }
  d3.svg.brush = function() {
    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
    function brush(g) {
      g.each(function() {
        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
        var background = g.selectAll(".background").data([ 0 ]);
        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
        var resize = g.selectAll(".resize").data(resizes, d3_identity);
        resize.exit().remove();
        resize.enter().append("g").attr("class", function(d) {
          return "resize " + d;
        }).style("cursor", function(d) {
          return d3_svg_brushCursor[d];
        }).append("rect").attr("x", function(d) {
          return /[ew]$/.test(d) ? -3 : null;
        }).attr("y", function(d) {
          return /^[ns]/.test(d) ? -3 : null;
        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
        resize.style("display", brush.empty() ? "none" : null);
        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
        if (x) {
          range = d3_scaleRange(x);
          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
          redrawX(gUpdate);
        }
        if (y) {
          range = d3_scaleRange(y);
          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
          redrawY(gUpdate);
        }
        redraw(gUpdate);
      });
    }
    brush.event = function(g) {
      g.each(function() {
        var event_ = event.of(this, arguments), extent1 = {
          x: xExtent,
          y: yExtent,
          i: xExtentDomain,
          j: yExtentDomain
        }, extent0 = this.__chart__ || extent1;
        this.__chart__ = extent1;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.brush", function() {
            xExtentDomain = extent0.i;
            yExtentDomain = extent0.j;
            xExtent = extent0.x;
            yExtent = extent0.y;
            event_({
              type: "brushstart"
            });
          }).tween("brush:brush", function() {
            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
            xExtentDomain = yExtentDomain = null;
            return function(t) {
              xExtent = extent1.x = xi(t);
              yExtent = extent1.y = yi(t);
              event_({
                type: "brush",
                mode: "resize"
              });
            };
          }).each("end.brush", function() {
            xExtentDomain = extent1.i;
            yExtentDomain = extent1.j;
            event_({
              type: "brush",
              mode: "resize"
            });
            event_({
              type: "brushend"
            });
          });
        } else {
          event_({
            type: "brushstart"
          });
          event_({
            type: "brush",
            mode: "resize"
          });
          event_({
            type: "brushend"
          });
        }
      });
    };
    function redraw(g) {
      g.selectAll(".resize").attr("transform", function(d) {
        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
      });
    }
    function redrawX(g) {
      g.select(".extent").attr("x", xExtent[0]);
      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
    }
    function redrawY(g) {
      g.select(".extent").attr("y", yExtent[0]);
      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
    }
    function brushstart() {
      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;
      var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);
      if (d3.event.changedTouches) {
        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
      } else {
        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
      }
      g.interrupt().selectAll("*").interrupt();
      if (dragging) {
        origin[0] = xExtent[0] - origin[0];
        origin[1] = yExtent[0] - origin[1];
      } else if (resizing) {
        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
        origin[0] = xExtent[ex];
        origin[1] = yExtent[ey];
      } else if (d3.event.altKey) center = origin.slice();
      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
      d3.select("body").style("cursor", eventTarget.style("cursor"));
      event_({
        type: "brushstart"
      });
      brushmove();
      function keydown() {
        if (d3.event.keyCode == 32) {
          if (!dragging) {
            center = null;
            origin[0] -= xExtent[1];
            origin[1] -= yExtent[1];
            dragging = 2;
          }
          d3_eventPreventDefault();
        }
      }
      function keyup() {
        if (d3.event.keyCode == 32 && dragging == 2) {
          origin[0] += xExtent[1];
          origin[1] += yExtent[1];
          dragging = 0;
          d3_eventPreventDefault();
        }
      }
      function brushmove() {
        var point = d3.mouse(target), moved = false;
        if (offset) {
          point[0] += offset[0];
          point[1] += offset[1];
        }
        if (!dragging) {
          if (d3.event.altKey) {
            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
            origin[0] = xExtent[+(point[0] < center[0])];
            origin[1] = yExtent[+(point[1] < center[1])];
          } else center = null;
        }
        if (resizingX && move1(point, x, 0)) {
          redrawX(g);
          moved = true;
        }
        if (resizingY && move1(point, y, 1)) {
          redrawY(g);
          moved = true;
        }
        if (moved) {
          redraw(g);
          event_({
            type: "brush",
            mode: dragging ? "move" : "resize"
          });
        }
      }
      function move1(point, scale, i) {
        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
        if (dragging) {
          r0 -= position;
          r1 -= size + position;
        }
        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
        if (dragging) {
          max = (min += position) + size;
        } else {
          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
          if (position < min) {
            max = min;
            min = position;
          } else {
            max = position;
          }
        }
        if (extent[0] != min || extent[1] != max) {
          if (i) yExtentDomain = null; else xExtentDomain = null;
          extent[0] = min;
          extent[1] = max;
          return true;
        }
      }
      function brushend() {
        brushmove();
        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
        d3.select("body").style("cursor", null);
        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
        dragRestore();
        event_({
          type: "brushend"
        });
      }
    }
    brush.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.clamp = function(z) {
      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
      return brush;
    };
    brush.extent = function(z) {
      var x0, x1, y0, y1, t;
      if (!arguments.length) {
        if (x) {
          if (xExtentDomain) {
            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
          } else {
            x0 = xExtent[0], x1 = xExtent[1];
            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
            if (x1 < x0) t = x0, x0 = x1, x1 = t;
          }
        }
        if (y) {
          if (yExtentDomain) {
            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
          } else {
            y0 = yExtent[0], y1 = yExtent[1];
            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
            if (y1 < y0) t = y0, y0 = y1, y1 = t;
          }
        }
        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
      }
      if (x) {
        x0 = z[0], x1 = z[1];
        if (y) x0 = x0[0], x1 = x1[0];
        xExtentDomain = [ x0, x1 ];
        if (x.invert) x0 = x(x0), x1 = x(x1);
        if (x1 < x0) t = x0, x0 = x1, x1 = t;
        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
      }
      if (y) {
        y0 = z[0], y1 = z[1];
        if (x) y0 = y0[1], y1 = y1[1];
        yExtentDomain = [ y0, y1 ];
        if (y.invert) y0 = y(y0), y1 = y(y1);
        if (y1 < y0) t = y0, y0 = y1, y1 = t;
        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
      }
      return brush;
    };
    brush.clear = function() {
      if (!brush.empty()) {
        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
        xExtentDomain = yExtentDomain = null;
      }
      return brush;
    };
    brush.empty = function() {
      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
    };
    return d3.rebind(brush, event, "on");
  };
  var d3_svg_brushCursor = {
    n: "ns-resize",
    e: "ew-resize",
    s: "ns-resize",
    w: "ew-resize",
    nw: "nwse-resize",
    ne: "nesw-resize",
    se: "nwse-resize",
    sw: "nesw-resize"
  };
  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
  var d3_time_formatUtc = d3_time_format.utc;
  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
  function d3_time_formatIsoNative(date) {
    return date.toISOString();
  }
  d3_time_formatIsoNative.parse = function(string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
  };
  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
  d3_time.second = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 1e3) * 1e3);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
  }, function(date) {
    return date.getSeconds();
  });
  d3_time.seconds = d3_time.second.range;
  d3_time.seconds.utc = d3_time.second.utc.range;
  d3_time.minute = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 6e4) * 6e4);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
  }, function(date) {
    return date.getMinutes();
  });
  d3_time.minutes = d3_time.minute.range;
  d3_time.minutes.utc = d3_time.minute.utc.range;
  d3_time.hour = d3_time_interval(function(date) {
    var timezone = date.getTimezoneOffset() / 60;
    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
  }, function(date) {
    return date.getHours();
  });
  d3_time.hours = d3_time.hour.range;
  d3_time.hours.utc = d3_time.hour.utc.range;
  d3_time.month = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setDate(1);
    return date;
  }, function(date, offset) {
    date.setMonth(date.getMonth() + offset);
  }, function(date) {
    return date.getMonth();
  });
  d3_time.months = d3_time.month.range;
  d3_time.months.utc = d3_time.month.utc.range;
  function d3_time_scale(linear, methods, format) {
    function scale(x) {
      return linear(x);
    }
    scale.invert = function(x) {
      return d3_time_scaleDate(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
      linear.domain(x);
      return scale;
    };
    function tickMethod(extent, count) {
      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
        return d / 31536e6;
      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
    }
    scale.nice = function(interval, skip) {
      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
      if (method) interval = method[0], skip = method[1];
      function skipped(date) {
        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
      }
      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
        floor: function(date) {
          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
          return date;
        },
        ceil: function(date) {
          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
          return date;
        }
      } : interval));
    };
    scale.ticks = function(interval, skip) {
      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
        range: interval
      }, skip ];
      if (method) interval = method[0], skip = method[1];
      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
    };
    scale.tickFormat = function() {
      return format;
    };
    scale.copy = function() {
      return d3_time_scale(linear.copy(), methods, format);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_time_scaleDate(t) {
    return new Date(t);
  }
  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
    return d.getMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getMinutes();
  } ], [ "%I %p", function(d) {
    return d.getHours();
  } ], [ "%a %d", function(d) {
    return d.getDay() && d.getDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getDate() != 1;
  } ], [ "%B", function(d) {
    return d.getMonth();
  } ], [ "%Y", d3_true ] ]);
  var d3_time_scaleMilliseconds = {
    range: function(start, stop, step) {
      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
    },
    floor: d3_identity,
    ceil: d3_identity
  };
  d3_time_scaleLocalMethods.year = d3_time.year;
  d3_time.scale = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
  };
  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
    return [ m[0].utc, m[1] ];
  });
  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
    return d.getUTCMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getUTCSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getUTCMinutes();
  } ], [ "%I %p", function(d) {
    return d.getUTCHours();
  } ], [ "%a %d", function(d) {
    return d.getUTCDay() && d.getUTCDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getUTCDate() != 1;
  } ], [ "%B", function(d) {
    return d.getUTCMonth();
  } ], [ "%Y", d3_true ] ]);
  d3_time_scaleUtcMethods.year = d3_time.year.utc;
  d3_time.scale.utc = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
  };
  d3.text = d3_xhrType(function(request) {
    return request.responseText;
  });
  d3.json = function(url, callback) {
    return d3_xhr(url, "application/json", d3_json, callback);
  };
  function d3_json(request) {
    return JSON.parse(request.responseText);
  }
  d3.html = function(url, callback) {
    return d3_xhr(url, "text/html", d3_html, callback);
  };
  function d3_html(request) {
    var range = d3_document.createRange();
    range.selectNode(d3_document.body);
    return range.createContextualFragment(request.responseText);
  }
  d3.xml = d3_xhrType(function(request) {
    return request.responseXML;
  });
  if (typeof define === "function" && define.amd) this.d3 = d3, define(d3); else if (typeof module === "object" && module.exports) module.exports = d3; else this.d3 = d3;
}();
},{}]},{},[7]);
